!function(n){function t(l){if(e[l])return e[l].exports;var I=e[l]={i:l,l:!1,exports:{}};return n[l].call(I.exports,I,I.exports,t),I.l=!0,I.exports}var e={};t.m=n,t.c=e,t.d=function(n,e,l){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:l})},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},t.p="/docs/",t(t.s=2)}([function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    return {\n      search: true,\n      bus: false,\n      car: false,\n      walk: false,\n      keySearch: '',\n      keyword: '',\n      staBus: '',\n      endBus: '',\n      staCar: '',\n      endCar: '',\n      staWalk: '',\n      endWalk: '',\n      startB: '',\n      startC: '',\n      startW: '',\n      endB: '',\n      endC: '',\n      endW: '',\n      pop: [{\n        add: '崂山',\n        href: 'https://baike.baidu.com/item/%E5%B4%82%E5%B1%B1/125288?fr=aladdin'\n      }, {\n        add: '栈桥',\n        href: 'https://baike.baidu.com/item/%E9%9D%92%E5%B2%9B%E6%A0%88%E6%A1%A5/1752440?fromtitle=%E6%A0%88%E6%A1%A5&fromid=13828723'\n      }, {\n        add: '八大关',\n        href: 'https://baike.baidu.com/item/%E5%85%AB%E5%A4%A7%E5%85%B3/1170054'\n      }, {\n        add: '五四广场',\n        href: 'https://baike.baidu.com/item/%E4%BA%94%E5%9B%9B%E5%B9%BF%E5%9C%BA'\n      }, {\n        add: '第一海水浴场',\n        href: 'https://baike.baidu.com/item/%E9%9D%92%E5%B2%9B%E7%AC%AC%E4%B8%80%E6%B5%B7%E6%B0%B4%E6%B5%B4%E5%9C%BA?fromtitle=%E7%AC%AC%E4%B8%80%E6%B5%B7%E6%B0%B4%E6%B5%B4%E5%9C%BA&fromid=2060809'\n      }, {\n        add: '奥帆中心',\n        href: 'https://baike.baidu.com/item/%E9%9D%92%E5%B2%9B%E5%9B%BD%E9%99%85%E5%B8%86%E8%88%B9%E4%B8%AD%E5%BF%83/3342320'\n      }, {\n        add: '鲁迅公园',\n        href: 'https://baike.baidu.com/item/%E9%B2%81%E8%BF%85%E5%85%AC%E5%9B%AD/30361'\n      }, {\n        add: '石老人',\n        href: 'https://baike.baidu.com/item/%E6%B3%B0%E5%B1%B1/5447?fr=aladdin'\n      }, {\n        add: '天幕城',\n        href: 'https://baike.baidu.com/item/%E5%A4%A9%E5%B9%95%E5%9F%8E'\n      }, {\n        add: '劈柴院',\n        href: 'https://baike.baidu.com/item/%E5%8A%88%E6%9F%B4%E9%99%A2'\n      }],\n      tool: [{\n        fun: '青岛电子地图',\n        href: ''\n      }, {\n        fun: '青岛火车时刻表',\n        href: ''\n      }, {\n        fun: '青岛汽车时刻表',\n        href: ''\n      }, {\n        fun: '青岛公交查询',\n        href: ''\n      }, {\n        fun: '青岛天气预报',\n        href: ''\n      }],\n      books: [{\n        book: '青岛酒店预定',\n        href: ''\n      }, {\n        book: '青岛旅游线路',\n        href: ''\n      }, {\n        book: '青岛旅行社',\n        href: ''\n      }, {\n        book: '青岛订票',\n        href: ''\n      }, {\n        book: '青岛定房',\n        href: ''\n      }, {\n        book: '青岛租车',\n        href: ''\n      }],\n      guides: [{\n        guide: '青岛旅游景点',\n        href: ''\n      }, {\n        guide: '青岛旅游攻略',\n        href: ''\n      }, {\n        guide: '青岛美食',\n        href: ''\n      }, {\n        guide: '青岛特产',\n        href: ''\n      }, {\n        guide: '青岛风景图片',\n        href: ''\n      }]\n    };\n  },\n\n  methods: {\n    searchAtt: function searchAtt() {\n      this.keyword = this.keySearch;\n    },\n    searchBus: function searchBus() {\n      this.startB = this.staBus;\n      this.endB = this.endBus;\n    },\n    searchCar: function searchCar() {\n      this.startC = this.staCar;\n      this.endC = this.endCar;\n    },\n    searchWalk: function searchWalk() {\n      this.startW = this.staWalk;\n      this.endW = this.endWalk;\n    },\n    fchs: function fchs(n) {\n      this.search = false;\n      this.bus = false;\n      this.car = false;\n      this.walk = false;\n      switch (n) {\n        case 0:\n          this.search = true;\n          break;\n        case 1:\n          this.bus = true;\n          break;\n        case 2:\n          this.car = true;\n          break;\n        case 3:\n          this.walk = true;\n          break;\n      }\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0FwcC52dWU/ZWE5OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBFQTt3QkFFQTs7Y0FFQTtXQUNBO1dBQ0E7WUFDQTtpQkFDQTtlQUNBO2NBQ0E7Y0FDQTtjQUNBO2NBQ0E7ZUFDQTtlQUNBO2NBQ0E7Y0FDQTtjQUNBO1lBQ0E7WUFDQTtZQUNBOzthQUdBO2NBRUE7QUFIQSxPQURBO2FBTUE7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FHQTtBQUpBOzthQU9BO2NBRUE7QUFIQSxPQURBO2FBTUE7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FFQTtBQUhBO2FBS0E7Y0FHQTtBQUpBOztjQU9BO2NBRUE7QUFIQSxPQURBO2NBTUE7Y0FFQTtBQUhBO2NBS0E7Y0FFQTtBQUhBO2NBS0E7Y0FFQTtBQUhBO2NBS0E7Y0FFQTtBQUhBO2NBS0E7Y0FHQTtBQUpBOztlQU9BO2NBRUE7QUFIQSxPQURBO2VBTUE7Y0FFQTtBQUhBO2VBS0E7Y0FFQTtBQUhBO2VBS0E7Y0FFQTtBQUhBO2VBS0E7Y0FJQTtBQUxBO0FBOUhBO0FBb0lBOzs7b0NBRUE7MEJBQ0E7QUFDQTtvQ0FDQTt5QkFDQTt1QkFDQTtBQUNBO29DQUNBO3lCQUNBO3VCQUNBO0FBQ0E7c0NBQ0E7eUJBQ0E7dUJBQ0E7QUFDQTsyQkFDQTtvQkFDQTtpQkFDQTtpQkFDQTtrQkFDQTtjQUNBO2FBQ0E7d0JBQ0E7QUFDQTthQUNBO3FCQUNBO0FBQ0E7YUFDQTtxQkFDQTtBQUNBO2FBQ0E7c0JBQ0E7QUFFQTs7QUFFQTtBQXBDQTtBQXZJQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwiYXBwXCI+XG4gICAgPGgxIGNsYXNzPVwiaGVhZGluZ1wiPumdkuWym+aXhea4uOWcsOWbvjwvaDE+XG4gICAgPGRpdiBjbGFzcz1cImFzaWRlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29tXCI+XG4gICAgICAgIDxwIGNsYXNzPVwidGl0bGVcIj7pnZLlspvng63pl6jmma/ngrk8L3A+XG4gICAgICAgIDxhIHYtZm9yPVwibiBpbiBwb3BcIiA6aHJlZj1cIm4uaHJlZlwiPnt7bi5hZGR9fTwvYT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbVwiPlxuICAgICAgICA8cCBjbGFzcz1cInRpdGxlXCI+6Z2S5bKb5peF5ri45bel5YW3PC9wPlxuICAgICAgICA8YSB2LWZvcj1cIm4gaW4gdG9vbFwiIDpocmVmPVwibi5ocmVmXCI+e3tuLmZ1bn19PC9hPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29tXCI+XG4gICAgICAgIDxwIGNsYXNzPVwidGl0bGVcIj7pnZLlspvml4XmuLjpooTorqI8L3A+XG4gICAgICAgIDxhIHYtZm9yPVwibiBpbiBib29rc1wiIDpocmVmPVwibi5ocmVmXCI+e3tuLmJvb2t9fTwvYT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbVwiPlxuICAgICAgICA8cCBjbGFzcz1cInRpdGxlXCI+6Z2S5bKb5peF5ri45oyH5Y2XPC9wPlxuICAgICAgICA8YSB2LWZvcj1cIm4gaW4gZ3VpZGVzXCIgOmhyZWY9XCJuLmhyZWZcIj57e24uZ3VpZGV9fTwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzb2Zvcm1cIj5cbiAgICAgICAgPGRpdiBpZD1cInN0b3BcIj5cbiAgICAgICAgICA8YSB2LW9uOmNsaWNrPVwiZmNocygwKVwiIDpjbGFzcz1cInsgc3Q6IHNlYXJjaCB9XCI+5pCc57SiPC9hPlxuICAgICAgICAgIDxhIHYtb246Y2xpY2s9XCJmY2hzKDEpXCIgOmNsYXNzPVwieyBzdDogYnVzIH1cIj7lhazkuqQ8L2E+XG4gICAgICAgICAgPGEgdi1vbjpjbGljaz1cImZjaHMoMilcIiA6Y2xhc3M9XCJ7IHN0OiBjYXIgfVwiPumpvumptjwvYT5cbiAgICAgICAgICA8YSB2LW9uOmNsaWNrPVwiZmNocygzKVwiIDpjbGFzcz1cInsgc3Q6IHdhbGsgfVwiPuatpeihjDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJzZm9vdFwiPlxuICAgICAgICAgIDxkaXYgdi1pZj1cInNlYXJjaFwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cImtleVNlYXJjaFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiB2LW9uOmNsaWNrPVwic2VhcmNoQXR0KClcIj7mn6Xmib48L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IHYtaWY9XCJidXNcIj5cbiAgICAgICAgICAgIDxzcGFuPuS7jjwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJzdGFCdXNcIj5cbiAgICAgICAgICAgIDxzcGFuPuWIsDwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJlbmRCdXNcIj5cbiAgICAgICAgICAgIDxidXR0b24gdi1vbjpjbGljaz1cInNlYXJjaEJ1cygpXCI+5p+l5om+PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiB2LWlmPVwiY2FyXCI+XG4gICAgICAgICAgICA8c3Bhbj7ku448L3NwYW4+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwic3RhQ2FyXCI+XG4gICAgICAgICAgICA8c3Bhbj7liLA8L3NwYW4+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiZW5kQ2FyXCI+XG4gICAgICAgICAgICA8YnV0dG9uIHYtb246Y2xpY2s9XCJzZWFyY2hDYXIoKVwiPuafpeaJvjwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgdi1pZj1cIndhbGtcIj5cbiAgICAgICAgICAgIDxzcGFuPuS7jjwvc3Bhbj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJzdGFXYWxrXCI+XG4gICAgICAgICAgICA8c3Bhbj7liLA8L3NwYW4+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiZW5kV2Fsa1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiB2LW9uOmNsaWNrPVwic2VhcmNoV2FsaygpXCI+5p+l5om+PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29tXCI+XG4gICAgICAgIDxwIGNsYXNzPVwidGl0bGVcIj7pnZLlspvml4XmuLjlnLDlm748L3A+XG4gICAgICAgIDxiYWlkdS1tYXAgY2VudGVyPVwi6Z2S5bKbXCIgbWFwVHlwZT1cIkJNQVBfSFlCUklEX01BUFwiPlxuICAgICAgICAgIDxibS12aWV3IGNsYXNzPVwibWFwXCI+PC9ibS12aWV3PlxuICAgICAgICAgIDxibS1zY2FsZSBhbmNob3I9XCJCTUFQX0FOQ0hPUl9CT1RUT01fUklHSFRcIj48L2JtLXNjYWxlPlxuICAgICAgICAgIDxibS1uYXZpZ2F0aW9uIGFuY2hvcj1cIkJNQVBfQU5DSE9SX1RPUF9MRUZUXCI+PC9ibS1uYXZpZ2F0aW9uPlxuICAgICAgICAgIDxibS1wYW5vcmFtYT48L2JtLXBhbm9yYW1hPlxuICAgICAgICAgIDxibS1sb2NhbC1zZWFyY2ggdi1pZj1cInNlYXJjaFwiIDprZXl3b3JkPVwia2V5d29yZFwiIDphdXRvLXZpZXdwb3J0PVwidHJ1ZVwiPjwvYm0tbG9jYWwtc2VhcmNoPlxuICAgICAgICAgIDxibS10cmFuc2l0IHYtaWY9XCJidXNcIiA6c3RhcnQ9XCJzdGFydEJcIiA6ZW5kPVwiZW5kQlwiIDphdXRvLXZpZXdwb3J0PVwidHJ1ZVwiIDpzZWxlY3RGaXJzdFJlc3VsdD1cInRydWVcIj48L2JtLXRyYW5zaXQ+XG4gICAgICAgICAgPGJtLWRyaXZpbmcgdi1pZj1cImNhclwiIDpzdGFydD1cInN0YXJ0Q1wiIDplbmQ9XCJlbmRDXCIgc3RhcnRDaXR5PVwi6Z2S5bKbXCIgZW5kQ2l0eT1cIumdkuWym1wiIDphdXRvLXZpZXdwb3J0PVwidHJ1ZVwiIDpzZWxlY3RGaXJzdFJlc3VsdD1cInRydWVcIj48L2JtLWRyaXZpbmc+PC9ibS1kcml2aW5nPlxuICAgICAgICAgIDxibS13YWxraW5nIHYtaWY9XCJ3YWxrXCIgOnN0YXJ0PVwic3RhcnRXXCIgOmVuZD1cImVuZFdcIiA6YXV0by12aWV3cG9ydD1cInRydWVcIiA6c2VsZWN0Rmlyc3RSZXN1bHQ9XCJ0cnVlXCI+PC9ibS13YWxraW5nPlxuICAgICAgICA8L2JhaWR1LW1hcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2VhcmNoOiB0cnVlLFxuICAgICAgYnVzOiBmYWxzZSxcbiAgICAgIGNhcjogZmFsc2UsXG4gICAgICB3YWxrOiBmYWxzZSxcbiAgICAgIGtleVNlYXJjaDogJycsXG4gICAgICBrZXl3b3JkOiAnJyxcbiAgICAgIHN0YUJ1czogJycsXG4gICAgICBlbmRCdXM6ICcnLFxuICAgICAgc3RhQ2FyOiAnJyxcbiAgICAgIGVuZENhcjogJycsXG4gICAgICBzdGFXYWxrOiAnJyxcbiAgICAgIGVuZFdhbGs6ICcnLFxuICAgICAgc3RhcnRCOiAnJyxcbiAgICAgIHN0YXJ0QzogJycsXG4gICAgICBzdGFydFc6ICcnLFxuICAgICAgZW5kQjogJycsXG4gICAgICBlbmRDOiAnJyxcbiAgICAgIGVuZFc6ICcnLFxuICAgICAgcG9wOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBhZGQ6ICfltILlsbEnLFxuICAgICAgICAgIGhyZWY6ICdodHRwczovL2JhaWtlLmJhaWR1LmNvbS9pdGVtLyVFNSVCNCU4MiVFNSVCMSVCMS8xMjUyODg/ZnI9YWxhZGRpbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGFkZDogJ+agiOahpScsXG4gICAgICAgICAgaHJlZjogJ2h0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vJUU5JTlEJTkyJUU1JUIyJTlCJUU2JUEwJTg4JUU2JUExJUE1LzE3NTI0NDA/ZnJvbXRpdGxlPSVFNiVBMCU4OCVFNiVBMSVBNSZmcm9taWQ9MTM4Mjg3MjMnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBhZGQ6ICflhavlpKflhbMnLFxuICAgICAgICAgIGhyZWY6ICdodHRwczovL2JhaWtlLmJhaWR1LmNvbS9pdGVtLyVFNSU4NSVBQiVFNSVBNCVBNyVFNSU4NSVCMy8xMTcwMDU0J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYWRkOiAn5LqU5Zub5bm/5Zy6JyxcbiAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkElOTQlRTUlOUIlOUIlRTUlQjklQkYlRTUlOUMlQkEnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBhZGQ6ICfnrKzkuIDmtbfmsLTmtbTlnLonLFxuICAgICAgICAgIGhyZWY6ICdodHRwczovL2JhaWtlLmJhaWR1LmNvbS9pdGVtLyVFOSU5RCU5MiVFNSVCMiU5QiVFNyVBQyVBQyVFNCVCOCU4MCVFNiVCNSVCNyVFNiVCMCVCNCVFNiVCNSVCNCVFNSU5QyVCQT9mcm9tdGl0bGU9JUU3JUFDJUFDJUU0JUI4JTgwJUU2JUI1JUI3JUU2JUIwJUI0JUU2JUI1JUI0JUU1JTlDJUJBJmZyb21pZD0yMDYwODA5J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYWRkOiAn5aWl5biG5Lit5b+DJyxcbiAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUQlOTIlRTUlQjIlOUIlRTUlOUIlQkQlRTklOTklODUlRTUlQjglODYlRTglODglQjklRTQlQjglQUQlRTUlQkYlODMvMzM0MjMyMCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGFkZDogJ+mygei/heWFrOWbrScsXG4gICAgICAgICAgaHJlZjogJ2h0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vJUU5JUIyJTgxJUU4JUJGJTg1JUU1JTg1JUFDJUU1JTlCJUFELzMwMzYxJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYWRkOiAn55+z6ICB5Lq6JyxcbiAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQjMlQjAlRTUlQjElQjEvNTQ0Nz9mcj1hbGFkZGluJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYWRkOiAn5aSp5bmV5Z+OJyxcbiAgICAgICAgICBocmVmOiAnaHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQTQlQTklRTUlQjklOTUlRTUlOUYlOEUnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBhZGQ6ICfliojmn7TpmaInLFxuICAgICAgICAgIGhyZWY6ICdodHRwczovL2JhaWtlLmJhaWR1LmNvbS9pdGVtLyVFNSU4QSU4OCVFNiU5RiVCNCVFOSU5OSVBMidcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIHRvb2w6IFtcbiAgICAgICAge1xuICAgICAgICAgIGZ1bjogJ+mdkuWym+eUteWtkOWcsOWbvicsXG4gICAgICAgICAgaHJlZjogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZ1bjogJ+mdkuWym+eBq+i9puaXtuWIu+ihqCcsXG4gICAgICAgICAgaHJlZjogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZ1bjogJ+mdkuWym+axvei9puaXtuWIu+ihqCcsXG4gICAgICAgICAgaHJlZjogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZ1bjogJ+mdkuWym+WFrOS6pOafpeivoicsXG4gICAgICAgICAgaHJlZjogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGZ1bjogJ+mdkuWym+WkqeawlOmihOaKpScsXG4gICAgICAgICAgaHJlZjogJydcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGJvb2tzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBib29rOiAn6Z2S5bKb6YWS5bqX6aKE5a6aJyxcbiAgICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGJvb2s6ICfpnZLlspvml4XmuLjnur/ot68nLFxuICAgICAgICAgIGhyZWY6ICcnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYm9vazogJ+mdkuWym+aXheihjOekvicsXG4gICAgICAgICAgaHJlZjogJycsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBib29rOiAn6Z2S5bKb6K6i56WoJyxcbiAgICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGJvb2s6ICfpnZLlspvlrprmiL8nLFxuICAgICAgICAgIGhyZWY6ICcnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYm9vazogJ+mdkuWym+enn+i9picsXG4gICAgICAgICAgaHJlZjogJycsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgZ3VpZGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBndWlkZTogJ+mdkuWym+aXhea4uOaZr+eCuScsXG4gICAgICAgICAgaHJlZjogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGd1aWRlOiAn6Z2S5bKb5peF5ri45pS755WlJyxcbiAgICAgICAgICBocmVmOiAnJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZ3VpZGU6ICfpnZLlspvnvo7po58nLFxuICAgICAgICAgIGhyZWY6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBndWlkZTogJ+mdkuWym+eJueS6pycsXG4gICAgICAgICAgaHJlZjogJydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGd1aWRlOiAn6Z2S5bKb6aOO5pmv5Zu+54mHJyxcbiAgICAgICAgICBocmVmOiAnJ1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHNlYXJjaEF0dDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmtleXdvcmQgPSB0aGlzLmtleVNlYXJjaDtcbiAgICB9LFxuICAgIHNlYXJjaEJ1czogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0YXJ0QiA9IHRoaXMuc3RhQnVzO1xuICAgICAgdGhpcy5lbmRCID0gdGhpcy5lbmRCdXM7XG4gICAgfSxcbiAgICBzZWFyY2hDYXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zdGFydEMgPSB0aGlzLnN0YUNhcjtcbiAgICAgIHRoaXMuZW5kQyA9IHRoaXMuZW5kQ2FyO1xuICAgIH0sXG4gICAgc2VhcmNoV2FsazogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnN0YXJ0VyA9IHRoaXMuc3RhV2FsaztcbiAgICAgIHRoaXMuZW5kVyA9IHRoaXMuZW5kV2FsaztcbiAgICB9LFxuICAgIGZjaHM6IGZ1bmN0aW9uKG4pe1xuICAgICAgdGhpcy5zZWFyY2ggPSBmYWxzZTtcbiAgICAgIHRoaXMuYnVzID0gZmFsc2U7XG4gICAgICB0aGlzLmNhciA9IGZhbHNlO1xuICAgICAgdGhpcy53YWxrID0gZmFsc2U7XG4gICAgICBzd2l0Y2ggKG4pe1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdGhpcy5zZWFyY2ggPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhpcy5idXMgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgdGhpcy5jYXIgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgdGhpcy53YWxrID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4jYXBwIHtcbiAgd2lkdGg6IDEwMDBweDtcbiAgbWFyZ2luOiBhdXRvO1xufVxuLmhlYWRpbmcge1xuICBwYWRkaW5nOiAxMHB4O1xuICBib3JkZXItbGVmdDogNXB4IHNvbGlkICMwMGJkNGU7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkZGRkO1xufVxuLmNvbnRhaW5lciB7XG4gIHdpZHRoOiA3MzBweDtcbn1cbi5zb2Zvcm0ge1xuICBwYWRkaW5nOiAyMHB4O1xuICBtYXJnaW4tYm90dG9tOiAyM3B4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0O1xufVxuI3N0b3AgYSB7XG4gIHBhZGRpbmctcmlnaHQ6IDMwcHg7XG4gIGNvbG9yOiAjNTU1O1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG4jc3RvcCBhLnN0IHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIGNvbG9yOiAjZjkxO1xufVxuI3Nmb290IGlucHV0IHtcbiAgaGVpZ2h0OiAzMnB4O1xuICBwYWRkaW5nOiAwIDEwcHg7XG4gIG1hcmdpbi1yaWdodDogOHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xuICBvdXRsaW5lOiBub25lO1xufVxuI3Nmb290IGJ1dHRvbiB7XG4gIGhlaWdodDogMzRweDtcbiAgd2lkdGg6IDE0NHB4O1xuICBjb2xvcjogI2ZmZjtcbiAgbGluZS1oZWlnaHQ6IDMycHg7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNmOTE7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6ICNmOTE7XG59XG4jc2Zvb3Qgc3BhbiB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbn1cbi5jb20ge1xuICBvdmVyZmxvdzogYXV0bztcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RkZDtcbn1cbi50aXRsZSB7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIG1hcmdpbjogMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0O1xufVxuLmNvbSBhe1xuICB3aWR0aDogMTAwcHg7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luOiA3cHggOHB4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGNvbG9yOiAjNTU1O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cbi5tYXAge1xuICB3aWR0aDogNjg4cHg7XG4gIGhlaWdodDogNTAwcHg7XG4gIHBhZGRpbmc6IDIwcHg7XG59XG4uYXNpZGUge1xuICB3aWR0aDogMjUwcHg7XG4gIGZsb2F0OiByaWdodDtcbn1cblxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvQXBwLnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_vue__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_baidu_map__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vue_baidu_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_vue_baidu_map__);\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue__["a" /* default */].use(__WEBPACK_IMPORTED_MODULE_2_vue_baidu_map___default.a, {\n  ak: \'ImbZUPbuo0Ir2XqvjpwKT1lGup8r1GZz\'\n});\n\nnew __WEBPACK_IMPORTED_MODULE_0_vue__["a" /* default */]({\n  el: \'#app\',\n  render: function render(h) {\n    return h(__WEBPACK_IMPORTED_MODULE_1__App_vue__["a" /* default */]);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz8zNDc5Il0sIm5hbWVzIjpbIlZ1ZSIsInVzZSIsImFrIiwiZWwiLCJyZW5kZXIiLCJoIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxvREFBQUEsQ0FBSUMsR0FBSixDQUFRLHFEQUFSLEVBQWtCO0FBQ2hCQyxNQUFJO0FBRFksQ0FBbEI7O0FBSUEsSUFBSSxvREFBSixDQUFRO0FBQ05DLE1BQUksTUFERTtBQUVOQyxVQUFRO0FBQUEsV0FBS0MsRUFBRSx5REFBRixDQUFMO0FBQUE7QUFGRixDQUFSIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xuaW1wb3J0IEJhaWR1TWFwIGZyb20gJ3Z1ZS1iYWlkdS1tYXAnXG5cblZ1ZS51c2UoQmFpZHVNYXAsIHtcbiAgYWs6ICdJbWJaVVBidW8wSXIyWHF2anB3S1QxbEd1cDhyMUdaeidcbn0pXG5cbm5ldyBWdWUoe1xuICBlbDogJyNhcHAnLFxuICByZW5kZXI6IGggPT4gaChBcHApXG59KVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.5.16\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it... e.g.\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n * now more performant in most browsers, but removing it would be breaking for\n * code that was able to run in PhantomJS 1.x, so this must be kept for\n * backwards compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\n\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n})\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (false) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---\x3e ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  if (!getter && arguments.length === 2) {\n    val = obj[key];\n  }\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (false\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (false\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      \"production\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    \"production\" !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (false) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"production\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (false) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (false) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    false\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (false) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (false) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      \"production\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"production\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (false) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (false) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$1; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"production\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"production\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (false) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      \"production\" !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (false) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (false) {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (false) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (false) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (false) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    hooks[key] = componentVNodeHooks[key];\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"production\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (false\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (false) {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    // reset _rendered flag on slots for duplicate slot check\n    if (false) {\n      for (var key in vm.$slots) {\n        // $flow-disable-line\n        vm.$slots[key]._rendered = false;\n      }\n    }\n\n    if (_parentVnode) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue (options) {\n  if (false\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n}\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.5.16';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\n\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"production\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n}\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (false) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (false) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (false) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (false\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (false\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n}\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n]\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n}\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n}\n\n/*  */\n\n/*  */\n\n\n\n\n\n\n\n\n\n// add a raw attr (use this in preTransforms)\n\n\n\n\n\n\n\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\n\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\n\n/*  */\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n}\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n}\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {}\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n]\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"production\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n}\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n}\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n}\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n}\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n}\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        false\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (false\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0), __webpack_require__(4).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(5);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9kN2FkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(6)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzPzViNjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__ = __webpack_require__(1);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ba5bd90_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__ = __webpack_require__(14);\nvar disposed = false\nfunction injectStyle (ssrContext) {\n  if (disposed) return\n  __webpack_require__(8)\n}\nvar normalizeComponent = __webpack_require__(13)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ba5bd90_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = "src/App.vue"\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require("vue-hot-reload-api")\n  hotAPI.install(require("vue"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord("data-v-7ba5bd90", Component.options)\n  } else {\n    hotAPI.reload("data-v-7ba5bd90", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9hOGU5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSx1QkFBMkw7QUFDM0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3FLO0FBQ3JLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi03YmE1YmQ5MFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FwcC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FwcC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTdiYTViZDkwXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQXBwLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQXBwLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi03YmE1YmQ5MFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTdiYTViZDkwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval('// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(9);\nif(typeof content === \'string\') content = [[module.i, content, \'\']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(11)("2fbdf82a", content, false, {});\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept("!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\"vue\\":true,\\"id\\":\\"data-v-7ba5bd90\\",\\"scoped\\":false,\\"hasInlineConfig\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue", function() {\n     var newContent = require("!!../node_modules/css-loader/index.js?sourceMap!../node_modules/vue-loader/lib/style-compiler/index.js?{\\"vue\\":true,\\"id\\":\\"data-v-7ba5bd90\\",\\"scoped\\":false,\\"hasInlineConfig\\":false}!../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue");\n     if(typeof newContent === \'string\') newContent = [[module.id, newContent, \'\']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT83YTJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsbUNBQWtOO0FBQ2xOO0FBQ0E7QUFDQTtBQUNBLG1FQUErRztBQUMvRztBQUNBO0FBQ0E7QUFDQTtBQUNBLDhIQUE4SCxtRkFBbUY7QUFDak4sdUlBQXVJLG1GQUFtRjtBQUMxTjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtN2JhNWJkOTBcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjJmYmRmODJhXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi03YmE1YmQ5MFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi03YmE1YmQ5MFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi03YmE1YmQ5MFwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(10)(true);\n// imports\n\n\n// module\nexports.push([module.i, "\\n#app {\\n  width: 1000px;\\n  margin: auto;\\n}\\n.heading {\\n  padding: 10px;\\n  border-left: 5px solid #00bd4e;\\n  border-bottom: 1px solid #dddddd;\\n}\\n.container {\\n  width: 730px;\\n}\\n.soform {\\n  padding: 20px;\\n  margin-bottom: 23px;\\n  border: 1px solid #ddd;\\n  background-color: #f4f4f4;\\n}\\n#stop a {\\n  padding-right: 30px;\\n  color: #555;\\n  cursor: pointer;\\n}\\n#stop a.st {\\n  font-weight: bold;\\n  color: #f91;\\n}\\n#sfoot input {\\n  height: 32px;\\n  padding: 0 10px;\\n  margin-right: 8px;\\n  border: 1px solid #ddd;\\n  outline: none;\\n}\\n#sfoot button {\\n  height: 34px;\\n  width: 144px;\\n  color: #fff;\\n  line-height: 32px;\\n  margin-top: 10px;\\n  border: 1px solid #f91;\\n  border-radius: 3px;\\n  font-size: 14px;\\n  cursor: pointer;\\n  background: #f91;\\n}\\n#sfoot span {\\n  font-size: 14px;\\n}\\n.com {\\n  overflow: auto;\\n  margin-bottom: 20px;\\n  border: 1px solid #ddd;\\n}\\n.title {\\n  padding: 10px;\\n  margin: 0px;\\n  background-color: #f4f4f4;\\n}\\n.com a{\\n  width: 100px;\\n  display: inline-block;\\n  margin: 7px 8px;\\n  font-size: 14px;\\n  color: #555;\\n  cursor: pointer;\\n  text-decoration: none;\\n}\\n.map {\\n  width: 688px;\\n  height: 500px;\\n  padding: 20px;\\n}\\n.aside {\\n  width: 250px;\\n  float: right;\\n}\\n\\n", "", {"version":3,"sources":["/Users/fuckc/前端/Vue-PC-Map/src/src/App.vue"],"names":[],"mappings":";AA0PA;EACA,cAAA;EACA,aAAA;CACA;AACA;EACA,cAAA;EACA,+BAAA;EACA,iCAAA;CACA;AACA;EACA,aAAA;CACA;AACA;EACA,cAAA;EACA,oBAAA;EACA,uBAAA;EACA,0BAAA;CACA;AACA;EACA,oBAAA;EACA,YAAA;EACA,gBAAA;CACA;AACA;EACA,kBAAA;EACA,YAAA;CACA;AACA;EACA,aAAA;EACA,gBAAA;EACA,kBAAA;EACA,uBAAA;EACA,cAAA;CACA;AACA;EACA,aAAA;EACA,aAAA;EACA,YAAA;EACA,kBAAA;EACA,iBAAA;EACA,uBAAA;EACA,mBAAA;EACA,gBAAA;EACA,gBAAA;EACA,iBAAA;CACA;AACA;EACA,gBAAA;CACA;AACA;EACA,eAAA;EACA,oBAAA;EACA,uBAAA;CACA;AACA;EACA,cAAA;EACA,YAAA;EACA,0BAAA;CACA;AACA;EACA,aAAA;EACA,sBAAA;EACA,gBAAA;EACA,gBAAA;EACA,YAAA;EACA,gBAAA;EACA,sBAAA;CACA;AACA;EACA,aAAA;EACA,cAAA;EACA,cAAA;CACA;AACA;EACA,aAAA;EACA,aAAA;CACA","file":"App.vue","sourcesContent":["<template>\\n  <div id=\\"app\\">\\n    <h1 class=\\"heading\\">青岛旅游地图</h1>\\n    <div class=\\"aside\\">\\n      <div class=\\"com\\">\\n        <p class=\\"title\\">青岛热门景点</p>\\n        <a v-for=\\"n in pop\\" :href=\\"n.href\\">{{n.add}}</a>\\n      </div>\\n      <div class=\\"com\\">\\n        <p class=\\"title\\">青岛旅游工具</p>\\n        <a v-for=\\"n in tool\\" :href=\\"n.href\\">{{n.fun}}</a>\\n      </div>\\n      <div class=\\"com\\">\\n        <p class=\\"title\\">青岛旅游预订</p>\\n        <a v-for=\\"n in books\\" :href=\\"n.href\\">{{n.book}}</a>\\n      </div>\\n      <div class=\\"com\\">\\n        <p class=\\"title\\">青岛旅游指南</p>\\n        <a v-for=\\"n in guides\\" :href=\\"n.href\\">{{n.guide}}</a>\\n      </div>\\n    </div>\\n    <div class=\\"container\\">\\n      <div class=\\"soform\\">\\n        <div id=\\"stop\\">\\n          <a v-on:click=\\"fchs(0)\\" :class=\\"{ st: search }\\">搜索</a>\\n          <a v-on:click=\\"fchs(1)\\" :class=\\"{ st: bus }\\">公交</a>\\n          <a v-on:click=\\"fchs(2)\\" :class=\\"{ st: car }\\">驾驶</a>\\n          <a v-on:click=\\"fchs(3)\\" :class=\\"{ st: walk }\\">步行</a>\\n        </div>\\n        <div id=\\"sfoot\\">\\n          <div v-if=\\"search\\">\\n            <input type=\\"text\\" v-model=\\"keySearch\\">\\n            <button v-on:click=\\"searchAtt()\\">查找</button>\\n          </div>\\n          <div v-if=\\"bus\\">\\n            <span>从</span>\\n            <input type=\\"text\\" v-model=\\"staBus\\">\\n            <span>到</span>\\n            <input type=\\"text\\" v-model=\\"endBus\\">\\n            <button v-on:click=\\"searchBus()\\">查找</button>\\n          </div>\\n          <div v-if=\\"car\\">\\n            <span>从</span>\\n            <input type=\\"text\\" v-model=\\"staCar\\">\\n            <span>到</span>\\n            <input type=\\"text\\" v-model=\\"endCar\\">\\n            <button v-on:click=\\"searchCar()\\">查找</button>\\n          </div>\\n          <div v-if=\\"walk\\">\\n            <span>从</span>\\n            <input type=\\"text\\" v-model=\\"staWalk\\">\\n            <span>到</span>\\n            <input type=\\"text\\" v-model=\\"endWalk\\">\\n            <button v-on:click=\\"searchWalk()\\">查找</button>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\"com\\">\\n        <p class=\\"title\\">青岛旅游地图</p>\\n        <baidu-map center=\\"青岛\\" mapType=\\"BMAP_HYBRID_MAP\\">\\n          <bm-view class=\\"map\\"></bm-view>\\n          <bm-scale anchor=\\"BMAP_ANCHOR_BOTTOM_RIGHT\\"></bm-scale>\\n          <bm-navigation anchor=\\"BMAP_ANCHOR_TOP_LEFT\\"></bm-navigation>\\n          <bm-panorama></bm-panorama>\\n          <bm-local-search v-if=\\"search\\" :keyword=\\"keyword\\" :auto-viewport=\\"true\\"></bm-local-search>\\n          <bm-transit v-if=\\"bus\\" :start=\\"startB\\" :end=\\"endB\\" :auto-viewport=\\"true\\" :selectFirstResult=\\"true\\"></bm-transit>\\n          <bm-driving v-if=\\"car\\" :start=\\"startC\\" :end=\\"endC\\" startCity=\\"青岛\\" endCity=\\"青岛\\" :auto-viewport=\\"true\\" :selectFirstResult=\\"true\\"></bm-driving></bm-driving>\\n          <bm-walking v-if=\\"walk\\" :start=\\"startW\\" :end=\\"endW\\" :auto-viewport=\\"true\\" :selectFirstResult=\\"true\\"></bm-walking>\\n        </baidu-map>\\n      </div>\\n    </div>\\n  </div>\\n</template>\\n<script>\\nexport default {\\n  data () {\\n    return {\\n      search: true,\\n      bus: false,\\n      car: false,\\n      walk: false,\\n      keySearch: \'\',\\n      keyword: \'\',\\n      staBus: \'\',\\n      endBus: \'\',\\n      staCar: \'\',\\n      endCar: \'\',\\n      staWalk: \'\',\\n      endWalk: \'\',\\n      startB: \'\',\\n      startC: \'\',\\n      startW: \'\',\\n      endB: \'\',\\n      endC: \'\',\\n      endW: \'\',\\n      pop: [\\n        {\\n          add: \'崂山\',\\n          href: \'https://baike.baidu.com/item/%E5%B4%82%E5%B1%B1/125288?fr=aladdin\'\\n        },\\n        {\\n          add: \'栈桥\',\\n          href: \'https://baike.baidu.com/item/%E9%9D%92%E5%B2%9B%E6%A0%88%E6%A1%A5/1752440?fromtitle=%E6%A0%88%E6%A1%A5&fromid=13828723\'\\n        },\\n        {\\n          add: \'八大关\',\\n          href: \'https://baike.baidu.com/item/%E5%85%AB%E5%A4%A7%E5%85%B3/1170054\'\\n        },\\n        {\\n          add: \'五四广场\',\\n          href: \'https://baike.baidu.com/item/%E4%BA%94%E5%9B%9B%E5%B9%BF%E5%9C%BA\'\\n        },\\n        {\\n          add: \'第一海水浴场\',\\n          href: \'https://baike.baidu.com/item/%E9%9D%92%E5%B2%9B%E7%AC%AC%E4%B8%80%E6%B5%B7%E6%B0%B4%E6%B5%B4%E5%9C%BA?fromtitle=%E7%AC%AC%E4%B8%80%E6%B5%B7%E6%B0%B4%E6%B5%B4%E5%9C%BA&fromid=2060809\'\\n        },\\n        {\\n          add: \'奥帆中心\',\\n          href: \'https://baike.baidu.com/item/%E9%9D%92%E5%B2%9B%E5%9B%BD%E9%99%85%E5%B8%86%E8%88%B9%E4%B8%AD%E5%BF%83/3342320\'\\n        },\\n        {\\n          add: \'鲁迅公园\',\\n          href: \'https://baike.baidu.com/item/%E9%B2%81%E8%BF%85%E5%85%AC%E5%9B%AD/30361\'\\n        },\\n        {\\n          add: \'石老人\',\\n          href: \'https://baike.baidu.com/item/%E6%B3%B0%E5%B1%B1/5447?fr=aladdin\'\\n        },\\n        {\\n          add: \'天幕城\',\\n          href: \'https://baike.baidu.com/item/%E5%A4%A9%E5%B9%95%E5%9F%8E\'\\n        },\\n        {\\n          add: \'劈柴院\',\\n          href: \'https://baike.baidu.com/item/%E5%8A%88%E6%9F%B4%E9%99%A2\'\\n        }\\n      ],\\n      tool: [\\n        {\\n          fun: \'青岛电子地图\',\\n          href: \'\'\\n        },\\n        {\\n          fun: \'青岛火车时刻表\',\\n          href: \'\'\\n        },\\n        {\\n          fun: \'青岛汽车时刻表\',\\n          href: \'\'\\n        },\\n        {\\n          fun: \'青岛公交查询\',\\n          href: \'\'\\n        },\\n        {\\n          fun: \'青岛天气预报\',\\n          href: \'\'\\n        }\\n      ],\\n      books: [\\n        {\\n          book: \'青岛酒店预定\',\\n          href: \'\',\\n        },\\n        {\\n          book: \'青岛旅游线路\',\\n          href: \'\',\\n        },\\n        {\\n          book: \'青岛旅行社\',\\n          href: \'\',\\n        },\\n        {\\n          book: \'青岛订票\',\\n          href: \'\',\\n        },\\n        {\\n          book: \'青岛定房\',\\n          href: \'\',\\n        },\\n        {\\n          book: \'青岛租车\',\\n          href: \'\',\\n        },\\n      ],\\n      guides: [\\n        {\\n          guide: \'青岛旅游景点\',\\n          href: \'\'\\n        },\\n        {\\n          guide: \'青岛旅游攻略\',\\n          href: \'\'\\n        },\\n        {\\n          guide: \'青岛美食\',\\n          href: \'\'\\n        },\\n        {\\n          guide: \'青岛特产\',\\n          href: \'\'\\n        },\\n        {\\n          guide: \'青岛风景图片\',\\n          href: \'\'\\n        },\\n      ]\\n    }\\n  },\\n  methods: {\\n    searchAtt: function() {\\n      this.keyword = this.keySearch;\\n    },\\n    searchBus: function() {\\n      this.startB = this.staBus;\\n      this.endB = this.endBus;\\n    },\\n    searchCar: function() {\\n      this.startC = this.staCar;\\n      this.endC = this.endCar;\\n    },\\n    searchWalk: function() {\\n      this.startW = this.staWalk;\\n      this.endW = this.endWalk;\\n    },\\n    fchs: function(n){\\n      this.search = false;\\n      this.bus = false;\\n      this.car = false;\\n      this.walk = false;\\n      switch (n){\\n        case 0:\\n          this.search = true;\\n          break;\\n        case 1:\\n          this.bus = true;\\n          break;\\n        case 2:\\n          this.car = true;\\n          break;\\n        case 3:\\n          this.walk = true;\\n          break;\\n      }\\n    }\\n  }\\n}\\n<\/script>\\n\\n<style>\\n#app {\\n  width: 1000px;\\n  margin: auto;\\n}\\n.heading {\\n  padding: 10px;\\n  border-left: 5px solid #00bd4e;\\n  border-bottom: 1px solid #dddddd;\\n}\\n.container {\\n  width: 730px;\\n}\\n.soform {\\n  padding: 20px;\\n  margin-bottom: 23px;\\n  border: 1px solid #ddd;\\n  background-color: #f4f4f4;\\n}\\n#stop a {\\n  padding-right: 30px;\\n  color: #555;\\n  cursor: pointer;\\n}\\n#stop a.st {\\n  font-weight: bold;\\n  color: #f91;\\n}\\n#sfoot input {\\n  height: 32px;\\n  padding: 0 10px;\\n  margin-right: 8px;\\n  border: 1px solid #ddd;\\n  outline: none;\\n}\\n#sfoot button {\\n  height: 34px;\\n  width: 144px;\\n  color: #fff;\\n  line-height: 32px;\\n  margin-top: 10px;\\n  border: 1px solid #f91;\\n  border-radius: 3px;\\n  font-size: 14px;\\n  cursor: pointer;\\n  background: #f91;\\n}\\n#sfoot span {\\n  font-size: 14px;\\n}\\n.com {\\n  overflow: auto;\\n  margin-bottom: 20px;\\n  border: 1px solid #ddd;\\n}\\n.title {\\n  padding: 10px;\\n  margin: 0px;\\n  background-color: #f4f4f4;\\n}\\n.com a{\\n  width: 100px;\\n  display: inline-block;\\n  margin: 7px 8px;\\n  font-size: 14px;\\n  color: #555;\\n  cursor: pointer;\\n  text-decoration: none;\\n}\\n.map {\\n  width: 688px;\\n  height: 500px;\\n  padding: 20px;\\n}\\n.aside {\\n  width: 250px;\\n  float: right;\\n}\\n\\n</style>\\n"],"sourceRoot":""}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},function(module,exports){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn "@media " + item[2] + "{" + content + "}";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join("");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === "string")\n\t\t\tmodules = [[null, modules, ""]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === "number")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = "(" + item[2] + ") and (" + mediaQuery + ")";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || \'\';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === \'function\') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn \'/*# sourceURL=\' + cssMapping.sourceRoot + source + \' */\'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n\t}\n\n\treturn [content].join(\'\\n\');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = \'sourceMappingURL=data:application/json;charset=utf-8;base64,\' + base64;\n\n\treturn \'/*# \' + data + \' */\';\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MTU5ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxjQUFjOztBQUVsRTtBQUNBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){eval("/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\nvar listToStyles = __webpack_require__(12)\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nmodule.exports = function (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzP2FlMzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBLHVCQUF1QiwyQkFBMkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDJCQUEyQjtBQUNoRDtBQUNBO0FBQ0EsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFCQUFxQix1QkFBdUI7QUFDNUM7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4gIE1vZGlmaWVkIGJ5IEV2YW4gWW91IEB5eXg5OTA4MDNcbiovXG5cbnZhciBoYXNEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblxuaWYgKHR5cGVvZiBERUJVRyAhPT0gJ3VuZGVmaW5lZCcgJiYgREVCVUcpIHtcbiAgaWYgKCFoYXNEb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAndnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiAnICtcbiAgICBcIlVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCJcbiAgKSB9XG59XG5cbnZhciBsaXN0VG9TdHlsZXMgPSByZXF1aXJlKCcuL2xpc3RUb1N0eWxlcycpXG5cbi8qXG50eXBlIFN0eWxlT2JqZWN0ID0ge1xuICBpZDogbnVtYmVyO1xuICBwYXJ0czogQXJyYXk8U3R5bGVPYmplY3RQYXJ0PlxufVxuXG50eXBlIFN0eWxlT2JqZWN0UGFydCA9IHtcbiAgY3NzOiBzdHJpbmc7XG4gIG1lZGlhOiBzdHJpbmc7XG4gIHNvdXJjZU1hcDogP3N0cmluZ1xufVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0gey8qXG4gIFtpZDogbnVtYmVyXToge1xuICAgIGlkOiBudW1iZXIsXG4gICAgcmVmczogbnVtYmVyLFxuICAgIHBhcnRzOiBBcnJheTwob2JqPzogU3R5bGVPYmplY3RQYXJ0KSA9PiB2b2lkPlxuICB9XG4qL31cblxudmFyIGhlYWQgPSBoYXNEb2N1bWVudCAmJiAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdKVxudmFyIHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsXG52YXIgc2luZ2xldG9uQ291bnRlciA9IDBcbnZhciBpc1Byb2R1Y3Rpb24gPSBmYWxzZVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxudmFyIG9wdGlvbnMgPSBudWxsXG52YXIgc3NySWRLZXkgPSAnZGF0YS12dWUtc3NyLWlkJ1xuXG4vLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbi8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcbnZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXJlbnRJZCwgbGlzdCwgX2lzUHJvZHVjdGlvbiwgX29wdGlvbnMpIHtcbiAgaXNQcm9kdWN0aW9uID0gX2lzUHJvZHVjdGlvblxuXG4gIG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIGxpc3QpXG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgICAgZG9tU3R5bGUucmVmcy0tXG4gICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSlcbiAgICB9XG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbmV3TGlzdClcbiAgICAgIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzID0gW11cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXVxuICAgICAgaWYgKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKClcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMgLyogQXJyYXk8U3R5bGVPYmplY3Q+ICovKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pXG4gICAgICB9XG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIGlmIChkb21TdHlsZS5wYXJ0cy5sZW5ndGggPiBpdGVtLnBhcnRzLmxlbmd0aCkge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5sZW5ndGggPSBpdGVtLnBhcnRzLmxlbmd0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHsgaWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0cyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAoKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudClcbiAgcmV0dXJuIHN0eWxlRWxlbWVudFxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICB2YXIgdXBkYXRlLCByZW1vdmVcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlWycgKyBzc3JJZEtleSArICd+PVwiJyArIG9iai5pZCArICdcIl0nKVxuXG4gIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBhbmQgaW4gcHJvZHVjdGlvbiBtb2RlLlxuICAgICAgLy8gc2ltcGx5IGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBidXQgaW4gZGV2IG1vZGUuXG4gICAgICAvLyBmb3Igc29tZSByZWFzb24gQ2hyb21lIGNhbid0IGhhbmRsZSBzb3VyY2UgbWFwIGluIHNlcnZlci1yZW5kZXJlZFxuICAgICAgLy8gc3R5bGUgdGFncyAtIHNvdXJjZSBtYXBzIGluIDxzdHlsZT4gb25seSB3b3JrcyBpZiB0aGUgc3R5bGUgdGFnIGlzXG4gICAgICAvLyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBkeW5hbWljYWxseS4gU28gd2UgcmVtb3ZlIHRoZSBzZXJ2ZXIgcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlcyBhbmQgaW5qZWN0IG5ldyBvbmVzLlxuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc09sZElFKSB7XG4gICAgLy8gdXNlIHNpbmdsZXRvbiBtb2RlIGZvciBJRTkuXG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKytcbiAgICBzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpXG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpXG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2UgbXVsdGktc3R5bGUtdGFnIG1vZGUgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgc3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KClcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KVxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob2JqKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG4gICAgICAgICAgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcbiAgICAgICAgICBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iailcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKClcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnRcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKVxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3NcblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcylcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcylcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGVFbGVtZW50LCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3NcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwXG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSlcbiAgfVxuICBpZiAob3B0aW9ucy5zc3JJZCkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoc3NySWRLZXksIG9iai5pZClcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXApIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlVVJMPScgKyBzb3VyY2VNYXAuc291cmNlc1swXSArICcgKi8nXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyAnICovJ1xuICB9XG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKVxuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSlcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n")},function(module,exports){eval("/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nmodule.exports = function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzP2I1MzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx3QkFBd0I7QUFDM0QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9saXN0VG9TdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n")},function(module,exports){eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanM/NTU0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgcmF3U2NyaXB0RXhwb3J0cyxcbiAgY29tcGlsZWRUZW1wbGF0ZSxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIgLyogc2VydmVyIG9ubHkgKi9cbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIHZhciBmdW5jdGlvbmFsID0gb3B0aW9ucy5mdW5jdGlvbmFsXG4gICAgdmFyIGV4aXN0aW5nID0gZnVuY3Rpb25hbFxuICAgICAgPyBvcHRpb25zLnJlbmRlclxuICAgICAgOiBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuXG4gICAgaWYgKCFmdW5jdGlvbmFsKSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("div", { attrs: { id: "app" } }, [\n    _c("h1", { staticClass: "heading" }, [_vm._v("青岛旅游地图")]),\n    _vm._v(" "),\n    _c("div", { staticClass: "aside" }, [\n      _c(\n        "div",\n        { staticClass: "com" },\n        [\n          _c("p", { staticClass: "title" }, [_vm._v("青岛热门景点")]),\n          _vm._v(" "),\n          _vm._l(_vm.pop, function(n) {\n            return _c("a", { attrs: { href: n.href } }, [_vm._v(_vm._s(n.add))])\n          })\n        ],\n        2\n      ),\n      _vm._v(" "),\n      _c(\n        "div",\n        { staticClass: "com" },\n        [\n          _c("p", { staticClass: "title" }, [_vm._v("青岛旅游工具")]),\n          _vm._v(" "),\n          _vm._l(_vm.tool, function(n) {\n            return _c("a", { attrs: { href: n.href } }, [_vm._v(_vm._s(n.fun))])\n          })\n        ],\n        2\n      ),\n      _vm._v(" "),\n      _c(\n        "div",\n        { staticClass: "com" },\n        [\n          _c("p", { staticClass: "title" }, [_vm._v("青岛旅游预订")]),\n          _vm._v(" "),\n          _vm._l(_vm.books, function(n) {\n            return _c("a", { attrs: { href: n.href } }, [\n              _vm._v(_vm._s(n.book))\n            ])\n          })\n        ],\n        2\n      ),\n      _vm._v(" "),\n      _c(\n        "div",\n        { staticClass: "com" },\n        [\n          _c("p", { staticClass: "title" }, [_vm._v("青岛旅游指南")]),\n          _vm._v(" "),\n          _vm._l(_vm.guides, function(n) {\n            return _c("a", { attrs: { href: n.href } }, [\n              _vm._v(_vm._s(n.guide))\n            ])\n          })\n        ],\n        2\n      )\n    ]),\n    _vm._v(" "),\n    _c("div", { staticClass: "container" }, [\n      _c("div", { staticClass: "soform" }, [\n        _c("div", { attrs: { id: "stop" } }, [\n          _c(\n            "a",\n            {\n              class: { st: _vm.search },\n              on: {\n                click: function($event) {\n                  _vm.fchs(0)\n                }\n              }\n            },\n            [_vm._v("搜索")]\n          ),\n          _vm._v(" "),\n          _c(\n            "a",\n            {\n              class: { st: _vm.bus },\n              on: {\n                click: function($event) {\n                  _vm.fchs(1)\n                }\n              }\n            },\n            [_vm._v("公交")]\n          ),\n          _vm._v(" "),\n          _c(\n            "a",\n            {\n              class: { st: _vm.car },\n              on: {\n                click: function($event) {\n                  _vm.fchs(2)\n                }\n              }\n            },\n            [_vm._v("驾驶")]\n          ),\n          _vm._v(" "),\n          _c(\n            "a",\n            {\n              class: { st: _vm.walk },\n              on: {\n                click: function($event) {\n                  _vm.fchs(3)\n                }\n              }\n            },\n            [_vm._v("步行")]\n          )\n        ]),\n        _vm._v(" "),\n        _c("div", { attrs: { id: "sfoot" } }, [\n          _vm.search\n            ? _c("div", [\n                _c("input", {\n                  directives: [\n                    {\n                      name: "model",\n                      rawName: "v-model",\n                      value: _vm.keySearch,\n                      expression: "keySearch"\n                    }\n                  ],\n                  attrs: { type: "text" },\n                  domProps: { value: _vm.keySearch },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.keySearch = $event.target.value\n                    }\n                  }\n                }),\n                _vm._v(" "),\n                _c(\n                  "button",\n                  {\n                    on: {\n                      click: function($event) {\n                        _vm.searchAtt()\n                      }\n                    }\n                  },\n                  [_vm._v("查找")]\n                )\n              ])\n            : _vm._e(),\n          _vm._v(" "),\n          _vm.bus\n            ? _c("div", [\n                _c("span", [_vm._v("从")]),\n                _vm._v(" "),\n                _c("input", {\n                  directives: [\n                    {\n                      name: "model",\n                      rawName: "v-model",\n                      value: _vm.staBus,\n                      expression: "staBus"\n                    }\n                  ],\n                  attrs: { type: "text" },\n                  domProps: { value: _vm.staBus },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.staBus = $event.target.value\n                    }\n                  }\n                }),\n                _vm._v(" "),\n                _c("span", [_vm._v("到")]),\n                _vm._v(" "),\n                _c("input", {\n                  directives: [\n                    {\n                      name: "model",\n                      rawName: "v-model",\n                      value: _vm.endBus,\n                      expression: "endBus"\n                    }\n                  ],\n                  attrs: { type: "text" },\n                  domProps: { value: _vm.endBus },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.endBus = $event.target.value\n                    }\n                  }\n                }),\n                _vm._v(" "),\n                _c(\n                  "button",\n                  {\n                    on: {\n                      click: function($event) {\n                        _vm.searchBus()\n                      }\n                    }\n                  },\n                  [_vm._v("查找")]\n                )\n              ])\n            : _vm._e(),\n          _vm._v(" "),\n          _vm.car\n            ? _c("div", [\n                _c("span", [_vm._v("从")]),\n                _vm._v(" "),\n                _c("input", {\n                  directives: [\n                    {\n                      name: "model",\n                      rawName: "v-model",\n                      value: _vm.staCar,\n                      expression: "staCar"\n                    }\n                  ],\n                  attrs: { type: "text" },\n                  domProps: { value: _vm.staCar },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.staCar = $event.target.value\n                    }\n                  }\n                }),\n                _vm._v(" "),\n                _c("span", [_vm._v("到")]),\n                _vm._v(" "),\n                _c("input", {\n                  directives: [\n                    {\n                      name: "model",\n                      rawName: "v-model",\n                      value: _vm.endCar,\n                      expression: "endCar"\n                    }\n                  ],\n                  attrs: { type: "text" },\n                  domProps: { value: _vm.endCar },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.endCar = $event.target.value\n                    }\n                  }\n                }),\n                _vm._v(" "),\n                _c(\n                  "button",\n                  {\n                    on: {\n                      click: function($event) {\n                        _vm.searchCar()\n                      }\n                    }\n                  },\n                  [_vm._v("查找")]\n                )\n              ])\n            : _vm._e(),\n          _vm._v(" "),\n          _vm.walk\n            ? _c("div", [\n                _c("span", [_vm._v("从")]),\n                _vm._v(" "),\n                _c("input", {\n                  directives: [\n                    {\n                      name: "model",\n                      rawName: "v-model",\n                      value: _vm.staWalk,\n                      expression: "staWalk"\n                    }\n                  ],\n                  attrs: { type: "text" },\n                  domProps: { value: _vm.staWalk },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.staWalk = $event.target.value\n                    }\n                  }\n                }),\n                _vm._v(" "),\n                _c("span", [_vm._v("到")]),\n                _vm._v(" "),\n                _c("input", {\n                  directives: [\n                    {\n                      name: "model",\n                      rawName: "v-model",\n                      value: _vm.endWalk,\n                      expression: "endWalk"\n                    }\n                  ],\n                  attrs: { type: "text" },\n                  domProps: { value: _vm.endWalk },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.endWalk = $event.target.value\n                    }\n                  }\n                }),\n                _vm._v(" "),\n                _c(\n                  "button",\n                  {\n                    on: {\n                      click: function($event) {\n                        _vm.searchWalk()\n                      }\n                    }\n                  },\n                  [_vm._v("查找")]\n                )\n              ])\n            : _vm._e()\n        ])\n      ]),\n      _vm._v(" "),\n      _c(\n        "div",\n        { staticClass: "com" },\n        [\n          _c("p", { staticClass: "title" }, [_vm._v("青岛旅游地图")]),\n          _vm._v(" "),\n          _c(\n            "baidu-map",\n            { attrs: { center: "青岛", mapType: "BMAP_HYBRID_MAP" } },\n            [\n              _c("bm-view", { staticClass: "map" }),\n              _vm._v(" "),\n              _c("bm-scale", { attrs: { anchor: "BMAP_ANCHOR_BOTTOM_RIGHT" } }),\n              _vm._v(" "),\n              _c("bm-navigation", {\n                attrs: { anchor: "BMAP_ANCHOR_TOP_LEFT" }\n              }),\n              _vm._v(" "),\n              _c("bm-panorama"),\n              _vm._v(" "),\n              _vm.search\n                ? _c("bm-local-search", {\n                    attrs: { keyword: _vm.keyword, "auto-viewport": true }\n                  })\n                : _vm._e(),\n              _vm._v(" "),\n              _vm.bus\n                ? _c("bm-transit", {\n                    attrs: {\n                      start: _vm.startB,\n                      end: _vm.endB,\n                      "auto-viewport": true,\n                      selectFirstResult: true\n                    }\n                  })\n                : _vm._e(),\n              _vm._v(" "),\n              _vm.car\n                ? _c("bm-driving", {\n                    attrs: {\n                      start: _vm.startC,\n                      end: _vm.endC,\n                      startCity: "青岛",\n                      endCity: "青岛",\n                      "auto-viewport": true,\n                      selectFirstResult: true\n                    }\n                  })\n                : _vm._e(),\n              _vm._v(" "),\n              _vm.walk\n                ? _c("bm-walking", {\n                    attrs: {\n                      start: _vm.startW,\n                      end: _vm.endW,\n                      "auto-viewport": true,\n                      selectFirstResult: true\n                    }\n                  })\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n    require("vue-hot-reload-api")      .rerender("data-v-7ba5bd90", esExports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){eval('!function(t,e){ true?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.VueBaiduMap=e():t.VueBaiduMap=e()}(this,function(){return function(t){function e(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:i})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=43)}([function(t,e){t.exports=function(t,e,n,i){var o,a=t=t||{},r=typeof t.default;"object"!==r&&"function"!==r||(o=t,a=t.default);var s="function"==typeof a?a.options:a;if(e&&(s.render=e.render,s.staticRenderFns=e.staticRenderFns),n&&(s._scopeId=n),i){var l=s.computed||(s.computed={});Object.keys(i).forEach(function(t){var e=i[t];l[t]=function(){return e}})}return{esModule:o,exports:a,options:s}}},function(t,e,n){var i,o,a;!function(n,r){o=[t,e],i=r,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i={control:{unload:"removeControl"},layer:{unload:"removeTileLayer"},overlay:{unload:"removeOverlay"},contextMenu:{unload:"removeContextMenu"}},o=function t(e){return e.abstract||e.$el===e.$children[0].$el?t(e.$parent):e},a=function t(e){n(this,t),this.methods={ready:function(){var t=o(this.$parent),e=this.BMap=t.BMap,n=this.map=t.map;this.load(),this.$emit("ready",{BMap:e,map:n})},transmitEvent:function(t){this.$emit(t.type.replace(/^on/,""),t)},reload:function(){var t=this;this&&this.BMap&&this.$nextTick(function(){t.unload(),t.$nextTick(t.load)})},unload:function(){var t=this.map,n=this.originInstance;try{switch(e.type){case"search":return n.clearResults();case"autoComplete":case"lushu":return n.dispose();case"markerClusterer":return n.clearMarkers();default:t[i[e.type].unload](n)}}catch(t){}}},this.computed={renderByParent:function(){return this.$parent.preventChildrenRender}},this.mounted=function(){var t=o(this.$parent),e=t.map,n=this.ready;e?n():t.$on("ready",n)},this.beforeDestroy=function(){var t=this.unload,e=this.renderByParent,n=this.$parent;e&&n.reload(),t()}};e.default=function(t){return new a({type:t})},t.exports=e.default})},function(t,e,n){var i,o,a;!function(n,r){o=[e],i=r,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t){"use strict";function e(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.lng,i=e.lat;return new t.Point(n,i)}function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.x,i=e.y;return new t.Pixel(n,i)}function i(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.sw,o=n.ne;return new t.Bounds(e(t,i),e(t,o))}function o(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.width,i=e.height;return new t.Size(n,i)}function a(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.url,i=e.size,a=e.opts,r=void 0===a?{}:a;return new t.Icon(n,o(t,i),{anchor:r.anchor&&o(t,r.anchor),imageSize:r.imageSize&&o(t,r.imageSize),imageOffset:r.imageOffset&&o(t,r.imageOffset),infoWindowAnchor:r.infoWindowAnchor&&o(t,r.infoWindowAnchor),printImageUrl:r.printImageUrl})}function r(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.content,a=n.opts;return new t.Label(i,{offset:a.offset&&o(t,a.offset),position:a.position&&e(t,a.position),enableMassClear:a.enableMassClear})}Object.defineProperty(t,"__esModule",{value:!0}),t.createPoint=e,t.createPixel=n,t.createBounds=i,t.createSize=o,t.createIcon=a,t.createLabel=r})},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(41),n(5)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){var n=this,a=e||o.default[(0,i.toKebabCase)(this.$options._componentTag)];a&&a.forEach(function(e){var i="on"===e.slice(0,2);t.addEventListener(e,function(t){n.$emit(i?e.slice(2):e,t)})})};var o=function(t){return t&&t.__esModule?t:{default:t}}(n);t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[e,n(2)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPosition=t.toKebabCase=t.checkType=t.isPoint=void 0;var n=t.isPoint=function(t){return t.lng&&t.lat};t.checkType=function(t){return Object.prototype.toString.call(t).slice(8,-1)},t.toKebabCase=function(t){return t.replace(/[A-Z]/g,function(t){return"-"+t.toLowerCase()}).replace(/^-/,"")},t.getPosition=function(t,i){return n(i)?(0,e.createPoint)(t,i):i}})},function(t,e,n){var i=n(0)(n(72),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(44),n(89),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(45),n(87),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(46),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(47),n(94),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(48),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(49),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(50),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(51),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(52),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(53),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(54),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(55),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(56),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(57),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(58),n(90),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(59),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(60),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(61),n(97),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(62),n(83),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(63),n(95),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(64),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(65),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(66),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(67),n(84),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(68),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(69),n(96),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(70),n(85),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(71),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(73),null,null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(74),n(91),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(75),n(86),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(76),n(93),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(77),n(92),null,null);t.exports=i.exports},function(t,e,n){var i=n(0)(n(78),n(88),null,null);t.exports=i.exports},function(t,e,n){var i,o,a;!function(n,r){o=[t,e],i=r,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={"baidu-map":["click","dblclick","rightclick","rightdblclick","maptypechange","mousemove","mouseover","mouseout","movestart","moving","moveend","zoomstart","zoomend","addoverlay","addcontrol","removecontrol","removeoverlay","clearoverlays","dragstart","dragging","dragend","addtilelayer","removetilelayer","load","resize","hotspotclick","hotspotover","hotspotout","tilesloaded","touchstart","touchmove","touchend","longpress"],"bm-geolocation":["locationSuccess","locationError"],"bm-overview-map":["viewchanged","viewchanging"],"bm-marker":["click","dblclick","mousedown","mouseup","mouseout","mouseover","remove","infowindowclose","infowindowopen","dragstart","dragging","dragend","rightclick"],"bm-polyline":["click","dblclick","mousedown","mouseup","mouseout","mouseover","remove","lineupdate"],"bm-polygon":["click","dblclick","mousedown","mouseup","mouseout","mouseover","remove","lineupdate"],"bm-circle":["click","dblclick","mousedown","mouseup","mouseout","mouseover","remove","lineupdate"],"bm-label":["click","dblclick","mousedown","mouseup","mouseout","mouseover","remove","rightclick"],"bm-info-window":["close","open","maximize","restore","clickclose"],"bm-ground":["click","dblclick"],"bm-auto-complete":["onconfirm","onhighlight"],"bm-point-collection":["click","mouseover","mouseout"]},t.exports=e.default})},function(t,e,n){var i,o,a;!function(n,r){o=[t,e],i=r,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e){"use strict";function n(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=function t(e){var a=e.component,r=e.props,s=e.events,l=e.extraProps,c=e.exceptProps;o(this,t),this.render=function(t){var e=this;return t(a,{props:r.reduce(function(t,n){return Object.assign(t,i({},n,e[n]))},{}),on:s.reduce(function(t,n){return Object.assign(t,i({},n,e.transmitEvent))},{})})},this.props=[].concat(n(l),n(r.filter(function(t){return c.indexOf(t)})))};e.default=function(t){return new a(t)},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[e,n(24),n(25),n(17),n(14),n(13),n(15),n(12),n(11),n(9),n(16),n(10),n(32),n(34),n(35),n(6),n(28),n(29),n(31),n(30),n(33),n(8),n(7),n(38),n(39),n(40),n(37),n(36),n(22),n(23),n(27),n(26),n(21),n(20),n(19),n(18)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o,a,r,s,l,c,u,h,p,d,f,m,g,y,v,_,b,x,w,M,C,I,k,S,B,P,O,E,T,z,j,L){"use strict";function A(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(t,"__esModule",{value:!0}),t.BmlCurveLine=t.BmlHeatmap=t.BmlLushu=t.BmlMarkerClusterer=t.BmAutoComplete=t.BmBoundary=t.BmTraffic=t.BmTile=t.BmBus=t.BmDriving=t.BmWalking=t.BmTransit=t.BmLocalSearch=t.BmContextMenuItem=t.BmContextMenu=t.BmOverlay=t.BmInfoWindow=t.BmLabel=t.BmGround=t.BmCircle=t.BmPolygon=t.BmPolyline=t.BmPointCollection=t.BmMarker=t.BmControl=t.BmPanorama=t.BmCityList=t.BmCopyright=t.BmGeolocation=t.BmOverviewMap=t.BmMapType=t.BmNavigation=t.BmScale=t.BmView=t.BaiduMap=void 0;var R=A(e),F=A(n),$=A(i),W=A(o),N=A(a),D=A(r),Z=A(s),V=A(l),H=A(c),G=A(u),U=A(h),J=A(p),K=A(d),X=A(f),q=A(m),Q=A(g),Y=A(y),tt=A(v),et=A(_),nt=A(b),it=A(x),ot=A(w),at=A(M),rt=A(C),st=A(I),lt=A(k),ct=A(S),ut=A(B),ht=A(P),pt=A(O),dt=A(E),ft=A(T),mt=A(z),gt=A(j),yt=A(L);t.default={install:function(t,e){var n=e.ak;t.prototype._BMap=function(){return{ak:n}},t.component("baidu-map",R.default),t.component("bm-view",F.default),t.component("bm-scale",$.default),t.component("bm-navigation",W.default),t.component("bm-map-type",N.default),t.component("bm-overview-map",D.default),t.component("bm-geolocation",Z.default),t.component("bm-copyright",V.default),t.component("bm-city-list",H.default),t.component("bm-panorama",G.default),t.component("bm-control",U.default),t.component("bm-marker",J.default),t.component("bm-point-collection",K.default),t.component("bm-polyline",X.default),t.component("bm-polygon",q.default),t.component("bm-circle",Q.default),t.component("bm-ground",Y.default),t.component("bm-label",tt.default),t.component("bm-info-window",et.default),t.component("bm-overlay",nt.default),t.component("bm-context-menu",it.default),t.component("bm-context-menu-item",ot.default),t.component("bm-local-search",at.default),t.component("bm-transit",rt.default),t.component("bm-walking",st.default),t.component("bm-driving",lt.default),t.component("bm-bus",ct.default),t.component("bm-tile",ut.default),t.component("bm-traffic",ht.default),t.component("bm-auto-complete",dt.default),t.component("bm-boundary",pt.default)}},t.BaiduMap=R.default,t.BmView=F.default,t.BmScale=$.default,t.BmNavigation=W.default,t.BmMapType=N.default,t.BmOverviewMap=D.default,t.BmGeolocation=Z.default,t.BmCopyright=V.default,t.BmCityList=H.default,t.BmPanorama=G.default,t.BmControl=U.default,t.BmMarker=J.default,t.BmPointCollection=K.default,t.BmPolyline=X.default,t.BmPolygon=q.default,t.BmCircle=Q.default,t.BmGround=Y.default,t.BmLabel=tt.default,t.BmInfoWindow=et.default,t.BmOverlay=nt.default,t.BmContextMenu=it.default,t.BmContextMenuItem=ot.default,t.BmLocalSearch=at.default,t.BmTransit=rt.default,t.BmWalking=st.default,t.BmDriving=lt.default,t.BmBus=ct.default,t.BmTile=ut.default,t.BmTraffic=ht.default,t.BmBoundary=pt.default,t.BmAutoComplete=dt.default,t.BmlMarkerClusterer=ft.default,t.BmlLushu=mt.default,t.BmlHeatmap=gt.default,t.BmlCurveLine=yt.default})},function(t,e,n){var i,o,a;!function(n,r){o=[t,e],i=r,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"bm-context-menu-item",props:{callback:{type:Function,default:function(){}},text:{type:String},iconUrl:{type:String},id:{type:String},disabled:{type:Boolean},seperator:{type:Boolean}},methods:{reload:function(){this.$parent.map&&this.$parent.reload()}},watch:{text:function(){this.reload()},iconUrl:function(){this.reload()},id:function(){this.reload()},disabled:function(){this.reload()},iseperator:function(){this.reload()},callback:function(){this.reload()}},destroyed:function(){this.reload()},mounted:function(){this.reload()}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-context-menu",props:{width:{type:Number}},mixins:[(0,i.default)("contextMenu")],methods:{load:function(){var t=this.width,e=this.BMap,n=this.map,i=this.$parent,o=this.originInstance=new e.ContextMenu,a=this.parent=i.originInstance||n,r=!0,s=!1,l=void 0;try{for(var c,u=this.$children[Symbol.iterator]();!(r=(c=u.next()).done);r=!0){(function(){var i=c.value;if(i.seperator)return o.addSeparator(),"continue";var r=new e.MenuItem(i.text,function(t,o){i.callback({point:t,pixel:o,BMap:e,map:n,target:a})},{width:t,id:i.id,iconUrl:i.iconUrl});i.disabled?r.disable():r.enable(),o.addItem(r)})()}}catch(t){s=!0,l=t}finally{try{!r&&u.return&&u.return()}finally{if(s)throw l}}a.addContextMenu(o)}}},t.exports=e.default})},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-city-list",render:function(){},mixins:[(0,a.default)("control")],props:{anchor:{type:String},offset:{type:Object}},watch:{anchor:function(){this.reload()},offset:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.anchor,a=this.offset,r=this;this.originInstance=new t.CityListControl({anchor:i[n],offset:a&&(0,o.createSize)(t,a),onChangeBefore:function(){r.$emit("changeBefore")},onChangeAfter:function(){r.$emit("changeAfter")}}),e.addControl(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-control",mixins:[(0,a.default)("control")],props:["anchor","offset"],watch:{anchor:function(t){this.originInstance.setAnchor(t)},offset:function(t){this.originInstance.setOffset(t)}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.anchor,a=this.offset,r=this.$el,s=function(){this.defaultAnchor=i[n||"BMAP_ANCHOR_TOP_LEFT"],this.defaultOffset=(0,o.createSize)(t,a)};s.prototype=new t.Control,s.prototype.initialize=function(t){return t.getContainer().appendChild(r)},this.originInstance=new s(n,a),e.addControl(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-copyright",render:function(){},mixins:[(0,a.default)("control")],props:["anchor","offset","copyright"],watch:{anchor:function(){this.reload()},offset:function(){this.reload()},copyright:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.offset,a=this.anchor,r=this.updateCopyrightList;this.originInstance=new t.CopyrightControl({anchor:i[a],offset:n&&(0,o.createSize)(t,n)}),r(),e.addControl(this.originInstance)},updateCopyrightList:function(){var t=this,e=this.BMap,n=this.map,i=this.originInstance,o=i.removeCopyright,a=i.getCopyrightCollection,r=a();r&&r.forEach(function(t){o(t.id)}),this.copyright&&this.copyright.forEach(function(i){var o=i.bounds?new e.Bounds(new e.Point(i.bounds.sw.lng,i.bounds.sw.lat),new e.Point(i.bounds.ne.lng,i.bounds.ne.lat)):n.getBounds();t.originInstance.addCopyright({id:i.id,content:i.content,bounds:o}),t.originInstance.getCopyrightCollection()})}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(4),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var s=r(n),l=r(o);e.default={name:"bm-geolocation",render:function(){},mixins:[(0,s.default)("control")],props:{anchor:{type:String},offset:{type:Object},showAddressBar:{type:Boolean},autoLocation:{type:Boolean},locationIcon:{type:Object}},watch:{anchor:function(){this.reload()},offset:function(){this.reload()},showAddressBar:function(){this.reload()},autoLocation:function(){this.reload()},locationIcon:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.anchor,o=this.showAddressBar,r=this.autoLocation,s=this.locationIcon,c=this.offset;this.originInstance=new t.GeolocationControl({anchor:i[n],showAddressBar:o,enableAutoLocation:r,offset:c&&(0,a.createSize)(t,c),locationIcon:s&&(0,a.createIcon)(t,s)}),l.default.call(this,this.originInstance),e.addControl(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-map-type",render:function(){},mixins:[(0,a.default)("control")],props:["type","mapTypes","anchor","offset"],watch:{anchor:function(){this.reload()},offset:function(){this.reload()},type:function(){this.reload()},mapTypes:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.anchor,a=this.offset,r=this.type,s=[];this.mapTypes&&this.mapTypes.forEach(function(t){return s.push(i[t])}),this.originInstance=new t.MapTypeControl({anchor:i[n],offset:a&&(0,o.createSize)(t,a),type:i[r],mapTypes:s}),e.addControl(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-navigation",render:function(){},mixins:[(0,a.default)("control")],props:{anchor:{type:String},offset:{type:Object},type:{type:Object},showZoomInfo:{type:Boolean},enableGeolocation:{type:Boolean,default:!1}},watch:{anchor:function(){this.reload()},offset:function(){this.reload()},type:function(){this.reload()},showZoomInfo:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.anchor,a=this.offset,r=this.type,s=this.showZoomInfo,l=this.enableGeolocation;this.originInstance=new t.NavigationControl({anchor:i[n],offset:a&&(0,o.createSize)(t,a),type:r,showZoomInfo:s,enableGeolocation:l}),e.addControl(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(2),n(1),n(4)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var s=r(o),l=r(a);e.default={name:"bm-overview-map",mixins:[(0,s.default)("control")],render:function(){},props:{anchor:{type:String},offset:{type:Object},size:{type:Object},isOpen:{type:Boolean}},watch:{anchor:function(){this.reload()},offset:function(){this.reload()},size:function(){this.reload()},isOpen:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,o=this.isOpen,a=this.size,r=this.offset,s=this.anchor,c=[];this.mapTypes&&this.mapTypes.forEach(function(t){c.push(i[t])}),this.originInstance=new t.OverviewMapControl({anchor:i[s],offset:(0,n.createSize)(t,r),size:(0,n.createSize)(t,a),isOpen:o}),l.default.call(this,this.originInstance),e.addControl(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-panorama",mixins:[(0,a.default)("control")],render:function(){},props:["anchor","offset"],watch:{anchor:function(){this.reload()},offset:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.anchor,a=this.offset;this.originInstance=new t.PanoramaControl({anchor:i[n],offset:a&&(0,o.createSize)(t,a)}),e.addControl(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-scale",render:function(){},mixins:[(0,a.default)("control")],props:{anchor:{type:String},offset:{type:Object}},watch:{anchor:function(){this.reload()},offset:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.anchor,a=this.offset;this.originInstance=new t.ScaleControl({anchor:i[n],offset:a&&(0,o.createSize)(t,a)}),e.addControl(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(79),n(1),n(4),n(2)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var s=r(n),l=r(i),c=r(o),u=["click","dblclick","mousedown","mouseup","mouseout","mouseover","remove","lineupdate"];e.default={name:"bml-curve-line",render:function(){},mixins:[(0,l.default)("overlay")],props:{points:{type:Array,default:Array},strokeColor:{type:String},strokeWeight:{type:Number},strokeOpacity:{type:Number},strokeStyle:{type:String},massClear:{type:Boolean,default:!0},clicking:{type:Boolean,default:!0},editing:{type:Boolean,default:!1}},watch:{points:{handler:function(t,e){this.originInstance.disableEditing(),this.reload()},deep:!0},strokeColor:function(t){this.originInstance.setStrokeColor(t)},strokeOpacity:function(t){this.originInstance.setStrokeOpacity(t)},strokeWeight:function(t){this.originInstance.setStrokeOpacity(t)},strokeStyle:function(t){this.originInstance.setStrokeStyle(t)},editing:function(t){t?this.originInstance.enableEditing():this.originInstance.disableEditing()},massClear:function(t){t?this.originInstance.enableMassClear():this.originInstance.disableMassClear()},clicking:function(t){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.points,i=this.strokeColor,o=this.strokeWeight,r=this.strokeOpacity,l=this.strokeStyle,h=this.editing,p=this.massClear,d=this.clicking,f=new s.default(n.map(function(e){return(0,a.createPoint)(t,e)}),{strokeColor:i,strokeWeight:o,strokeOpacity:r,strokeStyle:l,enableMassClear:p,enableClicking:d});h?f.enableEditing():f.disableEditing(),this.originInstance=f,e.addOverlay(f),c.default.call(this,f,u)}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(80)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var a=o(n),r=o(i);e.default={name:"bml-heatmap",render:function(){},mixins:[(0,a.default)("overlay")],props:{data:{type:Array,default:Array},max:{type:Number},radius:{type:Number},gradient:{type:Object},opacity:{type:Number}},watch:{data:{handler:function(){this.reload()},deep:!0},max:function(){this.reload()},radius:function(t){var e=this.originInstance,n=this.opacity,i=this.gradient;e.setOptions({radius:t,opacity:n,gradient:i})},gradient:{handler:function(t){var e=this.originInstance,n=this.radius,i=this.opacity;e.setOptions({radius:n,opacity:i,gradient:t})},deep:!0},opacity:function(t){var e=this.originInstance,n=this.radius,i=this.gradient;e.setOptions({radius:n,opacity:t,gradient:i})}},methods:{load:function(){var t=this.map,e=this.data,n=this.max,i=this.radius,o=this.opacity,a=this.gradient,s=this.originInstance=new r.default({radius:i,opacity:o,gradient:a});t.addOverlay(s),s.setDataSet({data:e,max:n})}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(2),n(81)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=a(n),s=a(o);e.default={name:"bm-lushu",render:function(t){},mixins:[(0,r.default)("lushu")],props:{path:{type:Array,default:[]},landmarkPois:{type:Array,default:function(){return[]}},icon:{type:Object},speed:{type:Number,default:4e3},content:{type:String,default:""},autoView:{type:Boolean,default:!1},rotation:{type:Boolean,default:!1},infoWindow:{type:Boolean,default:!0},play:{type:Boolean,default:!0}},watch:{path:{handler:function(t){this.reload()},deep:!0},landmarkPois:{handler:function(t){this.reload()},deep:!0},icon:{handler:function(t){var e=this.originInstance,n=(this.content,(0,i.createIcon)(BMap,t));e._opts.icon=n,e._marker=n},deep:!0},speed:function(t){var e=this.originInstance;this.content;e._opts.speed=t},content:function(t){var e=this.originInstance,n=this.infoWindow;t&&n?e.showInfoWindow():e.hideInfoWindow(),e._opts.defaultContent=t,e._overlay&&e._overlay.setHtml(t)},autoView:function(t){var e=this.originInstance;this.content;e._opts.autoView=t},rotation:function(t){var e=this.originInstance;this.content;e._opts.enableRotation=t},infoWindow:function(t){var e=this.originInstance,n=this.content;e&&t&&n?e.showInfoWindow():e.hideInfoWindow()},play:function(t){var e=this.originInstance;t&&e?e.start():!this._isEnd&&e.pause()}},methods:{load:function(){var t=this,e=this.BMap,n=this.map,o=this.path,a=this.landmarkPois,r=this.icon,l=this.speed,c=this.content,u=this.autoView,h=this.rotation,p=this.infoWindow,d=this.play,f=this.originInstance=new s.default(n,o,{enableRotation:h,landmarkPois:a,showInfoWindow:p,defaultContent:c,icon:r&&(0,i.createIcon)(e,r),speed:l,autoView:u,onstart:function(e){t._isEnd=!1,t.$emit("start")},onstop:function(e){t._isEnd=!0,t.$emit("stop")},onpause:function(e){return t.$emit("pause")}});d&&o.length&&f.start(this),o.length&&(c&&p?f.showInfoWindow():f.hideInfoWindow())}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(82),n(2),n(1)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=a(n),s=a(o);e.default={name:"bml-marker-cluseter",mixins:[(0,s.default)("markerClusterer")],props:{gridSize:{type:Object},maxZoom:{type:Number},minClusterSize:{type:Object},styles:{type:Array,default:function(){return[]}},averageCenter:{type:Boolean,default:!1}},watch:{gridSize:{handler:function(t){var e=this.BMap;this.originInstance.setGridSize(e,t.map)},deep:!0},maxZoom:function(t){this.originInstance.setMaxZoom(t)},minClusterSize:{handler:function(t){var e=this.BMap;this.originInstance.setMinClusterSize((0,i.createSize)(e,t))},deep:!0},styles:{handler:function(t){var e=this.BMap,n=this.originInstance,o=JSON.parse(JSON.stringify(t)).map(function(t){return t.size=t.size&&(0,i.createSize)(e,t.size),t});n.setStyles(o)},deep:!0},averageCenter:function(t){this.reload()}},methods:{load:function(){var t=this,e=this.BMap,n=this.map,o=this.gridSize,a=this.minClusterSize,s=this.maxZoom,l=this.styles,c=this.averageCenter;this.originInstance=new r.default(n,{gridSize:o&&(0,i.createSize)(e,o),maxZoom:s,minClusterSize:a&&(0,i.createSize)(e,a),styles:l.map(function(t){return t.size=(0,i.createSize)(e,t.size),t}),isAverageCenter:c}),this.$nextTick(function(){var n=t.$children.map(function(t){return t.originInstance}).filter(function(t){return t instanceof e.Marker});t.originInstance.addMarkers(n)})}},beforeCreate:function(){this.preventChildrenRender=!0}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(2)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-tile",render:function(t){},mixins:[(0,o.default)("layer")],props:{transparentPng:{type:Boolean},tileUrlTemplate:{type:String},copyright:{},zIndex:{type:Number}},watch:{transparentPng:function(){this.reload()},tileUrlTemplate:function(){this.reload()},copyright:function(){this.reload()},zIndex:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.transparentPng,o=this.tileUrlTemplate,a=this.copyright,r=this.zIndex;this.originInstance=new t.TileLayer({transparentPng:n,tileUrlTemplate:o,copyright:a&&{id:a.id,content:a.content,bounds:a.bounds&&(0,i.createBounds)(a.bounds)},zIndex:r}),e.addTileLayer(this.originInstance)}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-triffic",render:function(t){},mixins:[(0,i.default)("layer")],props:{predictDate:{type:Object}},watch:{"pridictDate.weekday":function(){this.reload()},"pridictDate.hour":function(){this.reload()},pridictDate:function(){this.reload()}},methods:{load:function(){var t=this.pridictDate,e=this.BMap,n=this.map;this.originInstance=new e.TrafficLayer({pridictDate:t}),n.addTileLayer(this.originInstance)}}},t.exports=e.default})},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(4),n(5)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(n);e.default={name:"bm-map",props:{ak:{type:String},center:{type:[Object,String]},zoom:{type:Number},minZoom:{type:Number},maxZoom:{type:Number},highResolution:{type:Boolean,default:!0},mapClick:{type:Boolean,default:!0},mapType:{type:String},dragging:{type:Boolean,default:!0},scrollWheelZoom:{type:Boolean,default:!1},doubleClickZoom:{type:Boolean,default:!0},keyboard:{type:Boolean,default:!0},inertialDragging:{type:Boolean,default:!0},continuousZoom:{type:Boolean,default:!0},pinchToZoom:{type:Boolean,default:!0},autoResize:{type:Boolean,default:!0},theme:{type:Array},mapStyle:{type:Object}},watch:{center:function(t,e){var n=this.map,i=this.zoom;"String"===(0,o.checkType)(t)&&t!==e&&n.centerAndZoom(t,i)},"center.lng":function(t,e){var n=this.BMap,i=this.map,o=this.zoom,a=this.center;t!==e&&t>=-180&&t<=180&&i.centerAndZoom(new n.Point(t,a.lat),o)},"center.lat":function(t,e){var n=this.BMap,i=this.map,o=this.zoom,a=this.center;t!==e&&t>=-74&&t<=74&&i.centerAndZoom(new n.Point(a.lng,t),o)},zoom:function(t,e){var n=this.map;t!==e&&t>=3&&t<=19&&n.setZoom(t)},minZoom:function(t){this.map.setMinZoom(t)},maxZoom:function(t){this.map.setMaxZoom(t)},highResolution:function(){this.reset()},mapClick:function(){this.reset()},mapType:function(t){this.map.setMapType(i[t])},dragging:function(t){var e=this.map;t?e.enableDragging():e.disableDragging()},scrollWheelZoom:function(t){var e=this.map;t?e.enableScrollWheelZoom():e.disableScrollWheelZoom()},doubleClickZoom:function(t){var e=this.map;t?e.enableDoubleClickZoom():e.disableDoubleClickZoom()},keyboard:function(t){var e=this.map;t?e.enableKeyboard():e.disableKeyboard()},inertialDragging:function(t){var e=this.map;t?e.enableInertialDragging():e.disableInertialDragging()},continuousZoom:function(t){var e=this.map;t?e.enableContinuousZoom():e.disableContinuousZoom()},pinchToZoom:function(t){var e=this.map;t?e.enablePinchToZoom():e.disablePinchToZoom()},autoResize:function(t){var e=this.map;t?e.enableAutoResize():e.disableAutoResize()},theme:function(t){this.map.setMapStyle({styleJson:t})},"mapStyle.features":{handler:function(t,e){var n=this.map,i=this.mapStyle,o=i.style,a=i.styleJson;n.setMapStyle({styleJson:a,features:t,style:o})},deep:!0},"mapStyle.style":function(t,e){var n=this.map,i=this.mapStyle,o=i.features,a=i.styleJson;n.setMapStyle({styleJson:a,features:o,style:t})},"mapStyle.styleJson":{handler:function(t,e){var n=this.map,i=this.mapStyle,o=i.features,a=i.style;n.setMapStyle({styleJson:t,features:o,style:a})},deep:!0},mapStyle:function(t){var e=this.map;!this.theme&&e.setMapStyle(t)}},methods:{setMapOptions:function(){var t=this.map,e=this.minZoom,n=this.maxZoom,o=this.mapType,a=this.dragging,r=this.scrollWheelZoom,s=this.doubleClickZoom,l=this.keyboard,c=this.inertialDragging,u=this.continuousZoom,h=this.pinchToZoom,p=this.autoResize;e&&t.setMinZoom(e),n&&t.setMaxZoom(n),o&&t.setMapType(i[o]),a?t.enableDragging():t.disableDragging(),r?t.enableScrollWheelZoom():t.disableScrollWheelZoom(),s?t.enableDoubleClickZoom():t.disableDoubleClickZoom(),l?t.enableKeyboard():t.disableKeyboard(),c?t.enableInertialDragging():t.disableInertialDragging(),u?t.enableContinuousZoom():t.disableContinuousZoom(),h?t.enablePinchToZoom():t.disablePinchToZoom(),p?t.enableAutoResize():t.disableAutoResize()},init:function(t){if(!this.map){var e=this.$refs.view,n=!0,i=!1,o=void 0;try{for(var r,s=(this.$slots.default||[])[Symbol.iterator]();!(n=(r=s.next()).done);n=!0){var l=r.value;l.componentOptions&&"bm-view"===l.componentOptions.tag&&(this.hasBmView=!0,e=l.elm)}}catch(t){i=!0,o=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw o}}var c=new t.Map(e,{enableHighResolution:this.highResolution,enableMapClick:this.mapClick});this.map=c;var u=this.setMapOptions,h=this.zoom,p=this.getCenterPoint,d=this.theme,f=this.mapStyle;d?c.setMapStyle({styleJson:d}):c.setMapStyle(f),u(),a.default.call(this,c),c.reset(),c.centerAndZoom(p(),h),this.$emit("ready",{BMap:t,map:c})}},getCenterPoint:function(){var t=this.center,e=this.BMap;switch((0,o.checkType)(t)){case"String":return t;case"Object":return new e.Point(t.lng,t.lat);default:return new e.Point}},initMap:function(t){this.BMap=t,this.init(t)},getMapScript:function(){if(i.BMap)return i.BMap._preloader?i.BMap._preloader:Promise.resolve(i.BMap);var t=this.ak||this._BMap().ak;return i.BMap={},i.BMap._preloader=new Promise(function(e,n){i._initBaiduMap=function(){e(i.BMap),i.document.body.removeChild(o),i.BMap._preloader=null,i._initBaiduMap=null};var o=document.createElement("script");i.document.body.appendChild(o),o.src="https://api.map.baidu.com/api?v=2.0&ak="+t+"&callback=_initBaiduMap"}),i.BMap._preloader},reset:function(){var t=this.getMapScript,e=this.initMap;t().then(e)}},mounted:function(){this.reset()},data:function(){return{hasBmView:!1}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){var i,o,a;!function(n,r){o=[t,e],i=r,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"bm-view"},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(4)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var a=o(n),r=o(i);e.default={name:"bm-autocomplete",mixins:[(0,a.default)()],props:{types:{type:String},location:{type:String},sugStyle:{type:Object,default:function(){return{}}}},watch:{types:function(){this.reload()},location:function(){this.reload()}},methods:{load:function(){var t=this,e=this.BMap,n=this.map,i=this.$el,o=this.types,a=this.location,s=this.sugStyle,l=i.querySelector("input");l&&(this.originInstance=new e.Autocomplete({input:l,types:o,location:a||n,onSearchComplete:function(e){var n=document.querySelectorAll(".tangram-suggestion-main"),i=!0,o=!1,a=void 0;try{for(var r,l=n[Symbol.iterator]();!(i=(r=l.next()).done);i=!0){var c=r.value;for(var u in s)c.style[u]=s[u].toString()}}catch(t){o=!0,a=t}finally{try{!i&&l.return&&l.return()}finally{if(o)throw a}}t.$emit("searchcomplete",e)}}),this.originInstance.addEventListener("onconfirm",function(e){var n=e.item.value;t.$emit("input",n.province+n.city+n.district+n.street+n.business)}),r.default.call(this,this.originInstance))}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(6),n(1),n(42)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=a(n),s=a(i),l=a(o),c=function(){function t(t,e){var n=[],i=!0,o=!1,a=void 0;try{for(var r,s=t[Symbol.iterator]();!(i=(r=s.next()).done)&&(n.push(r.value),!e||n.length!==e);i=!0);}catch(t){o=!0,a=t}finally{try{!i&&s.return&&s.return()}finally{if(o)throw a}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();e.default={abstract:!0,mixins:[(0,s.default)("abstract"),(0,l.default)({component:"bm-polygon",props:["path","strokeColor","strokeWeight","strokeOpacity","strokeStyle","fillColor","fillOpacity","massClear","clicking"],extraProps:["name"],exceptProps:["path"],events:["click","dblclick","mousedown","mouseup","mouseout","mouseover","remove"]})],data:function(){return{path:[]}},components:{BmPolygon:r.default},watch:{name:function(){this.reload()}},methods:{load:function(){var t=this,e=this.BMap,n=this.name;(new e.Boundary).get(n,function(e){t.path=(e.boundaries[0]||[]).split(";").map(function(t){return function(t){var e=c(t,2);return{lng:e[0],lat:e[1]}}(t.split(",").map(function(t){return+t}))})})}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(4),n(2)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=a(n),s=a(i);e.default={name:"bm-circle",render:function(){},mixins:[(0,r.default)("overlay")],props:{center:{},radius:{},strokeColor:{type:String},strokeWeight:{type:Number},strokeOpacity:{type:Number},strokeStyle:{type:String},fillColor:{type:String},fillOpacity:{type:Number},massClear:{type:Boolean,default:!0},clicking:{type:Boolean,default:!0},editing:{type:Boolean,default:!1}},watch:{"center.lng":function(t,e){var n=this.BMap,i=this.originInstance,a=this.isEditing,r=this.disableEditing,s=this.enableEditing,l=this.center,c=this.editing;if(!a){r();var u=t;t.toString()!==e.toString()&&u>=-180&&u<=180&&i.setCenter((0,o.createPoint)(n,{lng:u,lat:l.lat})),c&&s()}},"center.lat":function(t,e){var n=this.BMap,i=this.originInstance,a=this.isEditing,r=this.disableEditing,s=this.enableEditing,l=this.center,c=this.editing;if(!a){r();var u=t;t.toString()!==e.toString()&&u>=-74&&u<=74&&i.setCenter((0,o.createPoint)(n,{lng:l.lng,lat:u})),c&&s()}},radius:function(t,e){var n=this.originInstance,i=this.isEditing,o=this.disableEditing,a=this.enableEditing,r=this.editing;i||(o(),n.setRadius(t),r&&a())},strokeColor:function(t){this.originInstance.setStrokeColor(t)},strokeOpacity:function(t){this.originInstance.setStrokeOpacity(t)},strokeWeight:function(t){this.originInstance.setStrokeOpacity(t)},strokeStyle:function(t){this.originInstance.setStrokeStyle(t)},fillColor:function(t){this.originInstance.setFillColor(t)},fillOpacity:function(t){this.originInstance.setFillOpacity(t)},editing:function(t){t?this.enableEditing():this.disableEditing()},massClear:function(t){t?this.originInstance.enableMassClear():this.originInstance.disableMassClear()},clicking:function(t){this.reload()}},methods:{dragStartHandler:function(){this.isEditing=!0},dragEndHandler:function(){this.isEditing=!1,this.bindEditingNodeEvents()},bindEditingNodeEvents:function(){var t=this.originInstance,e=this.editingKey,n=this.dragStartHandler,i=this.dragEndHandler;t[e].forEach(function(t){t.addEventListener("dragstart",n),t.addEventListener("dragend",i)})},enableEditing:function(){var t=this.originInstance,e=this.bindEditingNodeEvents;t.enableEditing(),e()},disableEditing:function(){this.originInstance.disableEditing()},getEditingKey:function(t){var e=this,n=[];t.enableEditing(),setTimeout(function(){for(var i in t)t[i]&&2===t[i].length&&n.push(i);t.disableEditing();for(var o in t)t[o]&&0===t[o].length&&~n.indexOf(o)&&(e.editingKey=o)},0)},load:function(){var t=this.BMap,e=this.map,n=this.center,i=this.radius,a=this.strokeColor,r=this.strokeWeight,l=this.strokeOpacity,c=this.strokeStyle,u=this.fillColor,h=this.fillOpacity,p=this.editing,d=this.massClear,f=this.clicking,m=this.enableEditing,g=this.disableEditing,y=this.getEditingKey,v=this.editingKey,_=new t.Circle((0,o.createPoint)(t,{lng:n.lng,lat:n.lat}),i,{strokeColor:a,strokeWeight:r,strokeOpacity:l,strokeStyle:c,fillColor:u,fillOpacity:h,enableMassClear:d,enableClicking:f});this.originInstance=_,e.addOverlay(_),s.default.call(this,_),!v&&y(_),setTimeout(function(){p?m():g()},0)}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(4),n(2)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=a(n),s=a(i);e.default={name:"bm-ground",render:function(){},mixins:[(0,r.default)("overlay")],props:{bounds:{type:Object},opacity:{type:Number},imageURL:{type:String},displayOnMinLevel:{type:Number},displayOnMaxLevel:{type:Number}},watch:{bounds:{handler:function(t){var e=this.BMap;this.originInstance.setBounds((0,o.createBounds)(e,t))},deep:!0},opacity:function(t){this.originInstance.setOpacity(t)},imageURL:function(t){this.originInstance.setImageURL(t)},displayOnMinLevel:function(t){this.originInstance.setDisplayOnMinLevel(t)},displayOnMaxLevel:function(t){this.originInstance.setDisplayOnMaxLevel(t)}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.bounds,i=this.opacity,a=this.imageURL,r=this.displayOnMinLevel,l=this.displayOnMaxLevel,c=new t.GroundOverlay(n&&(0,o.createBounds)(t,n),{opacity:i,imageURL:a,displayOnMaxLevel:l,displayOnMinLevel:r});c.setImageURL(a),this.originInstance=c,s.default.call(this,c),e.addOverlay(c)}}},t.exports=e.default})},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(4),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var s=r(n),l=r(o);e.default={name:"bm-info-window",mixins:[(0,s.default)("overlay")],props:{show:{type:Boolean},position:{type:Object},title:{type:String},width:{type:Number},height:{type:Number},maxWidth:{type:Number},offset:{type:Object},maximize:{type:Boolean},autoPan:{type:Boolean},closeOnClick:{type:Boolean,default:!0},message:{type:String}},watch:{show:function(t){t?this.openInfoWindow():this.closeInfoWindow()},"position.lng":function(t,e){this.reload()},"position.lat":function(t,e){this.reload()},"offset.width":function(t,e){this.reload()},"offset.height":function(t){this.reload()},maxWidth:function(){this.reload()},width:function(t){this.originInstance.setWidth(t)},height:function(t){this.originInstance.setHeight(t)},title:function(t){this.originInstance.setTitle(t)},maximize:function(t){t?this.originInstance.enableMaximize():this.originInstance.disableMaximize()},autoPan:function(t){t?this.originInstance.enableAutoPan():this.originInstance.disableAutoPan()},closeOnClick:function(t){t?this.originInstance.enableCloseOnClick():this.originInstance.disableCloseOnClick()}},methods:{redraw:function(){this.originInstance.redraw()},load:function(){var t=this.BMap,e=this.map,n=this.show,i=this.title,o=this.width,r=this.height,s=this.maxWidth,c=this.offset,u=this.autoPan,h=this.closeOnClick,p=this.message,d=this.maximize,f=this.bindObserver,m=this.$parent,g=this.$el,y=new t.InfoWindow(g,{width:o,height:r,title:i,maxWidth:s,offset:(0,a.createSize)(t,c),enableAutoPan:u,enableCloseOnClick:h,enableMessage:void 0===p,message:p});d?y.enableMaximize():y.disableMaximize(),l.default.call(this,y),this.originInstance=y,y.redraw(),[].forEach.call(g.querySelectorAll("img"),function(t){t.onload=function(){return y.redraw()}}),f(),this.$container=m.originInstance&&m.originInstance.openInfoWindow?m.originInstance:e,n&&this.openInfoWindow()},bindObserver:function(){var t=i.MutationObserver;if(t){var e=this.$el,n=this.originInstance;this.observer=new t(function(t){return n.redraw()}),this.observer.observe(e,{attributes:!0,childList:!0,characterData:!0,subtree:!0})}},openInfoWindow:function(){var t=this.BMap,e=this.$container,n=this.position,i=this.originInstance;e.openInfoWindow(i,(0,a.createPoint)(t,n))},closeInfoWindow:function(){this.$container.closeInfoWindow(this.originInstance)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(4),n(2)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=a(n),s=a(i);e.default={name:"bm-label",render:function(){},mixins:[(0,r.default)("overlay")],props:{content:{type:String},title:{type:String},offset:{},position:{},labelStyle:{},zIndex:{type:Number,default:0},massClear:{type:Boolean,default:!0}},watch:{content:function(t){this.originInstance.setContent(t)},title:function(t){this.originInstance.setTitle(t)},"offset.width":function(t,e){var n=this.BMap;t.toString()!==e.toString()&&this.originInstance.setOffset((0,o.createSize)(n,{width:t,height:this.offset.height}))},"offset.height":function(t,e){var n=this.BMap;t.toString()!==e.toString()&&this.originInstance.setOffset((0,o.createSize)(n,{width:this.offset.width,height:t}))},"position.lng":function(t,e){var n=this.BMap,i=t;t.toString()!==e.toString()&&i>=-180&&i<=180&&this.originInstance.setCenter((0,o.createPoint)(n,{lng:i,lat:this.center.lat}))},"position.lat":function(t,e){var n=this.BMap,i=t;t.toString()!==e.toString()&&i>=-74&&i<=74&&this.originInstance.setCenter((0,o.createPoint)(n,{lng:this.center.lng,lat:i}))},labelStyle:{handler:function(t){this.originInstance.setStyle(t)},deep:!0},zIndex:function(t){this.originInstance.setZIndex(t)},massClear:function(t){t?this.originInstance.enableMassClear():this.originInstance.disableMassClear()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.content,i=this.title,a=this.offset,r=this.position,l=this.labelStyle,c=this.zIndex,u=this.massClear,h=this.$parent,p=new t.Label(n,{offset:(0,o.createSize)(t,a),position:(0,o.createPoint)(t,r),enableMassClear:u});this.originInstance=p;try{h.originInstance.setLabel(p)}catch(t){e.addOverlay(p)}i&&p.setTitle(i),l&&p.setStyle(l),c&&p.setZIndex(c),s.default.call(this,p)}}},t.exports=e.default})},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(4),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var s=r(n),l=r(o);e.default={name:"bm-marker",mixins:[(0,s.default)("overlay")],props:{position:{},offset:{},icon:{},massClear:{type:Boolean,default:!0},dragging:{type:Boolean,default:!1},clicking:{type:Boolean,default:!0},raiseOnDrag:{type:Boolean,default:!1},draggingCursor:{type:String},rotation:{type:Number},shadow:{type:Object},title:{type:String},label:{type:Object},animation:{type:String},top:{type:Boolean,default:!1},zIndex:{type:Number,default:0}},watch:{"position.lng":function(t,e){var n=this.BMap,i=this.originInstance,o=this.position,r=this.renderByParent,s=this.$parent;t!==e&&t>=-180&&t<=180&&i.setPosition((0,a.createPoint)(n,{lng:t,lat:o.lat})),r&&s.reload()},"position.lat":function(t,e){var n=this.BMap,i=this.originInstance,o=this.position,r=this.renderByParent,s=this.$parent;t!==e&&t>=-74&&t<=74&&i.setPosition((0,a.createPoint)(n,{lng:o.lng,lat:t})),r&&s.reload()},"offset.width":function(t,e){var n=this.BMap,i=this.originInstance;t!==e&&i.setOffset(new n.Size(t,this.offset.height))},"offset.height":function(t,e){var n=this.BMap,i=this.originInstance;t!==e&&i.setOffset(new n.Size(this.offset.width,t))},icon:{deep:!0,handler:function(t){var e=this.BMap,n=this.originInstance,i=this.rotation;n&&n.setIcon((0,a.createIcon)(e,t)),i&&n&&n.setRotation(i)}},massClear:function(t){t?this.originInstance.enableMassClear():this.originInstance.disableMassClear()},dragging:function(t){t?this.originInstance.enableDragging():this.originInstance.disableDragging()},clicking:function(){this.reload()},raiseOnDrag:function(){this.reload()},draggingCursor:function(t){this.originInstance.setDraggingCursor(t)},rotation:function(t){this.originInstance.setRotation(t)},shadow:function(t){this.originInstance.setShadow(t)},title:function(t){this.originInstance.setTitle(t)},label:function(t){this.reload()},animation:function(t){this.originInstance.setAnimation(i[t])},top:function(t){this.originInstance.setTop(t)},zIndex:function(t){this.originInstance.setZIndex(t)}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.position,o=this.offset,r=this.icon,s=this.massClear,c=this.dragging,u=this.clicking,h=this.raiseOnDrag,p=this.draggingCursor,d=this.rotation,f=this.shadow,m=this.title,g=this.label,y=this.animation,v=this.top,_=this.renderByParent,b=this.$parent,x=this.zIndex,w=new t.Marker(new t.Point(n.lng,n.lat),{offset:o,icon:r&&(0,a.createIcon)(t,r),enableMassClear:s,enableDragging:c,enableClicking:u,raiseOnDrag:h,draggingCursor:p,rotation:d,shadow:f,title:m});this.originInstance=w,g&&w&&w.setLabel((0,a.createLabel)(t,g)),w.setTop(v),w.setZIndex(x),l.default.call(this,w),_?b.reload():e.addOverlay(w),w.setAnimation(i[y])}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(n),s=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();e.default={name:"bm-overlay",mixins:[(0,r.default)("overlay")],props:{pane:{type:String}},watch:{pane:function(){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.$el,r=this.pane,l=this.$emit.bind(this),c=function(c){function u(){return i(this,u),o(this,(u.__proto__||Object.getPrototypeOf(u)).apply(this,arguments))}return a(u,c),s(u,[{key:"initialize",value:function(){l("initialize",{BMap:t,map:e,el:n,overlay:this});try{e.getPanes()[r].appendChild(n)}catch(t){}return n}},{key:"draw",value:function(){l("draw",{BMap:t,map:e,el:n,overlay:this})}}]),u}(t.Overlay),u=new c;this.originInstance=u,e.addOverlay(u)}}},t.exports=e.default})},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(1),n(4),n(2)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o,a){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var s=r(n),l=r(o);e.default={render:function(){},name:"bm-point-collection",mixins:[(0,s.default)("overlay")],props:{points:{type:Array,default:function(){return[]}},shape:{type:String,default:"BMAP_POINT_SHAPE_CIRCLE"},color:{type:String},size:{type:String,default:"BMAP_POINT_SIZE_NORMAL"}},watch:{shape:function(t){var e=this.originInstance,n=this.color,o=this.size;e.setStyles({shape:i[t],color:n,size:i[o]})},size:function(t){var e=this.originInstance,n=this.color,o=this.shape;e.setStyles({shape:i[o],color:n,size:i[t]})},color:function(t){var e=this.originInstance,n=this.shape,o=this.size;e.setStyles({shape:i[n],color:t,size:i[o]})},points:{deep:!0,handler:function(t){var e=this.originInstance;e.clear(),e.setPoints(t)}}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.points,o=this.shape,r=this.color,s=this.size,c=this.originInstance=new t.PointCollection(n.map(function(e){return(0,a.createPoint)(t,e)}),{shape:i[o],color:r,size:i[s]});l.default.call(this,c),e.addOverlay(c)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(4),n(2)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=a(n),s=a(i);e.default={name:"bm-polygon",render:function(){},mixins:[(0,r.default)("overlay")],props:{path:{type:Array,default:function(){return[]}},strokeColor:{type:String},strokeWeight:{type:Number},strokeOpacity:{type:Number},strokeStyle:{type:String},fillColor:{type:String},fillOpacity:{type:Number},massClear:{type:Boolean,default:!0},clicking:{type:Boolean,default:!0},editing:{type:Boolean,default:!1}},watch:{path:{handler:function(t,e){this.reload()},deep:!0},strokeColor:function(t){this.originInstance.setStrokeColor(t)},strokeOpacity:function(t){this.originInstance.setStrokeOpacity(t)},strokeWeight:function(t){this.originInstance.setStrokeOpacity(t)},strokeStyle:function(t){this.originInstance.setStrokeStyle(t)},fillColor:function(t){this.originInstance.setFillColor(t)},fillOpacity:function(t){this.originInstance.setFillOpacity(t)},editing:function(t){t?this.originInstance.enableEditing():this.originInstance.disableEditing()},massClear:function(t){t?this.originInstance.enableMassClear():this.originInstance.disableMassClear()},clicking:function(t){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.path,i=this.strokeColor,a=this.strokeWeight,r=this.strokeOpacity,l=this.strokeStyle,c=this.fillColor,u=this.fillOpacity,h=this.editing,p=this.massClear,d=this.clicking,f=new t.Polygon(n.map(function(e){return(0,o.createPoint)(t,{lng:e.lng,lat:e.lat})}),{strokeColor:i,strokeWeight:a,strokeOpacity:r,strokeStyle:l,fillColor:c,fillOpacity:u,enableMassClear:p,enableClicking:d});this.originInstance=f,e.addOverlay(f),s.default.call(this,f),h?f.enableEditing():f.disableEditing()}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(1),n(4),n(2)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(e,"__esModule",{value:!0});var r=a(n),s=a(i);e.default={name:"bm-polyline",render:function(){},mixins:[(0,r.default)("overlay")],props:{path:{type:Array},strokeColor:{type:String},strokeWeight:{type:Number},strokeOpacity:{type:Number},strokeStyle:{type:String},massClear:{type:Boolean,default:!0},clicking:{type:Boolean,default:!0},editing:{type:Boolean,default:!1}},watch:{path:{handler:function(t,e){this.reload()},deep:!0},strokeColor:function(t){this.originInstance.setStrokeColor(t)},strokeOpacity:function(t){this.originInstance.setStrokeOpacity(t)},strokeWeight:function(t){this.originInstance.setStrokeOpacity(t)},strokeStyle:function(t){this.originInstance.setStrokeStyle(t)},editing:function(t){t?this.originInstance.enableEditing():this.originInstance.disableEditing()},massClear:function(t){t?this.originInstance.enableMassClear():this.originInstance.disableMassClear()},clicking:function(t){this.reload()}},methods:{load:function(){var t=this.BMap,e=this.map,n=this.path,i=this.strokeColor,a=this.strokeWeight,r=this.strokeOpacity,l=this.strokeStyle,c=this.editing,u=this.massClear,h=this.clicking,p=new t.Polyline(n.map(function(e){return(0,o.createPoint)(t,{lng:e.lng,lat:e.lat})}),{strokeColor:i,strokeWeight:a,strokeOpacity:r,strokeStyle:l,enableEditing:c,enableMassClear:u,enableClicking:h});this.originInstance=p,e.addOverlay(p),s.default.call(this,p)}}},t.exports=e.default})},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(2),n(5),n(1)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(o);e.default={name:"bm-bus",mixins:[(0,a.default)("search")],props:{location:{type:[Object,String]},keyword:{type:String},panel:{type:Boolean,default:!0},pageCapacity:{type:Number},autoViewport:{type:Boolean},selectFirstResult:{type:Boolean}},watch:{location:{handler:function(t){var e=this.originInstance,n=this.map;e.setLocation(t||n)},deep:!0},keyword:function(t){this.search(t)},panel:function(){this.reload()},autoViewport:function(t){this.reload()},selectFirstResult:function(t){this.reload()}},methods:{search:function(t){this.originInstance.getBusList(t)},load:function(){var t=this,e=this.location,o=this.selectFirstResult,a=this.autoViewport,r=this.highlightMode,s=this.keyword,l=this.search,c=this.BMap,u=this.map,h=this.originInstance,p=e?(0,i.isPoint)(e)?(0,n.createPoint)(c,e):e:u,d=this.originInstance=new c.BusLineSearch(p,{renderOptions:{map:u,panel:this.$el,selectFirstResult:o,autoViewport:a,highlightMode:r},onGetBusListComplete:function(e){h&&h!==d&&h.clearResults(),t.$emit("getbuslistcomplete",e)},onGetBusLineComplete:function(e){h&&h!==d&&h.clearResults(),t.$emit("getbuslinecomplete",e)},onBusListHtmlSet:function(e){t.$emit("buslisthtmlset",e)},onBusLineHtmlSet:function(e){t.$emit("buslinehtmlset",e)},onMarkersSet:function(e){t.$emit("markersset",e)},onPolylinesSet:function(e){t.$emit("polylinesset",e)}});l(s)}}},t.exports=e.default})},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(2),n(5),n(1)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(a);e.default={name:"bm-driving",mixins:[(0,r.default)("search")],props:{location:{type:[Object,String]},start:{type:[Object,String]},end:{type:[Object,String]},startCity:{type:[String,Number]},endCity:{type:[String,Number]},waypoints:{type:Array},policy:{type:String},panel:{type:Boolean,default:!0},autoViewport:{type:Boolean},selectFirstResult:{type:Boolean}},watch:{location:{handler:function(t){var e=this.originInstance,n=this.map;e.setLocation(t||n)},deep:!0},start:{handler:function(t){var e=this.originInstance,n=this.end,i=this.startCity,a=this.endCity,r=this.waypoints,s=this.BMap,l=this.getWaypoints;e.search((0,o.getPosition)(s,t),(0,o.getPosition)(s,n),{startCity:i,endCity:a,waypoints:l(r)})},deep:!0},end:{handler:function(t){var e=this.originInstance,n=this.start,i=this.startCity,a=this.endCity,r=this.waypoints,s=this.BMap,l=this.getWaypoints;e.search((0,o.getPosition)(s,n),(0,o.getPosition)(s,t),{startCity:i,endCity:a,waypoints:l(r)})},deep:!0},startCity:function(t){var e=this.originInstance,n=this.start,i=this.end,o=this.endCity,a=this.waypoints,r=this.getWaypoints;e.search(n,i,{val:t,endCity:o,waypoints:r(a)})},endCity:function(t){var e=this.originInstance,n=this.start,i=this.end,o=this.startCity,a=this.waypoints,r=this.getWaypoints;e.search(n,i,{startCity:o,val:t,waypoints:r(a)})},waypoints:{handler:function(t){var e=this.originInstance,n=this.start,i=this.end,o=this.startCity,a=this.endCity,r=this.getWaypoints;e.search(n,i,{startCity:o,endCity:a,waypoints:r(t)})},deep:!0},panel:function(){this.reload()},policy:function(t){this.reload()},autoViewport:function(){this.reload()},selectFirstResult:function(){this.reload()},highlightMode:function(){this.reload()}},methods:{search:function(t,e,n){var i=n.startCity,o=n.endCity,a=n.waypoints,r=this.originInstance,s=this.getWaypoints;r.search(t,e,{startCity:i,endCity:o,waypoints:s(a)})},getWaypoints:function(t){var e=this.BMap;if(t)return t.map(function(t){return(0,o.getPosition)(e,t)})},load:function(){var t=this,e=this.map,a=this.BMap,r=this.location,s=this.policy,l=this.selectFirstResult,c=this.autoViewport,u=this.highlightMode,h=this.search,p=this.start,d=this.end,f=this.startCity,m=this.endCity,g=this.waypoints,y=this.originInstance,v=this.getWaypoints,_=r?(0,o.isPoint)(r)?(0,n.createPoint)(a,r):r:e,b=this.originInstance=new a.DrivingRoute(_,{renderOptions:{map:e,panel:this.$el,selectFirstResult:l,autoViewport:c,highlightMode:u},policy:i[s],onSearchComplete:function(e){y&&y!==b&&y.clearResults(),t.$emit("searchcomplete",e)},onMarkersSet:function(e){t.$emit("markersset",e)},onInfoHtmlSet:function(e){t.$emit("infohtmlset",e)},onPolylinesSet:function(e){t.$emit("polylinesset",e)},onResultsHtmlSet:function(e){t.$emit("resultshtmlset",e)}});h((0,o.getPosition)(a,p),(0,o.getPosition)(a,d),{startCity:f,endCity:m,waypoints:v(g)})}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(2),n(5),n(1)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(o);e.default={name:"bm-local-search",mixins:[(0,a.default)("search")],props:{location:{type:[Object,String]},keyword:{type:[Array,String]},panel:{type:Boolean,default:!0},forceLocal:{type:Boolean},customData:{type:Object},bounds:{type:Object},nearby:{type:Object},pageCapacity:{type:Number},autoViewport:{type:Boolean},selectFirstResult:{type:Boolean}},watch:{location:{handler:function(t){var e=this.originInstance,n=this.search;e.setLocation(t||this.map),n()},deep:!0},keyword:function(){this.search()},bounds:{handler:function(t){(0,this.searchInBounds)(t)},deep:!0},nearby:{handler:function(t){(0,this.searchNearby)(t)},deep:!0},forceLocal:function(){this.reload()},customData:{deep:!0,handler:function(){this.reload()}},pageCapacity:function(t){this.originInstance&&this.originInstance.setPageCapacity(t)},autoViewport:function(t){this.originInstance&&(t?this.originInstance.enableAutoViewport():this.originInstance.disableAutoViewport())},selectFirstResult:function(t){this.originInstance&&(t?this.originInstance.enableFirstResultSelection():this.originInstance.disableFirstResultSelection())},highlightMode:function(){this.reload()}},methods:{searchNearby:function(t){var e=this.originInstance,i=this.keyword,o=this.customData,a=this.BMap;e.searchNearby(i,(0,n.createPoint)(a,t.center),t.radius,o)},searchInBounds:function(t){var e=this.originInstance,i=this.keyword,o=this.customData,a=this.BMap;e.searchInBounds(i,(0,n.createBounds)(a,t),o)},search:function(){var t=this.originInstance,e=this.keyword,n=this.forceLocal,i=this.customData,o=this.nearby,a=this.bounds,r=this.searchNearby,s=this.searchInBounds;o?r(o):a?s(a):t.search(e,{forceLocal:n,customData:i})},load:function(){var t=this,e=this.map,o=this.BMap,a=this.search,r=this.pageCapacity,s=this.autoViewport,l=this.selectFirstResult,c=this.highlightMode,u=this.location,h=this.originInstance,p=u?(0,i.isPoint)(u)?(0,n.createPoint)(o,u):u:e,d=this.originInstance=new o.LocalSearch(p,{onMarkersSet:function(e){t.$emit("markersset",e)},onInfoHtmlSet:function(e){t.$emit("infohtmlset",e)},onResultsHtmlSet:function(e){t.$emit("resultshtmlset",e)},onSearchComplete:function(e){h&&h!==d&&h.clearResults(),t.$emit("searchcomplete",e)},pageCapacity:r,renderOptions:{map:e,panel:this.$el,selectFirstResult:l,autoViewport:s,highlightMode:c}});a()}}},t.exports=e.default})},function(t,e,n){(function(i){var o,a,r;!function(i,s){a=[t,e,n(2),n(5),n(1)],o=s,void 0!==(r="function"==typeof o?o.apply(e,a):o)&&(t.exports=r)}(0,function(t,e,n,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(a);e.default={name:"bm-transit",mixins:[(0,r.default)("search")],props:{location:{type:[Object,String]},start:{type:[Object,String]},end:{type:[Object,String]},panel:{type:Boolean,default:!0},policy:{type:String},pageCapacity:{type:Number},autoViewport:{type:Boolean},selectFirstResult:{type:Boolean}},watch:{location:{handler:function(t){var e=this.originInstance,n=this.map;e.setLocation(t||n)},deep:!0},start:{handler:function(t){var e=this.originInstance,n=this.end,i=this.BMap;e.search((0,o.getPosition)(i,t),(0,o.getPosition)(i,n))},deep:!0},end:{handler:function(t){var e=this.originInstance,n=this.start,i=this.BMap;e.search((0,o.getPosition)(i,n),(0,o.getPosition)(i,t))},deep:!0},panel:function(){this.reload()},policy:function(t){this.originInstance.setPolicy(i[t])},pageCapacity:function(t){this.originInstance&&this.originInstance.setPageCapacity(t)},autoViewport:function(t){this.originInstance&&(t?this.originInstance.enableAutoViewport():this.originInstance.disableAutoViewport())},selectFirstResult:function(){this.reload()},highlightMode:function(){this.reload()}},methods:{search:function(t,e){this.originInstance.search(t,e)},load:function(){var t=this,e=this.map,a=this.BMap,r=this.location,s=this.policy,l=this.pageCapacity,c=this.selectFirstResult,u=this.autoViewport,h=this.highlightMode,p=this.search,d=this.start,f=this.end,m=this.originInstance,g=r?(0,o.isPoint)(r)?(0,n.createPoint)(a,r):r:e,y=this.originInstance=new a.TransitRoute(g,{renderOptions:{map:e,panel:this.$el,selectFirstResult:c,autoViewport:u,highlightMode:h},policy:i[s],pageCapacity:l,onSearchComplete:function(e){m&&m!==y&&m.clearResults(),t.$emit("searchcomplete",e)},onMarkersSet:function(e){t.$emit("markersset",e)},onInfoHtmlSet:function(e){t.$emit("infohtmlset",e)},onPolylinesSet:function(e){t.$emit("polylinesset",e)},onResultsHtmlSet:function(e){t.$emit("resultshtmlset",e)}});p((0,o.isPoint)(d)?(0,n.createPoint)(a,d):d,(0,o.isPoint)(f)?(0,n.createPoint)(a,f):f)}}},t.exports=e.default})}).call(e,n(3))},function(t,e,n){var i,o,a;!function(r,s){o=[t,e,n(2),n(5),n(1)],i=s,void 0!==(a="function"==typeof i?i.apply(e,o):i)&&(t.exports=a)}(0,function(t,e,n,i,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=function(t){return t&&t.__esModule?t:{default:t}}(o);e.default={name:"bm-walking",mixins:[(0,a.default)("search")],props:{location:{type:[Object,String]},start:{type:[Object,String]},end:{type:[Object,String]},panel:{type:Boolean,default:!0},pageCapacity:{type:Number},autoViewport:{type:Boolean},selectFirstResult:{type:Boolean}},watch:{location:{handler:function(t){var e=this.originInstance,n=this.map;e.setLocation(t||n)},deep:!0},start:{handler:function(t){var e=this.originInstance,n=this.end,o=this.BMap;e.search((0,i.getPosition)(o,t),(0,i.getPosition)(o,n))},deep:!0},end:{handler:function(t){var e=this.originInstance,n=this.start,o=this.BMap;e.search((0,i.getPosition)(o,n),(0,i.getPosition)(o,t))},deep:!0},panel:function(){this.reload()},autoViewport:function(t){this.reload()},selectFirstResult:function(t){this.reload()},highlightMode:function(){this.reload()}},methods:{search:function(t,e){this.originInstance.search(t,e)},load:function(){var t=this,e=this.map,o=this.BMap,a=this.location,r=this.selectFirstResult,s=this.autoViewport,l=this.highlightMode,c=this.search,u=this.start,h=this.end,p=this.originInstance,d=a?(0,i.isPoint)(a)?(0,n.createPoint)(o,a):a:e,f=this.originInstance=new o.WalkingRoute(d,{renderOptions:{map:e,panel:this.$el,selectFirstResult:r,autoViewport:s,highlightMode:l},onSearchComplete:function(e){p&&p!==f&&p.clearResults(),t.$emit("searchcomplete",e)},onMarkersSet:function(e){t.$emit("markersset",e)},onInfoHtmlSet:function(e){t.$emit("infohtmlset",e)},onPolylinesSet:function(e){t.$emit("polylinesset",e)},onResultsHtmlSet:function(e){t.$emit("resultshtmlset",e)}});c((0,i.isPoint)(u)?(0,n.createPoint)(o,u):u,(0,i.isPoint)(h)?(0,n.createPoint)(o,h):h)}}},t.exports=e.default})},function(t,e,n){!function(e,n){t.exports=n()}(0,function(){function t(t,n){try{BMap}catch(t){throw Error("Baidu Map JS API is not ready yet!")}var i=e(t),o=new BMap.Polyline(i,n);return o.addEventListener("lineupdate",function(){this.isEditing&&this.enableEditing()}),o.cornerPoints=t,o.editMarkers=[],o.enableEditing=function(){var t=this;if(t.map){t.disableEditing();for(var n=0;n<t.cornerPoints.length;n++){var i=new BMap.Marker(t.cornerPoints[n],{icon:new BMap.Icon("http://api.map.baidu.com/library/CurveLine/1.5/src/circle.png",new BMap.Size(16,16)),enableDragging:!0,raiseOnDrag:!0});i.addEventListener("dragend",function(){t.cornerPoints.length=0;for(var n=0;n<t.editMarkers.length;n++)t.cornerPoints.push(t.editMarkers[n].getPosition());var i=e(t.cornerPoints);t.setPath(i)}),i.index=n,t.editMarkers.push(i),t.map.addOverlay(i)}}t.isEditing=!0},o.disableEditing=function(){this.isEditing=!1;for(var t=0;t<this.editMarkers.length;t++)this.map.removeOverlay(this.editMarkers[t]),this.editMarkers[t]=null;this.editMarkers.length=0},o.getPath=function(){return i},o}function e(t){for(var e=[],i=0;i<t.length-1;i++){var o=n(t[i],t[i+1]);o&&o.length>0&&(e=e.concat(o))}return e}function n(t,e){var n=[];if(!(t&&e&&t instanceof BMap.Point&&e instanceof BMap.Point))return null;var i,o,a,r,s,l,c=function(t){return 1-2*t+t*t},u=function(t){return 2*t-2*t*t},h=function(t){return t*t},p=0,d=0;if(void 0===e)return void(void 0!==n&&(n=[]));var f=parseFloat(t.lat),m=parseFloat(e.lat),g=parseFloat(t.lng),y=parseFloat(e.lng);for(y>g&&parseFloat(y-g)>180&&g<0&&(g=parseFloat(360+g)),g>y&&parseFloat(g-y)>180&&y<0&&(y=parseFloat(360+y)),0,l=0,m==f?(i=0,o=g-y):y==g?(i=Math.PI/2,o=f-m):(i=Math.atan((m-f)/(y-g)),o=(m-f)/Math.sin(i)),0==l&&(l=i+Math.PI/5),a=o/2,s=a*Math.cos(l)+g,r=a*Math.sin(l)+f,p=0;p<31;p++)n.push(new BMap.Point(g*c(d)+s*u(d)+y*h(d),f*c(d)+r*u(d)+m*h(d))),d+=1/30;return n}return t})},function(t,e,n){!function(e,n){t.exports=n()}(0,function(){function t(t,e,n){var i,o,a=t.prototype,r=new Function;r.prototype=e.prototype,o=t.prototype=new r;for(i in a)o[i]=a[i];t.prototype.constructor=t,t.superClass=e.prototype,"string"==typeof n&&(o._className=n)}var e=function(){var t=function(t){var e={data:[],heatmap:t};this.max=1,this.get=function(t){return e[t]},this.set=function(t,n){e[t]=n}};t.prototype={addDataPoint:function(t,e){if(!(t<0||e<0)){var n=this,i=n.get("heatmap"),o=n.get("data");if(o[t]||(o[t]=[]),o[t][e]||(o[t][e]=0),o[t][e]+=arguments.length<3?1:arguments[2],n.set("data",o),n.max<o[t][e])return i.get("actx").clearRect(0,0,i.get("width"),i.get("height")),void n.setDataSet({max:o[t][e],data:o},!0);i.drawAlpha(t,e,o[t][e],!0)}},setDataSet:function(t,e){var n=this,i=n.get("heatmap"),o=[],a=t.data,r=a.length;if(i.clear(),this.max=t.max,i.get("legend")&&i.get("legend").update(t.max),null!=e&&e){for(var s in a)if(void 0!==s)for(var l in a[s])void 0!==l&&i.drawAlpha(s,l,a[s][l],!1)}else for(;r--;){var c=a[r];i.drawAlpha(c.x,c.y,c.count,!1),o[c.x]||(o[c.x]=[]),o[c.x][c.y]||(o[c.x][c.y]=0),o[c.x][c.y]=c.count}i.colorize(),this.set("data",a)},exportDataSet:function(){var t=this,e=t.get("data"),n=[];for(var i in e)if(void 0!==i)for(var o in e[i])void 0!==o&&n.push({x:parseInt(i,10),y:parseInt(o,10),count:e[i][o]});return{max:t.max,data:n}},generateRandomDataSet:function(t){var e=this.get("heatmap"),n=e.get("width"),i=e.get("height"),o={},a=Math.floor(1e3*Math.random()+1);o.max=a;for(var r=[];t--;)r.push({x:Math.floor(Math.random()*n+1),y:Math.floor(Math.random()*i+1),count:Math.floor(Math.random()*a+1)});o.data=r,this.setDataSet(o)}};var e=function(t){this.config=t;var e={element:null,labelsEl:null,gradientCfg:null,ctx:null};this.get=function(t){return e[t]},this.set=function(t,n){e[t]=n},this.init()};e.prototype={init:function(){var t,e,n=this,i=n.config,o=i.title||"Legend",a=i.position,r=i.offset||10,s=(i.gradient,document.createElement("ul")),l="";n.processGradientObject(),a.indexOf("t")>-1?l+="top:"+r+"px;":l+="bottom:"+r+"px;",a.indexOf("l")>-1?l+="left:"+r+"px;":l+="right:"+r+"px;",t=document.createElement("div"),t.style.cssText="border-radius:5px;position:absolute;"+l+"font-family:Helvetica; width:256px;z-index:10000000000; background:rgba(255,255,255,1);padding:10px;border:1px solid black;margin:0;",t.innerHTML="<h3 style=\'padding:0;margin:0;text-align:center;font-size:16px;\'>"+o+"</h3>",s.style.cssText="position:relative;font-size:12px;display:block;list-style:none;list-style-type:none;margin:0;height:15px;",e=document.createElement("div"),e.style.cssText=["position:relative;display:block;width:256px;height:15px;border-bottom:1px solid black; background-image:url(",n.createGradientImage(),");"].join(""),t.appendChild(s),t.appendChild(e),n.set("element",t),n.set("labelsEl",s),n.update(1)},processGradientObject:function(){var t=this,e=this.config.gradient,n=[];for(var i in e)e.hasOwnProperty(i)&&n.push({stop:i,value:e[i]});n.sort(function(t,e){return t.stop-e.stop}),n.unshift({stop:0,value:"rgba(0,0,0,0)"}),t.set("gradientArr",n)},createGradientImage:function(){var t,e=this,n=e.get("gradientArr"),i=n.length,o=document.createElement("canvas"),a=o.getContext("2d");o.width="256",o.height="15",t=a.createLinearGradient(0,5,256,10);for(var r=0;r<i;r++)t.addColorStop(1/(i-1)*r,n[r].value);a.fillStyle=t,a.fillRect(0,5,256,10),a.strokeStyle="black",a.beginPath();for(var r=0;r<i;r++)a.moveTo(.5+(1/(i-1)*r*256>>0),0),a.lineTo(.5+(1/(i-1)*r*256>>0),0==r?15:5);return a.moveTo(255.5,0),a.lineTo(255.5,15),a.moveTo(255.5,4.5),a.lineTo(0,4.5),a.stroke(),e.set("ctx",a),o.toDataURL()},getElement:function(){return this.get("element")},update:function(t){for(var e,n,i=this,o=i.get("gradientArr"),a=i.get("ctx"),r=i.get("labelsEl"),s="",l=0;l<o.length;l++)e=t*o[l].stop>>0,n=a.measureText(e).width/2>>0,0==l&&(n=0),l==o.length-1&&(n*=2),s+=\'<li style="position:absolute;left:\'+(((1/(o.length-1)*l*256||0)>>0)-n+.5)+\'px">\'+e+"</li>";r.innerHTML=s}};var n=function(e){var n={radius:40,element:{},canvas:{},acanvas:{},ctx:{},actx:{},legend:null,visible:!0,width:0,height:0,max:!1,gradient:!1,opacity:180,premultiplyAlpha:!1,bounds:{l:1e3,r:0,t:1e3,b:0},debug:!1};this.store=new t(this),this.get=function(t){return n[t]},this.set=function(t,e){n[t]=e},this.configure(e),this.init()};return n.prototype={configure:function(t){var n=this;if(n.set("radius",t.radius||40),n.set("element",t.element instanceof Object?t.element:document.getElementById(t.element)),n.set("visible",null==t.visible||t.visible),n.set("max",t.max||!1),n.set("gradient",t.gradient||{.45:"rgb(0,0,255)",.55:"rgb(0,255,255)",.65:"rgb(0,255,0)",.95:"yellow",1:"rgb(255,0,0)"}),n.set("opacity",parseInt(255/(100/t.opacity),10)||180),n.set("width",t.width||0),n.set("height",t.height||0),n.set("debug",t.debug),t.legend){var i=t.legend;i.gradient=n.get("gradient"),n.set("legend",new e(i))}},resize:function(){var t=this,e=t.get("element"),n=t.get("canvas"),i=t.get("acanvas");n.width=i.width=t.get("width")||e.style.width.replace(/px/,"")||t.getWidth(e),this.set("width",n.width),n.height=i.height=t.get("height")||e.style.height.replace(/px/,"")||t.getHeight(e),this.set("height",n.height)},init:function(){var t=this,e=document.createElement("canvas"),n=document.createElement("canvas"),i=e.getContext("2d"),o=n.getContext("2d"),a=t.get("element");t.initColorPalette(),t.set("canvas",e),t.set("ctx",i),t.set("acanvas",n),t.set("actx",o),t.resize(),e.style.cssText=n.style.cssText="position:absolute;top:0;left:0;z-index:10000000;",t.get("visible")||(e.style.display="none"),a.appendChild(e),t.get("legend")&&a.appendChild(t.get("legend").getElement()),t.get("debug")&&document.body.appendChild(n),o.shadowOffsetX=15e3,o.shadowOffsetY=15e3,o.shadowBlur=15},initColorPalette:function(){var t,e,n,i=this,o=document.createElement("canvas"),a=i.get("gradient");o.width="1",o.height="256",t=o.getContext("2d"),e=t.createLinearGradient(0,0,1,256),n=t.getImageData(0,0,1,1),n.data[0]=n.data[3]=64,n.data[1]=n.data[2]=0,t.putImageData(n,0,0),n=t.getImageData(0,0,1,1),i.set("premultiplyAlpha",n.data[0]<60||n.data[0]>70);for(var r in a)e.addColorStop(r,a[r]);t.fillStyle=e,t.fillRect(0,0,1,256),i.set("gradient",t.getImageData(0,0,1,256).data)},getWidth:function(t){var e=t.offsetWidth;return t.style.paddingLeft&&(e+=t.style.paddingLeft),t.style.paddingRight&&(e+=t.style.paddingRight),e},getHeight:function(t){var e=t.offsetHeight;return t.style.paddingTop&&(e+=t.style.paddingTop),t.style.paddingBottom&&(e+=t.style.paddingBottom),e},colorize:function(t,e){var n,i,o,a,r,s,l,c,u,h=this,p=h.get("width"),d=h.get("radius"),f=h.get("height"),m=h.get("actx"),g=h.get("ctx"),y=3*d,v=h.get("premultiplyAlpha"),_=h.get("gradient"),b=h.get("opacity"),x=h.get("bounds");null!=t&&null!=e?(t+y>p&&(t=p-y),t<0&&(t=0),e<0&&(e=0),e+y>f&&(e=f-y),n=t,i=e,a=t+y,o=e+y):(n=x.l<0?0:x.l,a=x.r>p?p:x.r,i=x.t<0?0:x.t,o=x.b>f?f:x.b),r=m.getImageData(n,i,a-n,o-i),s=r.data.length;for(var w=3;w<s;w+=4)l=r.data[w],c=4*l,c&&(u=l<b?l:b,r.data[w-3]=_[c],r.data[w-2]=_[c+1],r.data[w-1]=_[c+2],v&&(r.data[w-3]/=255/u,r.data[w-2]/=255/u,r.data[w-1]/=255/u),r.data[w]=u);g.putImageData(r,n,i)},drawAlpha:function(t,e,n,i){var o=this,a=o.get("radius"),r=o.get("actx"),s=(o.get("max"),o.get("bounds")),l=t-1.5*a>>0,c=e-1.5*a>>0,u=t+1.5*a>>0,h=e+1.5*a>>0;r.shadowColor="rgba(0,0,0,"+(n?n/o.store.max:"0.1")+")",r.shadowOffsetX=15e3,r.shadowOffsetY=15e3,r.shadowBlur=15,r.beginPath(),r.arc(t-15e3,e-15e3,a,0,2*Math.PI,!0),r.closePath(),r.fill(),i?o.colorize(l,c):(l<s.l&&(s.l=l),c<s.t&&(s.t=c),u>s.r&&(s.r=u),h>s.b&&(s.b=h))},toggleDisplay:function(){var t=this,e=t.get("visible"),n=t.get("canvas");n.style.display=e?"none":"block",t.set("visible",!e)},getImageData:function(){return this.get("canvas").toDataURL()},clear:function(){var t=this,e=t.get("width"),n=t.get("height");t.store.set("data",[]),t.get("ctx").clearRect(0,0,e,n),t.get("actx").clearRect(0,0,e,n)},cleanup:function(){var t=this;t.get("element").removeChild(t.get("canvas"))}},{create:function(t){return new n(t)},util:{mousePosition:function(t){var e,n;if(t.layerX?(e=t.layerX,n=t.layerY):t.offsetX&&(e=t.offsetX,n=t.offsetY),void 0!==e)return[e,n]}}}}(),n=function(e){try{BMap}catch(t){throw Error("Baidu Map JS API is not ready yet!")}if(!n._isExtended){n._isExtended=!0,t(n,BMap.Overlay,"HeatmapOverlay");var i=new n(e);this.__proto__=i.__proto__}this.conf=e,this.heatmap=null,this.latlngs=[],this.bounds=null,this._moveendHandler=this._moveendHandler.bind(this)};return n.prototype.initialize=function(t){this._map=t;var n=document.createElement("div");return n.style.position="absolute",n.style.top=0,n.style.left=0,n.style.border=0,n.style.width=this._map.getSize().width+"px",n.style.height=this._map.getSize().height+"px",this.conf.element=n,t.getPanes().mapPane.appendChild(n),this.heatmap=e.create(this.conf),this._div=n,n},n.prototype.draw=function(){var t=this._map.getBounds();if(!t.equals(this.bounds)){this.bounds=t;var e=this._map.pointToOverlayPixel(t.getNorthEast()),n=this._map.pointToOverlayPixel(t.getSouthWest());if(e&&n){var i=e.y,o=n.x,a=n.y-e.y,r=e.x-n.x;if(this.conf.element.style.left=o+"px",this.conf.element.style.top=i+"px",this.conf.element.style.width=r+"px",this.conf.element.style.height=a+"px",this.heatmap.store.get("heatmap").resize(),this.latlngs.length>0){this.heatmap.clear();for(var s=this.latlngs.length,l={max:this.heatmap.store.max,data:[]};s--;){var c=this.latlngs[s].latlng;if(t.containsPoint(c)){var u=this._map.pointToOverlayPixel(c),h=new BMap.Pixel(u.x-o,u.y-i),p=this.pixelTransform(h);l.data.push({x:p.x,y:p.y,count:this.latlngs[s].c})}}this.heatmap.store.setDataSet(l)}}}},n.prototype.pixelTransform=function(t){for(var e=this.heatmap.get("width"),n=this.heatmap.get("height");t.x<0;)t.x+=e;for(;t.x>e;)t.x-=e;for(;t.y<0;)t.y+=n;for(;t.y>n;)t.y-=n;return t.x=t.x>>0,t.y=t.y>>0,t},n.prototype._moveendHandler=function(t){this.setDataSet(this._data),delete this._data,this._map.removeEventListener("moveend",this._moveendHandler)},n.prototype.setDataSet=function(t){if(this._map){var e=this._map.getBounds(),n=this._map.pointToOverlayPixel(e.getNorthEast()),i=this._map.pointToOverlayPixel(e.getSouthWest());n&&i||(this._data=t,this._map.addEventListener("moveend",this._moveendHandler));var o={max:t.max,data:[]},a=t.data,r=a.length;for(this.latlngs=[];r--;){var s=new BMap.Point(a[r].lng,a[r].lat);if(this.latlngs.push({latlng:s,c:a[r].count}),e.containsPoint(s)){var l=this._map.pointToOverlayPixel(s),c=this._map.pointToOverlayPixel(e.getSouthWest()).x,u=this._map.pointToOverlayPixel(e.getNorthEast()).y,h=new BMap.Pixel(l.x-c,l.y-u),p=this.pixelTransform(h);o.data.push({x:p.x,y:p.y,count:a[r].count})}}this.heatmap.clear(),this.heatmap.store.setDataSet(o)}},n.prototype.addDataPoint=function(t,e,n){var i=new BMap.Point(t,e),o=this.pixelTransform(this._map.pointToOverlayPixel(i));this.heatmap.store.addDataPoint(o.x,o.y,n),this.latlngs.push({latlng:i,c:n})},n.prototype.toggle=function(){this.heatmap.toggleDisplay()},n})},function(t,e,n){!function(e,n){t.exports=n()}(0,function(){function t(t,e){this._point=t,this._html=e}function e(){t.prototype=new BMap.Overlay,t.prototype.initialize=function(t){var e=this._div=n.dom.create("div",{style:"border:solid 1px #ccc;width:auto;min-width:50px;text-align:center;position:absolute;background:#fff;color:#000;font-size:12px;border-radius: 10px;padding:5px;white-space: nowrap;"});return e.innerHTML=this._html,t.getPanes().floatPane.appendChild(e),this._map=t,e},t.prototype.draw=function(){this.setPosition(this.lushuMain._marker.getPosition(),this.lushuMain._marker.getIcon().size)},n.object.extend(t.prototype,{setPosition:function(t,e){var i=this._map.pointToOverlayPixel(t),o=n.dom.getStyle(this._div,"width"),a=n.dom.getStyle(this._div,"height"),r=parseInt(this._div.clientWidth||o,10);parseInt(this._div.clientHeight||a,10);this._div.style.left=i.x-r/2+"px",this._div.style.bottom=-(i.y-e.height)+"px"},setHtml:function(t){this._div.innerHTML=t},setRelatedClass:function(t){this.lushuMain=t}})}var n={};n.dom={},n.dom.g=function(t){return"string"==typeof t||t instanceof String?document.getElementById(t):t&&t.nodeName&&(1==t.nodeType||9==t.nodeType)?t:null},n.g=n.G=n.dom.g,n.lang=n.lang||{},n.lang.isString=function(t){return"[object String]"==Object.prototype.toString.call(t)},n.isString=n.lang.isString,n.dom._g=function(t){return n.lang.isString(t)?document.getElementById(t):t},n._g=n.dom._g,n.dom.getDocument=function(t){return t=n.dom.g(t),9==t.nodeType?t:t.ownerDocument||t.document},n.browser=n.browser||{},n.browser.ie=n.ie=/msie (\\d+\\.\\d+)/i.test(navigator.userAgent)?document.documentMode||+RegExp.$1:void 0,n.dom.getComputedStyle=function(t,e){t=n.dom._g(t);var i,o=n.dom.getDocument(t);return o.defaultView&&o.defaultView.getComputedStyle&&(i=o.defaultView.getComputedStyle(t,null))?i[e]||i.getPropertyValue(e):""},n.dom._styleFixer=n.dom._styleFixer||{},n.dom._styleFilter=n.dom._styleFilter||[],n.dom._styleFilter.filter=function(t,e,i){for(var o,a=0,r=n.dom._styleFilter;o=r[a];a++)(o=o[i])&&(e=o(t,e));return e},n.string=n.string||{},n.string.toCamelCase=function(t){return t.indexOf("-")<0&&t.indexOf("_")<0?t:t.replace(/[-_][^-_]/g,function(t){return t.charAt(1).toUpperCase()})},n.dom.getStyle=function(t,e){var i=n.dom;t=i.g(t),e=n.string.toCamelCase(e);var o=t.style[e]||(t.currentStyle?t.currentStyle[e]:"")||i.getComputedStyle(t,e);if(!o){var a=i._styleFixer[e];a&&(o=a.get?a.get(t):n.dom.getStyle(t,a))}return(a=i._styleFilter)&&(o=a.filter(e,o,"get")),o},n.getStyle=n.dom.getStyle,n.dom._NAME_ATTRS=function(){var t={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",rowspan:"rowSpan",valign:"vAlign",usemap:"useMap",frameborder:"frameBorder"};return n.browser.ie<8?(t.for="htmlFor",t.class="className"):(t.htmlFor="for",t.className="class"),t}(),n.dom.setAttr=function(t,e,i){return t=n.dom.g(t),"style"==e?t.style.cssText=i:(e=n.dom._NAME_ATTRS[e]||e,t.setAttribute(e,i)),t},n.setAttr=n.dom.setAttr,n.dom.setAttrs=function(t,e){t=n.dom.g(t);for(var i in e)n.dom.setAttr(t,i,e[i]);return t},n.setAttrs=n.dom.setAttrs,n.dom.create=function(t,e){var i=document.createElement(t),o=e||{};return n.dom.setAttrs(i,o)},n.object=n.object||{},n.extend=n.object.extend=function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t};var i=function(t,e,n){try{BMap}catch(t){throw Error("Baidu Map JS API is not ready yet!")}!e||e.length<1||(this._map=t,this._path=e,this.i=0,this._setTimeoutQuene=[],this._projection=this._map.getMapType().getProjection(),this._opts={icon:null,speed:4e3,defaultContent:"",showInfoWindow:!1},this._setOptions(n),this._rotation=0,!this._opts.icon instanceof BMap.Icon&&(this._opts.icon=defaultIcon))};return i.prototype._setOptions=function(t){if(t)for(var e in t)t.hasOwnProperty(e)&&(this._opts[e]=t[e])},i.prototype.start=function(){var t=this,e=t._path.length;if(this._opts.onstart&&this._opts.onstart(t),t.i&&t.i<e-1){if(!t._fromPause)return;t._fromStop||t._moveNext(++t.i)}else!t._marker&&t._addMarker(),t._timeoutFlag=setTimeout(function(){!t._overlay&&t._addInfoWin(),t._moveNext(t.i)},400);this._fromPause=!1,this._fromStop=!1},i.prototype.stop=function(){this.i=0,this._fromStop=!0,clearInterval(this._intervalFlag),this._clearTimeout();for(var t=0,e=this._opts.landmarkPois,n=e.length;t<n;t++)e[t].bShow=!1;this._opts.onstop&&this._opts.onstop(this)},i.prototype.pause=function(){clearInterval(this._intervalFlag),this._fromPause=!0,this._clearTimeout(),this._opts.onpause&&this._opts.onpause(this)},i.prototype.hideInfoWindow=function(){this._opts.showInfoWindow=!1,this._overlay&&(this._overlay._div.style.visibility="hidden")},i.prototype.showInfoWindow=function(){this._opts.showInfoWindow=!0,this._overlay&&(this._overlay._div.style.visibility="visible")},i.prototype.dispose=function(){clearInterval(this._intervalFlag),this._setTimeoutQuene&&this._clearTimeout(),this._map&&(this._map.removeOverlay(this._overlay),this._map.removeOverlay(this._marker))},n.object.extend(i.prototype,{_addMarker:function(t){this._marker&&(this.stop(),this._map.removeOverlay(this._marker),clearTimeout(this._timeoutFlag)),this._overlay&&this._map.removeOverlay(this._overlay);var e=new BMap.Marker(this._path[0]);this._opts.icon&&e.setIcon(this._opts.icon),this._map.addOverlay(e),e.setAnimation(BMAP_ANIMATION_DROP),this._marker=e},_addInfoWin:function(){var n=this;!t.prototype.initialize&&e();var i=new t(n._marker.getPosition(),n._opts.defaultContent);i.setRelatedClass(this),this._overlay=i,this._map.addOverlay(i),this._opts.showInfoWindow?this.showInfoWindow():this.hideInfoWindow()},_getMercator:function(t){return this._map.getMapType().getProjection().lngLatToPoint(t)},_getDistance:function(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},_move:function(t,e,n){var i=this,o=0,a=this._opts.speed/100,r=this._projection.lngLatToPoint(t),s=this._projection.lngLatToPoint(e),l=Math.round(i._getDistance(r,s)/a);if(l<1)return void i._moveNext(++i.i);i._intervalFlag=setInterval(function(){if(o>=l){if(clearInterval(i._intervalFlag),i.i>i._path.length)return;i._moveNext(++i.i)}else{o++;var a=n(r.x,s.x,o,l),c=n(r.y,s.y,o,l),u=i._projection.pointToLngLat(new BMap.Pixel(a,c));if(1==o){var h=null;i.i-1>=0&&(h=i._path[i.i-1]),1==i._opts.enableRotation&&i.setRotation(h,t,e),i._opts.autoView&&(i._map.getBounds().containsPoint(u)||i._map.setCenter(u))}i._marker.setPosition(u),i._setInfoWin(u)}},10)},setRotation:function(t,e,n){var i=this,o=0;if(e=i._map.pointToPixel(e),n=i._map.pointToPixel(n),n.x!=e.x){var a=(n.y-e.y)/(n.x-e.x);o=360*Math.atan(a)/(2*Math.PI),o=n.x<e.x?90-o+90:-o,i._marker.setRotation(-o)}else{var r=n.y-e.y,s=0;s=r>0?-1:1,i._marker.setRotation(90*-s)}},linePixellength:function(t,e){return Math.sqrt(Math.abs(t.x-e.x)*Math.abs(t.x-e.x)+Math.abs(t.y-e.y)*Math.abs(t.y-e.y))},pointToPoint:function(t,e){return Math.abs(t.x-e.x)*Math.abs(t.x-e.x)+Math.abs(t.y-e.y)*Math.abs(t.y-e.y)},_moveNext:function(t){var e=this;t<this._path.length-1?e._move(e._path[t],e._path[t+1],e._tween.linear):e.stop()},_setInfoWin:function(t){var e=this;e._overlay.setPosition(t,e._marker.getIcon().size);var n=e._troughPointIndex(t);-1!=n?(clearInterval(e._intervalFlag),e._overlay.setHtml(e._opts.landmarkPois[n].html),e._overlay.setPosition(t,e._marker.getIcon().size),e._pauseForView(n)):e._overlay.setHtml(e._opts.defaultContent)},_pauseForView:function(t){var e=this,n=setTimeout(function(){e._moveNext(++e.i)},1e3*e._opts.landmarkPois[t].pauseTime);e._setTimeoutQuene.push(n)},_clearTimeout:function(){for(var t in this._setTimeoutQuene)clearTimeout(this._setTimeoutQuene[t]);this._setTimeoutQuene.length=0},_tween:{linear:function(t,e,n,i){return(e-t)*n/i+t}},_troughPointIndex:function(t){for(var e=this._opts.landmarkPois,n=0,i=e.length;n<i;n++)if(!e[n].bShow&&this._map.getDistance(new BMap.Point(e[n].lng,e[n].lat),t)<10)return e[n].bShow=!0,n;return-1}}),i})},function(t,e,n){(function(e){var i,o;!function(e,n){t.exports=n()}(0,function(){"use strict";function t(t){this._markerClusterer=t,this._map=t.getMap(),this._minClusterSize=t.getMinClusterSize(),this._isAverageCenter=t.isAverageCenter(),this._center=null,this._markers=[],this._gridBounds=null,this._isReal=!1,this._clusterMarker=new s(this._center,this._markers.length,{styles:this._markerClusterer.getStyles()})}var a="undefined"!=typeof window?window:void 0!==e?e:this,r=function(t,e){return e={exports:{}},t(e,e.exports,a),e.exports}(function(t,e,a){!function(a,r){"object"==typeof e?t.exports=r():(i=r,void 0!==(o="function"==typeof i?i.call(e,n,e,t):i)&&(t.exports=o))}(0,function(){var t,e=t=e||{version:"1.3.8"},n={};e.guid="$BAIDU$",n[e.guid]=n[e.guid]||{},e.dom=e.dom||{},e.dom.g=function(t){return"string"==typeof t||t instanceof String?document.getElementById(t):t&&t.nodeName&&(1==t.nodeType||9==t.nodeType)?t:null},e.g=e.G=e.dom.g,e.dom.getDocument=function(t){return t=e.dom.g(t),9==t.nodeType?t:t.ownerDocument||t.document},e.lang=e.lang||{},e.lang.isString=function(t){return"[object String]"==Object.prototype.toString.call(t)},e.isString=e.lang.isString,e.dom._g=function(t){return e.lang.isString(t)?document.getElementById(t):t},e._g=e.dom._g,e.browser=e.browser||{},/msie (\\d+\\.\\d)/i.test(navigator.userAgent)&&(e.browser.ie=e.ie=document.documentMode||+RegExp.$1),e.dom.getComputedStyle=function(t,n){t=e.dom._g(t);var i,o=e.dom.getDocument(t);return o.defaultView&&o.defaultView.getComputedStyle&&(i=o.defaultView.getComputedStyle(t,null))?i[n]||i.getPropertyValue(n):""},e.dom._styleFixer=e.dom._styleFixer||{},e.dom._styleFilter=e.dom._styleFilter||[],e.dom._styleFilter.filter=function(t,n,i){for(var o,a=0,r=e.dom._styleFilter;o=r[a];a++)(o=o[i])&&(n=o(t,n));return n},e.string=e.string||{},e.string.toCamelCase=function(t){return t.indexOf("-")<0&&t.indexOf("_")<0?t:t.replace(/[-_][^-_]/g,function(t){return t.charAt(1).toUpperCase()})},e.dom.getStyle=function(t,n){var i=e.dom;t=i.g(t),n=e.string.toCamelCase(n);var o=t.style[n]||(t.currentStyle?t.currentStyle[n]:"")||i.getComputedStyle(t,n);if(!o){var a=i._styleFixer[n];a&&(o=a.get?a.get(t):e.dom.getStyle(t,a))}return(a=i._styleFilter)&&(o=a.filter(n,o,"get")),o},e.getStyle=e.dom.getStyle,/opera\\/(\\d+\\.\\d)/i.test(navigator.userAgent)&&(e.browser.opera=+RegExp.$1),e.browser.isWebkit=/webkit/i.test(navigator.userAgent),e.browser.isGecko=/gecko/i.test(navigator.userAgent)&&!/like gecko/i.test(navigator.userAgent),e.browser.isStrict="CSS1Compat"==document.compatMode,e.dom.getPosition=function(t){t=e.dom.g(t);var n,i,o=e.dom.getDocument(t),a=e.browser,r=e.dom.getStyle,s=(a.isGecko>0&&o.getBoxObjectFor&&"absolute"==r(t,"position")&&(""===t.style.top||t.style.left),{left:0,top:0}),l=a.ie&&!a.isStrict?o.body:o.documentElement;if(t==l)return s;if(t.getBoundingClientRect){i=t.getBoundingClientRect(),s.left=Math.floor(i.left)+Math.max(o.documentElement.scrollLeft,o.body.scrollLeft),s.top=Math.floor(i.top)+Math.max(o.documentElement.scrollTop,o.body.scrollTop),s.left-=o.documentElement.clientLeft,s.top-=o.documentElement.clientTop;var c=o.body,u=parseInt(r(c,"borderLeftWidth")),h=parseInt(r(c,"borderTopWidth"));a.ie&&!a.isStrict&&(s.left-=isNaN(u)?2:u,s.top-=isNaN(h)?2:h)}else{n=t;do{if(s.left+=n.offsetLeft,s.top+=n.offsetTop,a.isWebkit>0&&"fixed"==r(n,"position")){s.left+=o.body.scrollLeft,s.top+=o.body.scrollTop;break}n=n.offsetParent}while(n&&n!=t);for((a.opera>0||a.isWebkit>0&&"absolute"==r(t,"position"))&&(s.top-=o.body.offsetTop),n=t.offsetParent;n&&n!=o.body;)s.left-=n.scrollLeft,a.opera&&"TR"==n.tagName||(s.top-=n.scrollTop),n=n.offsetParent}return s},e.event=e.event||{},e.event._listeners=e.event._listeners||[],e.event.on=function(t,n,i){n=n.replace(/^on/i,""),t=e.dom._g(t);var o,a=function(e){i.call(t,e)},r=e.event._listeners,s=e.event._eventFilter,l=n;return n=n.toLowerCase(),s&&s[n]&&(o=s[n](t,n,a),l=o.type,a=o.listener),t.addEventListener?t.addEventListener(l,a,!1):t.attachEvent&&t.attachEvent("on"+l,a),r[r.length]=[t,n,i,a,l],t},e.on=e.event.on,function(){var t=n[e.guid];e.lang.guid=function(){return"TANGRAM__"+(t._counter++).toString(36)},t._counter=t._counter||1}(),n[e.guid]._instances=n[e.guid]._instances||{},e.lang.isFunction=function(t){return"[object Function]"==Object.prototype.toString.call(t)},e.lang.Class=function(t){this.guid=t||e.lang.guid(),n[e.guid]._instances[this.guid]=this},n[e.guid]._instances=n[e.guid]._instances||{},e.lang.Class.prototype.dispose=function(){delete n[e.guid]._instances[this.guid];for(var t in this)e.lang.isFunction(this[t])||delete this[t];this.disposed=!0},e.lang.Class.prototype.toString=function(){return"[object "+(this._className||"Object")+"]"},e.lang.Event=function(t,e){this.type=t,this.returnValue=!0,this.target=e||null,this.currentTarget=null},e.lang.Class.prototype.addEventListener=function(t,n,i){if(e.lang.isFunction(n)){!this.__listeners&&(this.__listeners={});var o,a=this.__listeners;if("string"==typeof i&&i){if(/[^\\w\\-]/.test(i))throw"nonstandard key:"+i;n.hashCode=i,o=i}0!=t.indexOf("on")&&(t="on"+t),"object"!=typeof a[t]&&(a[t]={}),o=o||e.lang.guid(),n.hashCode=o,a[t][o]=n}},e.lang.Class.prototype.removeEventListener=function(t,n){if(void 0===n||(!e.lang.isFunction(n)||(n=n.hashCode))&&e.lang.isString(n)){!this.__listeners&&(this.__listeners={}),0!=t.indexOf("on")&&(t="on"+t);var i=this.__listeners;if(i[t])if(void 0!==n)i[t][n]&&delete i[t][n];else for(var o in i[t])delete i[t][o]}},e.lang.Class.prototype.dispatchEvent=function(t,n){e.lang.isString(t)&&(t=new e.lang.Event(t)),!this.__listeners&&(this.__listeners={}),n=n||{};for(var i in n)t[i]=n[i];var i,o=this.__listeners,a=t.type;if(t.target=t.target||this,t.currentTarget=this,0!=a.indexOf("on")&&(a="on"+a),e.lang.isFunction(this[a])&&this[a].apply(this,arguments),"object"==typeof o[a])for(i in o[a])o[a][i].apply(this,arguments);return t.returnValue},e.lang.inherits=function(t,e,n){var i,o,a=t.prototype,r=new Function;r.prototype=e.prototype,o=t.prototype=new r;for(i in a)o[i]=a[i];t.prototype.constructor=t,t.superClass=e.prototype,"string"==typeof n&&(o._className=n)},e.inherits=e.lang.inherits;var i=function(e,n,o){try{BMap}catch(t){throw Error("Baidu Map JS API is not ready yet!")}t.lang.inherits(i,BMap.Overlay,"TextIconOverlay"),this._position=e,this._text=n,this._options=o||{},this._styles=this._options.styles||[],!this._styles.length&&this._setupDefaultStyles()};return i.prototype._setupDefaultStyles=function(){for(var t,e=[53,56,66,78,90],n=0;t=e[n];n++)this._styles.push({url:"http://api.map.baidu.com/library/TextIconOverlay/1.2/src/images/m"+n+".png",size:new BMap.Size(t,t)})},i.prototype.initialize=function(t){return this._map=t,this._domElement=document.createElement("div"),this._updateCss(),this._updateText(),this._updatePosition(),this._bind(),this._map.getPanes().markerMouseTarget.appendChild(this._domElement),this._domElement},i.prototype.draw=function(){this._map&&this._updatePosition()},i.prototype.getText=function(){return this._text},i.prototype.setText=function(t){!t||this._text&&this._text.toString()==t.toString()||(this._text=t,this._updateText(),this._updateCss(),this._updatePosition())},i.prototype.getPosition=function(){return this._position},i.prototype.setPosition=function(t){!t||this._position&&this._position.equals(t)||(this._position=t,this._updatePosition())},i.prototype.getStyleByText=function(t,e){var n=parseInt(t),i=parseInt(n/10);return i=Math.max(0,i),i=Math.min(i,e.length-1),e[i]},i.prototype._updateCss=function(){if(this._domElement){var t=this.getStyleByText(this._text,this._styles);this._domElement.style.cssText=this._buildCssText(t)}},i.prototype._updateText=function(){this._domElement&&(this._domElement.innerHTML=this._text)},i.prototype._updatePosition=function(){if(this._domElement&&this._position){var t=this._domElement.style,e=this._map.pointToOverlayPixel(this._position);e.x-=Math.ceil(parseInt(t.width)/2),e.y-=Math.ceil(parseInt(t.height)/2),t.left=e.x+"px",t.top=e.y+"px"}},i.prototype._buildCssText=function(e){var n=e.url,i=e.size,o=e.anchor,a=e.offset,r=e.textColor||"black",s=e.textSize||10,l=[];if(t.browser.ie<7)l.push(\'filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale,src="\'+n+\'");\');else{l.push("background-image:url("+n+");");var c="0 0";a instanceof BMap.Size&&(c=a.width+"px "+a.height+"px"),l.push("background-position:"+c+";")}return i instanceof BMap.Size&&(o instanceof BMap.Size?(o.height>0&&o.height<i.height&&l.push("height:"+(i.height-o.height)+"px; padding-top:"+o.height+"px;"),o.width>0&&o.width<i.width&&l.push("width:"+(i.width-o.width)+"px; padding-left:"+o.width+"px;")):(l.push("height:"+i.height+"px; line-height:"+i.height+"px;"),l.push("width:"+i.width+"px; text-align:center;"))),l.push("cursor:pointer; color:"+r+"; position:absolute; font-size:"+s+"px; font-family:Arial,sans-serif; font-weight:bold"),l.join("")},i.prototype._bind=function(){function e(e,n){var o=e.srcElement||e.target,a=e.clientX||e.pageX,r=e.clientY||e.pageY;if(e&&n&&a&&r&&o){var s=t.dom.getPosition(i.getContainer());n.pixel=new BMap.Pixel(a-s.left,r-s.top),n.point=i.pixelToPoint(n.pixel)}return n}if(this._domElement){var n=this,i=this._map,o=t.lang.Event;t.event.on(this._domElement,"mouseover",function(t){n.dispatchEvent(e(t,new o("onmouseover")))}),t.event.on(this._domElement,"mouseout",function(t){n.dispatchEvent(e(t,new o("onmouseout")))}),t.event.on(this._domElement,"click",function(t){n.dispatchEvent(e(t,new o("onclick")))})}},i})}),s=r&&"object"==typeof r&&"default"in r?r.default:r,l=function(t,e,n){e=c(e);var i=t.pointToPixel(e.getNorthEast()),o=t.pointToPixel(e.getSouthWest());i.x+=n,i.y-=n,o.x-=n,o.y+=n;var a=t.pixelToPoint(i),r=t.pixelToPoint(o);return new BMap.Bounds(r,a)},c=function(t){var e=u(t.getNorthEast().lng,-180,180),n=u(t.getSouthWest().lng,-180,180),i=u(t.getNorthEast().lat,-74,74),o=u(t.getSouthWest().lat,-74,74);return new BMap.Bounds(new BMap.Point(n,o),new BMap.Point(e,i))},u=function(t,e,n){return e&&(t=Math.max(t,e)),n&&(t=Math.min(t,n)),t},h=function(t){return"[object Array]"===Object.prototype.toString.call(t)},p=function(t,e){var n=-1;if(h(e))if(e.indexOf)n=e.indexOf(t);else for(var i,o=0;i=e[o];o++)if(i===t){n=o;break}return n},d=function(t,e){try{BMap}catch(t){throw Error("Baidu Map JS API is not ready yet!")}if(t){this._map=t,this._markers=[],this._clusters=[];var n=e||{};this._gridSize=n.gridSize||60,this._maxZoom=n.maxZoom||18,this._minClusterSize=n.minClusterSize||2,this._isAverageCenter=!1,void 0!=n.isAverageCenter&&(this._isAverageCenter=n.isAverageCenter),this._styles=n.styles||[];var i=this;this._map.addEventListener("zoomend",function(){i._redraw()}),this._map.addEventListener("moveend",function(){i._redraw()});var o=n.markers;h(o)&&this.addMarkers(o)}};return d.prototype.addMarkers=function(t){if(t.length){for(var e=0,n=t.length;e<n;e++)this._pushMarkerTo(t[e]);this._createClusters()}},d.prototype._pushMarkerTo=function(t){-1===p(t,this._markers)&&(t.isInCluster=!1,this._markers.push(t))},d.prototype.addMarker=function(t){this._pushMarkerTo(t),this._createClusters()},d.prototype._createClusters=function(){var t=this._map.getBounds();if(t.getCenter())for(var e,n=l(this._map,t,this._gridSize),i=0;e=this._markers[i];i++)!e.isInCluster&&n.containsPoint(e.getPosition())&&this._addToClosestCluster(e)},d.prototype._addToClosestCluster=function(e){for(var n,i=4e6,o=null,a=(e.getPosition(),0);n=this._clusters[a];a++){var r=n.getCenter();if(r){var s=this._map.getDistance(r,e.getPosition());s<i&&(i=s,o=n)}}if(o&&o.isMarkerInClusterBounds(e))o.addMarker(e);else{var n=new t(this);n.addMarker(e),this._clusters.push(n)}},d.prototype._clearLastClusters=function(){for(var t,e=0;t=this._clusters[e];e++)t.remove();this._clusters=[],this._removeMarkersFromCluster()},d.prototype._removeMarkersFromCluster=function(){for(var t,e=0;t=this._markers[e];e++)t.isInCluster=!1},d.prototype._removeMarkersFromMap=function(){for(var t,e=0;t=this._markers[e];e++){t.isInCluster=!1;var n=t.getLabel();this._map.removeOverlay(t),t.setLabel(n)}},d.prototype._removeMarker=function(t){var e=p(t,this._markers);return-1!==e&&(this._map.removeOverlay(t),this._markers.splice(e,1),!0)},d.prototype.removeMarker=function(t){var e=this._removeMarker(t);return e&&(this._clearLastClusters(),this._createClusters()),e},d.prototype.removeMarkers=function(t){for(var e=!1,n=0;n<t.length;n++){var i=this._removeMarker(t[n]);e=e||i}return e&&(this._clearLastClusters(),this._createClusters()),e},d.prototype.clearMarkers=function(){this._clearLastClusters(),this._removeMarkersFromMap(),this._markers=[]},d.prototype._redraw=function(){this._clearLastClusters(),this._createClusters()},d.prototype.getGridSize=function(){return this._gridSize},d.prototype.setGridSize=function(t){this._gridSize=t,this._redraw()},d.prototype.getMaxZoom=function(){return this._maxZoom},d.prototype.setMaxZoom=function(t){this._maxZoom=t,this._redraw()},d.prototype.getStyles=function(){return this._styles},d.prototype.setStyles=function(t){this._styles=t,this._redraw()},d.prototype.getMinClusterSize=function(){return this._minClusterSize},d.prototype.setMinClusterSize=function(t){this._minClusterSize=t,this._redraw()},d.prototype.isAverageCenter=function(){return this._isAverageCenter},d.prototype.getMap=function(){return this._map},d.prototype.getMarkers=function(){return this._markers},d.prototype.getClustersCount=function(){for(var t,e=0,n=0;t=this._clusters[n];n++)t.isReal()&&e++;return e},t.prototype.addMarker=function(t){if(this.isMarkerInCluster(t))return!1;if(this._center){if(this._isAverageCenter){var e=this._markers.length+1,n=(this._center.lat*(e-1)+t.getPosition().lat)/e,i=(this._center.lng*(e-1)+t.getPosition().lng)/e;this._center=new BMap.Point(i,n),this.updateGridBounds()}}else this._center=t.getPosition(),this.updateGridBounds();t.isInCluster=!0,this._markers.push(t);var o=this._markers.length;if(o<this._minClusterSize)return this._map.addOverlay(t),!0;if(o===this._minClusterSize)for(var a=0;a<o;a++){var r=this._markers[a].getLabel();this._markers[a].getMap()&&this._map.removeOverlay(this._markers[a]),this._markers[a].setLabel(r)}return this._map.addOverlay(this._clusterMarker),this._isReal=!0,this.updateClusterMarker(),!0},t.prototype.isMarkerInCluster=function(t){if(this._markers.indexOf)return-1!=this._markers.indexOf(t);for(var e,n=0;e=this._markers[n];n++)if(e===t)return!0;return!1},t.prototype.isMarkerInClusterBounds=function(t){return this._gridBounds.containsPoint(t.getPosition())},t.prototype.isReal=function(t){return this._isReal},t.prototype.updateGridBounds=function(){var t=new BMap.Bounds(this._center,this._center);this._gridBounds=l(this._map,t,this._markerClusterer.getGridSize())},t.prototype.updateClusterMarker=function(){if(this._map.getZoom()>this._markerClusterer.getMaxZoom()){this._clusterMarker&&this._map.removeOverlay(this._clusterMarker);for(var t,e=0;t=this._markers[e];e++)this._map.addOverlay(t)}else{if(this._markers.length<this._minClusterSize)return void this._clusterMarker.hide();this._clusterMarker.setPosition(this._center),this._clusterMarker.setText(this._markers.length),this._clusterMarker.addEventListener&&!this._clusterMarker._hasClickEvent&&this._clusterMarker.addEventListener("click",function(t){this._clusterMarker._hasClickEvent=!0,this._markers&&this._map.setViewport(this.getBounds())}.bind(this))}},t.prototype.remove=function(){for(var t=0;this._markers[t];t++){var e=this._markers[t].getLabel();this._markers[t].getMap()&&this._map.removeOverlay(this._markers[t]),this._markers[t].setLabel(e)}this._map.removeOverlay(this._clusterMarker),this._markers.length=0,delete this._markers},t.prototype.getBounds=function(){for(var t,e=new BMap.Bounds(this._center,this._center),n=0;t=this._markers[n];n++)e.extend(t.getPosition());return e},t.prototype.getCenter=function(){return this._center},d})}).call(e,n(3))},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div")},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{directives:[{name:"show",rawName:"v-show",value:t.show,expression:"show"}]},[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{directives:[{name:"show",rawName:"v-show",value:t.panel,expression:"panel"}]},[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{directives:[{name:"show",rawName:"v-show",value:t.panel,expression:"panel"}]},[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("span",[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("span",[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{directives:[{name:"show",rawName:"v-show",value:t.panel,expression:"panel"}]})},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{directives:[{name:"show",rawName:"v-show",value:t.panel,expression:"panel"}]},[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{directives:[{name:"show",rawName:"v-show",value:t.panel,expression:"panel"}]},[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("span",[t._t("default",[n("input")])],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",[t._t("default")],2)},staticRenderFns:[]}},function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[t.hasBmView?t._e():n("div",{ref:"view",staticStyle:{width:"100%",height:"100%"}}),t._v(" "),t._t("default")],2)},staticRenderFns:[]}}])});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWJhaWR1LW1hcC9pbmRleC5qcz83NDAxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWUsK0lBQTJMLGlCQUFpQixtQkFBbUIsY0FBYyw0QkFBNEIsWUFBWSxxQkFBcUIsMkRBQTJELFNBQVMsbUNBQW1DLFNBQVMscUJBQXFCLHFDQUFxQyxvQ0FBb0MsRUFBRSxpQkFBaUIsaUNBQWlDLGlCQUFpQixZQUFZLFVBQVUsc0JBQXNCLG1CQUFtQixpREFBaUQsa0JBQWtCLGdCQUFnQiw0QkFBNEIsZUFBZSxvQkFBb0IsZ0RBQWdELHVDQUF1QyxtRkFBbUYsZ0NBQWdDLEVBQUUsbUNBQW1DLFdBQVcsZ0JBQWdCLFVBQVUsRUFBRSxPQUFPLGlDQUFpQyxpQkFBaUIsVUFBVSxlQUFlLDRFQUE0RSxpQkFBaUIsYUFBYSxnQkFBZ0IsOEVBQThFLHNDQUFzQyxTQUFTLEVBQUUsT0FBTyxTQUFTLHVCQUF1QixRQUFRLHlCQUF5QixVQUFVLHVCQUF1QixjQUFjLDRCQUE0QixpQkFBaUIsNkRBQTZELGlCQUFpQix3QkFBd0IsaUJBQWlCLDBEQUEwRCxnQ0FBZ0MsYUFBYSxFQUFFLDJCQUEyQix1Q0FBdUMsbUJBQW1CLFdBQVcsMkNBQTJDLCtCQUErQixFQUFFLG1CQUFtQixxQ0FBcUMsSUFBSSxlQUFlLHFDQUFxQyxrREFBa0QsOENBQThDLGdDQUFnQyxZQUFZLGdCQUFnQiwwQkFBMEIsMkNBQTJDLHlCQUF5QiwyQ0FBMkMsdUJBQXVCLCtCQUErQix1REFBdUQsb0JBQW9CLHNCQUFzQixjQUFjLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxpQkFBaUIsVUFBVSxlQUFlLDBFQUEwRSxlQUFlLGFBQWEsY0FBYywrREFBK0QsaUJBQWlCLHdCQUF3QixjQUFjLCtEQUErRCxhQUFhLHdCQUF3QixjQUFjLCtEQUErRCxlQUFlLG1DQUFtQyxjQUFjLCtEQUErRCxzQkFBc0IsdUJBQXVCLGNBQWMsK0RBQStELDBDQUEwQyxH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Q0FBZ0MscUJBQXFCLEdBQUciLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlZ1ZUJhaWR1TWFwPWUoKTp0LlZ1ZUJhaWR1TWFwPWUoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtmdW5jdGlvbiBlKGkpe2lmKG5baV0pcmV0dXJuIG5baV0uZXhwb3J0czt2YXIgbz1uW2ldPXtpOmksbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtpXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxlKSxvLmw9ITAsby5leHBvcnRzfXZhciBuPXt9O3JldHVybiBlLm09dCxlLmM9bixlLmk9ZnVuY3Rpb24odCl7cmV0dXJuIHR9LGUuZD1mdW5jdGlvbih0LG4saSl7ZS5vKHQsbil8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4se2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDppfSl9LGUubj1mdW5jdGlvbih0KXt2YXIgbj10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gZS5kKG4sXCJhXCIsbiksbn0sZS5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxlLnA9XCJcIixlKGUucz00Myl9KFtmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixpKXt2YXIgbyxhPXQ9dHx8e30scj10eXBlb2YgdC5kZWZhdWx0O1wib2JqZWN0XCIhPT1yJiZcImZ1bmN0aW9uXCIhPT1yfHwobz10LGE9dC5kZWZhdWx0KTt2YXIgcz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2Eub3B0aW9uczphO2lmKGUmJihzLnJlbmRlcj1lLnJlbmRlcixzLnN0YXRpY1JlbmRlckZucz1lLnN0YXRpY1JlbmRlckZucyksbiYmKHMuX3Njb3BlSWQ9biksaSl7dmFyIGw9cy5jb21wdXRlZHx8KHMuY29tcHV0ZWQ9e30pO09iamVjdC5rZXlzKGkpLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9aVt0XTtsW3RdPWZ1bmN0aW9uKCl7cmV0dXJuIGV9fSl9cmV0dXJue2VzTW9kdWxlOm8sZXhwb3J0czphLG9wdGlvbnM6c319fSxmdW5jdGlvbih0LGUsbil7dmFyIGksbyxhOyFmdW5jdGlvbihuLHIpe289W3QsZV0saT1yLHZvaWQgMCE9PShhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShlLG8pOmkpJiYodC5leHBvcnRzPWEpfSgwLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9e2NvbnRyb2w6e3VubG9hZDpcInJlbW92ZUNvbnRyb2xcIn0sbGF5ZXI6e3VubG9hZDpcInJlbW92ZVRpbGVMYXllclwifSxvdmVybGF5Ont1bmxvYWQ6XCJyZW1vdmVPdmVybGF5XCJ9LGNvbnRleHRNZW51Ont1bmxvYWQ6XCJyZW1vdmVDb250ZXh0TWVudVwifX0sbz1mdW5jdGlvbiB0KGUpe3JldHVybiBlLmFic3RyYWN0fHxlLiRlbD09PWUuJGNoaWxkcmVuWzBdLiRlbD90KGUuJHBhcmVudCk6ZX0sYT1mdW5jdGlvbiB0KGUpe24odGhpcyx0KSx0aGlzLm1ldGhvZHM9e3JlYWR5OmZ1bmN0aW9uKCl7dmFyIHQ9byh0aGlzLiRwYXJlbnQpLGU9dGhpcy5CTWFwPXQuQk1hcCxuPXRoaXMubWFwPXQubWFwO3RoaXMubG9hZCgpLHRoaXMuJGVtaXQoXCJyZWFkeVwiLHtCTWFwOmUsbWFwOm59KX0sdHJhbnNtaXRFdmVudDpmdW5jdGlvbih0KXt0aGlzLiRlbWl0KHQudHlwZS5yZXBsYWNlKC9eb24vLFwiXCIpLHQpfSxyZWxvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMmJnRoaXMuQk1hcCYmdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXt0LnVubG9hZCgpLHQuJG5leHRUaWNrKHQubG9hZCl9KX0sdW5sb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5tYXAsbj10aGlzLm9yaWdpbkluc3RhbmNlO3RyeXtzd2l0Y2goZS50eXBlKXtjYXNlXCJzZWFyY2hcIjpyZXR1cm4gbi5jbGVhclJlc3VsdHMoKTtjYXNlXCJhdXRvQ29tcGxldGVcIjpjYXNlXCJsdXNodVwiOnJldHVybiBuLmRpc3Bvc2UoKTtjYXNlXCJtYXJrZXJDbHVzdGVyZXJcIjpyZXR1cm4gbi5jbGVhck1hcmtlcnMoKTtkZWZhdWx0OnRbaVtlLnR5cGVdLnVubG9hZF0obil9fWNhdGNoKHQpe319fSx0aGlzLmNvbXB1dGVkPXtyZW5kZXJCeVBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRwYXJlbnQucHJldmVudENoaWxkcmVuUmVuZGVyfX0sdGhpcy5tb3VudGVkPWZ1bmN0aW9uKCl7dmFyIHQ9byh0aGlzLiRwYXJlbnQpLGU9dC5tYXAsbj10aGlzLnJlYWR5O2U/bigpOnQuJG9uKFwicmVhZHlcIixuKX0sdGhpcy5iZWZvcmVEZXN0cm95PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy51bmxvYWQsZT10aGlzLnJlbmRlckJ5UGFyZW50LG49dGhpcy4kcGFyZW50O2UmJm4ucmVsb2FkKCksdCgpfX07ZS5kZWZhdWx0PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgYSh7dHlwZTp0fSl9LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24obixyKXtvPVtlXSxpPXIsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZSh0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30sbj1lLmxuZyxpPWUubGF0O3JldHVybiBuZXcgdC5Qb2ludChuLGkpfWZ1bmN0aW9uIG4odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LG49ZS54LGk9ZS55O3JldHVybiBuZXcgdC5QaXhlbChuLGkpfWZ1bmN0aW9uIGkodCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LGk9bi5zdyxvPW4ubmU7cmV0dXJuIG5ldyB0LkJvdW5kcyhlKHQsaSksZSh0LG8pKX1mdW5jdGlvbiBvKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxuPWUud2lkdGgsaT1lLmhlaWdodDtyZXR1cm4gbmV3IHQuU2l6ZShuLGkpfWZ1bmN0aW9uIGEodCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LG49ZS51cmwsaT1lLnNpemUsYT1lLm9wdHMscj12b2lkIDA9PT1hP3t9OmE7cmV0dXJuIG5ldyB0Lkljb24obixvKHQsaSkse2FuY2hvcjpyLmFuY2hvciYmbyh0LHIuYW5jaG9yKSxpbWFnZVNpemU6ci5pbWFnZVNpemUmJm8odCxyLmltYWdlU2l6ZSksaW1hZ2VPZmZzZXQ6ci5pbWFnZU9mZnNldCYmbyh0LHIuaW1hZ2VPZmZzZXQpLGluZm9XaW5kb3dBbmNob3I6ci5pbmZvV2luZG93QW5jaG9yJiZvKHQsci5pbmZvV2luZG93QW5jaG9yKSxwcmludEltYWdlVXJsOnIucHJpbnRJbWFnZVVybH0pfWZ1bmN0aW9uIHIodCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9LGk9bi5jb250ZW50LGE9bi5vcHRzO3JldHVybiBuZXcgdC5MYWJlbChpLHtvZmZzZXQ6YS5vZmZzZXQmJm8odCxhLm9mZnNldCkscG9zaXRpb246YS5wb3NpdGlvbiYmZSh0LGEucG9zaXRpb24pLGVuYWJsZU1hc3NDbGVhcjphLmVuYWJsZU1hc3NDbGVhcn0pfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuY3JlYXRlUG9pbnQ9ZSx0LmNyZWF0ZVBpeGVsPW4sdC5jcmVhdGVCb3VuZHM9aSx0LmNyZWF0ZVNpemU9byx0LmNyZWF0ZUljb249YSx0LmNyZWF0ZUxhYmVsPXJ9KX0sZnVuY3Rpb24odCxlKXt2YXIgbjtuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCk7dHJ5e249bnx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpfHwoMCxldmFsKShcInRoaXNcIil9Y2F0Y2godCl7XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmKG49d2luZG93KX10LmV4cG9ydHM9bn0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbig0MSksbig1KV0saT1zLHZvaWQgMCE9PShhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShlLG8pOmkpJiYodC5leHBvcnRzPWEpfSgwLGZ1bmN0aW9uKHQsZSxuLGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMsYT1lfHxvLmRlZmF1bHRbKDAsaS50b0tlYmFiQ2FzZSkodGhpcy4kb3B0aW9ucy5fY29tcG9uZW50VGFnKV07YSYmYS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBpPVwib25cIj09PWUuc2xpY2UoMCwyKTt0LmFkZEV2ZW50TGlzdGVuZXIoZSxmdW5jdGlvbih0KXtuLiRlbWl0KGk/ZS5zbGljZSgyKTplLHQpfSl9KX07dmFyIG89ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fShuKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxvLGE7IWZ1bmN0aW9uKHIscyl7bz1bZSxuKDIpXSxpPXMsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmdldFBvc2l0aW9uPXQudG9LZWJhYkNhc2U9dC5jaGVja1R5cGU9dC5pc1BvaW50PXZvaWQgMDt2YXIgbj10LmlzUG9pbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQubG5nJiZ0LmxhdH07dC5jaGVja1R5cGU9ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KS5zbGljZSg4LC0xKX0sdC50b0tlYmFiQ2FzZT1mdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9bQS1aXS9nLGZ1bmN0aW9uKHQpe3JldHVyblwiLVwiK3QudG9Mb3dlckNhc2UoKX0pLnJlcGxhY2UoL14tLyxcIlwiKX0sdC5nZXRQb3NpdGlvbj1mdW5jdGlvbih0LGkpe3JldHVybiBuKGkpPygwLGUuY3JlYXRlUG9pbnQpKHQsaSk6aX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig3MiksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNDQpLG4oODkpLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig0NSksbig4NyksbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDQ2KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig0Nyksbig5NCksbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDQ4KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig0OSksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNTApLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDUxKSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig1MiksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNTMpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDU0KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig1NSksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNTYpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDU3KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig1OCksbig5MCksbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDU5KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig2MCksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNjEpLG4oOTcpLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig2Miksbig4MyksbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDYzKSxuKDk1KSxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNjQpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDY1KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig2NiksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNjcpLG4oODQpLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig2OCksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNjkpLG4oOTYpLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig3MCksbig4NSksbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDcxKSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig3MyksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNzQpLG4oOTEpLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig3NSksbig4NiksbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDc2KSxuKDkzKSxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oNzcpLG4oOTIpLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30sZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobig3OCksbig4OCksbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSxmdW5jdGlvbih0LGUsbil7dmFyIGksbyxhOyFmdW5jdGlvbihuLHIpe289W3QsZV0saT1yLHZvaWQgMCE9PShhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShlLG8pOmkpJiYodC5leHBvcnRzPWEpfSgwLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtcImJhaWR1LW1hcFwiOltcImNsaWNrXCIsXCJkYmxjbGlja1wiLFwicmlnaHRjbGlja1wiLFwicmlnaHRkYmxjbGlja1wiLFwibWFwdHlwZWNoYW5nZVwiLFwibW91c2Vtb3ZlXCIsXCJtb3VzZW92ZXJcIixcIm1vdXNlb3V0XCIsXCJtb3Zlc3RhcnRcIixcIm1vdmluZ1wiLFwibW92ZWVuZFwiLFwiem9vbXN0YXJ0XCIsXCJ6b29tZW5kXCIsXCJhZGRvdmVybGF5XCIsXCJhZGRjb250cm9sXCIsXCJyZW1vdmVjb250cm9sXCIsXCJyZW1vdmVvdmVybGF5XCIsXCJjbGVhcm92ZXJsYXlzXCIsXCJkcmFnc3RhcnRcIixcImRyYWdnaW5nXCIsXCJkcmFnZW5kXCIsXCJhZGR0aWxlbGF5ZXJcIixcInJlbW92ZXRpbGVsYXllclwiLFwibG9hZFwiLFwicmVzaXplXCIsXCJob3RzcG90Y2xpY2tcIixcImhvdHNwb3RvdmVyXCIsXCJob3RzcG90b3V0XCIsXCJ0aWxlc2xvYWRlZFwiLFwidG91Y2hzdGFydFwiLFwidG91Y2htb3ZlXCIsXCJ0b3VjaGVuZFwiLFwibG9uZ3ByZXNzXCJdLFwiYm0tZ2VvbG9jYXRpb25cIjpbXCJsb2NhdGlvblN1Y2Nlc3NcIixcImxvY2F0aW9uRXJyb3JcIl0sXCJibS1vdmVydmlldy1tYXBcIjpbXCJ2aWV3Y2hhbmdlZFwiLFwidmlld2NoYW5naW5nXCJdLFwiYm0tbWFya2VyXCI6W1wiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZWRvd25cIixcIm1vdXNldXBcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIixcInJlbW92ZVwiLFwiaW5mb3dpbmRvd2Nsb3NlXCIsXCJpbmZvd2luZG93b3BlblwiLFwiZHJhZ3N0YXJ0XCIsXCJkcmFnZ2luZ1wiLFwiZHJhZ2VuZFwiLFwicmlnaHRjbGlja1wiXSxcImJtLXBvbHlsaW5lXCI6W1wiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZWRvd25cIixcIm1vdXNldXBcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIixcInJlbW92ZVwiLFwibGluZXVwZGF0ZVwiXSxcImJtLXBvbHlnb25cIjpbXCJjbGlja1wiLFwiZGJsY2xpY2tcIixcIm1vdXNlZG93blwiLFwibW91c2V1cFwiLFwibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiLFwicmVtb3ZlXCIsXCJsaW5ldXBkYXRlXCJdLFwiYm0tY2lyY2xlXCI6W1wiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZWRvd25cIixcIm1vdXNldXBcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIixcInJlbW92ZVwiLFwibGluZXVwZGF0ZVwiXSxcImJtLWxhYmVsXCI6W1wiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZWRvd25cIixcIm1vdXNldXBcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIixcInJlbW92ZVwiLFwicmlnaHRjbGlja1wiXSxcImJtLWluZm8td2luZG93XCI6W1wiY2xvc2VcIixcIm9wZW5cIixcIm1heGltaXplXCIsXCJyZXN0b3JlXCIsXCJjbGlja2Nsb3NlXCJdLFwiYm0tZ3JvdW5kXCI6W1wiY2xpY2tcIixcImRibGNsaWNrXCJdLFwiYm0tYXV0by1jb21wbGV0ZVwiOltcIm9uY29uZmlybVwiLFwib25oaWdobGlnaHRcIl0sXCJibS1wb2ludC1jb2xsZWN0aW9uXCI6W1wiY2xpY2tcIixcIm1vdXNlb3ZlclwiLFwibW91c2VvdXRcIl19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24obixyKXtvPVt0LGVdLGk9cix2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4odCl7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciBlPTAsbj1BcnJheSh0Lmxlbmd0aCk7ZTx0Lmxlbmd0aDtlKyspbltlXT10W2VdO3JldHVybiBufXJldHVybiBBcnJheS5mcm9tKHQpfWZ1bmN0aW9uIGkodCxlLG4pe3JldHVybiBlIGluIHQ/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbZV09bix0fWZ1bmN0aW9uIG8odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uIHQoZSl7dmFyIGE9ZS5jb21wb25lbnQscj1lLnByb3BzLHM9ZS5ldmVudHMsbD1lLmV4dHJhUHJvcHMsYz1lLmV4Y2VwdFByb3BzO28odGhpcyx0KSx0aGlzLnJlbmRlcj1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiB0KGEse3Byb3BzOnIucmVkdWNlKGZ1bmN0aW9uKHQsbil7cmV0dXJuIE9iamVjdC5hc3NpZ24odCxpKHt9LG4sZVtuXSkpfSx7fSksb246cy5yZWR1Y2UoZnVuY3Rpb24odCxuKXtyZXR1cm4gT2JqZWN0LmFzc2lnbih0LGkoe30sbixlLnRyYW5zbWl0RXZlbnQpKX0se30pfSl9LHRoaXMucHJvcHM9W10uY29uY2F0KG4obCksbihyLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gYy5pbmRleE9mKHQpfSkpKX07ZS5kZWZhdWx0PWZ1bmN0aW9uKHQpe3JldHVybiBuZXcgYSh0KX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pfSxmdW5jdGlvbih0LGUsbil7dmFyIGksbyxhOyFmdW5jdGlvbihyLHMpe289W2UsbigyNCksbigyNSksbigxNyksbigxNCksbigxMyksbigxNSksbigxMiksbigxMSksbig5KSxuKDE2KSxuKDEwKSxuKDMyKSxuKDM0KSxuKDM1KSxuKDYpLG4oMjgpLG4oMjkpLG4oMzEpLG4oMzApLG4oMzMpLG4oOCksbig3KSxuKDM4KSxuKDM5KSxuKDQwKSxuKDM3KSxuKDM2KSxuKDIyKSxuKDIzKSxuKDI3KSxuKDI2KSxuKDIxKSxuKDIwKSxuKDE5KSxuKDE4KV0saT1zLHZvaWQgMCE9PShhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShlLG8pOmkpJiYodC5leHBvcnRzPWEpfSgwLGZ1bmN0aW9uKHQsZSxuLGksbyxhLHIscyxsLGMsdSxoLHAsZCxmLG0sZyx5LHYsXyxiLHgsdyxNLEMsSSxrLFMsQixQLE8sRSxULHosaixMKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBBKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkJtbEN1cnZlTGluZT10LkJtbEhlYXRtYXA9dC5CbWxMdXNodT10LkJtbE1hcmtlckNsdXN0ZXJlcj10LkJtQXV0b0NvbXBsZXRlPXQuQm1Cb3VuZGFyeT10LkJtVHJhZmZpYz10LkJtVGlsZT10LkJtQnVzPXQuQm1Ecml2aW5nPXQuQm1XYWxraW5nPXQuQm1UcmFuc2l0PXQuQm1Mb2NhbFNlYXJjaD10LkJtQ29udGV4dE1lbnVJdGVtPXQuQm1Db250ZXh0TWVudT10LkJtT3ZlcmxheT10LkJtSW5mb1dpbmRvdz10LkJtTGFiZWw9dC5CbUdyb3VuZD10LkJtQ2lyY2xlPXQuQm1Qb2x5Z29uPXQuQm1Qb2x5bGluZT10LkJtUG9pbnRDb2xsZWN0aW9uPXQuQm1NYXJrZXI9dC5CbUNvbnRyb2w9dC5CbVBhbm9yYW1hPXQuQm1DaXR5TGlzdD10LkJtQ29weXJpZ2h0PXQuQm1HZW9sb2NhdGlvbj10LkJtT3ZlcnZpZXdNYXA9dC5CbU1hcFR5cGU9dC5CbU5hdmlnYXRpb249dC5CbVNjYWxlPXQuQm1WaWV3PXQuQmFpZHVNYXA9dm9pZCAwO3ZhciBSPUEoZSksRj1BKG4pLCQ9QShpKSxXPUEobyksTj1BKGEpLEQ9QShyKSxaPUEocyksVj1BKGwpLEg9QShjKSxHPUEodSksVT1BKGgpLEo9QShwKSxLPUEoZCksWD1BKGYpLHE9QShtKSxRPUEoZyksWT1BKHkpLHR0PUEodiksZXQ9QShfKSxudD1BKGIpLGl0PUEoeCksb3Q9QSh3KSxhdD1BKE0pLHJ0PUEoQyksc3Q9QShJKSxsdD1BKGspLGN0PUEoUyksdXQ9QShCKSxodD1BKFApLHB0PUEoTyksZHQ9QShFKSxmdD1BKFQpLG10PUEoeiksZ3Q9QShqKSx5dD1BKEwpO3QuZGVmYXVsdD17aW5zdGFsbDpmdW5jdGlvbih0LGUpe3ZhciBuPWUuYWs7dC5wcm90b3R5cGUuX0JNYXA9ZnVuY3Rpb24oKXtyZXR1cm57YWs6bn19LHQuY29tcG9uZW50KFwiYmFpZHUtbWFwXCIsUi5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLXZpZXdcIixGLmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tc2NhbGVcIiwkLmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tbmF2aWdhdGlvblwiLFcuZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS1tYXAtdHlwZVwiLE4uZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS1vdmVydmlldy1tYXBcIixELmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tZ2VvbG9jYXRpb25cIixaLmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tY29weXJpZ2h0XCIsVi5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLWNpdHktbGlzdFwiLEguZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS1wYW5vcmFtYVwiLEcuZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS1jb250cm9sXCIsVS5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLW1hcmtlclwiLEouZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS1wb2ludC1jb2xsZWN0aW9uXCIsSy5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLXBvbHlsaW5lXCIsWC5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLXBvbHlnb25cIixxLmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tY2lyY2xlXCIsUS5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLWdyb3VuZFwiLFkuZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS1sYWJlbFwiLHR0LmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0taW5mby13aW5kb3dcIixldC5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLW92ZXJsYXlcIixudC5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLWNvbnRleHQtbWVudVwiLGl0LmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tY29udGV4dC1tZW51LWl0ZW1cIixvdC5kZWZhdWx0KSx0LmNvbXBvbmVudChcImJtLWxvY2FsLXNlYXJjaFwiLGF0LmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tdHJhbnNpdFwiLHJ0LmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0td2Fsa2luZ1wiLHN0LmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tZHJpdmluZ1wiLGx0LmRlZmF1bHQpLHQuY29tcG9uZW50KFwiYm0tYnVzXCIsY3QuZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS10aWxlXCIsdXQuZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS10cmFmZmljXCIsaHQuZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS1hdXRvLWNvbXBsZXRlXCIsZHQuZGVmYXVsdCksdC5jb21wb25lbnQoXCJibS1ib3VuZGFyeVwiLHB0LmRlZmF1bHQpfX0sdC5CYWlkdU1hcD1SLmRlZmF1bHQsdC5CbVZpZXc9Ri5kZWZhdWx0LHQuQm1TY2FsZT0kLmRlZmF1bHQsdC5CbU5hdmlnYXRpb249Vy5kZWZhdWx0LHQuQm1NYXBUeXBlPU4uZGVmYXVsdCx0LkJtT3ZlcnZpZXdNYXA9RC5kZWZhdWx0LHQuQm1HZW9sb2NhdGlvbj1aLmRlZmF1bHQsdC5CbUNvcHlyaWdodD1WLmRlZmF1bHQsdC5CbUNpdHlMaXN0PUguZGVmYXVsdCx0LkJtUGFub3JhbWE9Ry5kZWZhdWx0LHQuQm1Db250cm9sPVUuZGVmYXVsdCx0LkJtTWFya2VyPUouZGVmYXVsdCx0LkJtUG9pbnRDb2xsZWN0aW9uPUsuZGVmYXVsdCx0LkJtUG9seWxpbmU9WC5kZWZhdWx0LHQuQm1Qb2x5Z29uPXEuZGVmYXVsdCx0LkJtQ2lyY2xlPVEuZGVmYXVsdCx0LkJtR3JvdW5kPVkuZGVmYXVsdCx0LkJtTGFiZWw9dHQuZGVmYXVsdCx0LkJtSW5mb1dpbmRvdz1ldC5kZWZhdWx0LHQuQm1PdmVybGF5PW50LmRlZmF1bHQsdC5CbUNvbnRleHRNZW51PWl0LmRlZmF1bHQsdC5CbUNvbnRleHRNZW51SXRlbT1vdC5kZWZhdWx0LHQuQm1Mb2NhbFNlYXJjaD1hdC5kZWZhdWx0LHQuQm1UcmFuc2l0PXJ0LmRlZmF1bHQsdC5CbVdhbGtpbmc9c3QuZGVmYXVsdCx0LkJtRHJpdmluZz1sdC5kZWZhdWx0LHQuQm1CdXM9Y3QuZGVmYXVsdCx0LkJtVGlsZT11dC5kZWZhdWx0LHQuQm1UcmFmZmljPWh0LmRlZmF1bHQsdC5CbUJvdW5kYXJ5PXB0LmRlZmF1bHQsdC5CbUF1dG9Db21wbGV0ZT1kdC5kZWZhdWx0LHQuQm1sTWFya2VyQ2x1c3RlcmVyPWZ0LmRlZmF1bHQsdC5CbWxMdXNodT1tdC5kZWZhdWx0LHQuQm1sSGVhdG1hcD1ndC5kZWZhdWx0LHQuQm1sQ3VydmVMaW5lPXl0LmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24obixyKXtvPVt0LGVdLGk9cix2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17bmFtZTpcImJtLWNvbnRleHQtbWVudS1pdGVtXCIscHJvcHM6e2NhbGxiYWNrOnt0eXBlOkZ1bmN0aW9uLGRlZmF1bHQ6ZnVuY3Rpb24oKXt9fSx0ZXh0Ont0eXBlOlN0cmluZ30saWNvblVybDp7dHlwZTpTdHJpbmd9LGlkOnt0eXBlOlN0cmluZ30sZGlzYWJsZWQ6e3R5cGU6Qm9vbGVhbn0sc2VwZXJhdG9yOnt0eXBlOkJvb2xlYW59fSxtZXRob2RzOntyZWxvYWQ6ZnVuY3Rpb24oKXt0aGlzLiRwYXJlbnQubWFwJiZ0aGlzLiRwYXJlbnQucmVsb2FkKCl9fSx3YXRjaDp7dGV4dDpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LGljb25Vcmw6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxpZDpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LGRpc2FibGVkOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX0saXNlcGVyYXRvcjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LGNhbGxiYWNrOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX19LGRlc3Ryb3llZDpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pfSxmdW5jdGlvbih0LGUsbil7dmFyIGksbyxhOyFmdW5jdGlvbihyLHMpe289W3QsZSxuKDEpXSxpPXMsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0obik7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tY29udGV4dC1tZW51XCIscHJvcHM6e3dpZHRoOnt0eXBlOk51bWJlcn19LG1peGluczpbKDAsaS5kZWZhdWx0KShcImNvbnRleHRNZW51XCIpXSxtZXRob2RzOntsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy53aWR0aCxlPXRoaXMuQk1hcCxuPXRoaXMubWFwLGk9dGhpcy4kcGFyZW50LG89dGhpcy5vcmlnaW5JbnN0YW5jZT1uZXcgZS5Db250ZXh0TWVudSxhPXRoaXMucGFyZW50PWkub3JpZ2luSW5zdGFuY2V8fG4scj0hMCxzPSExLGw9dm9pZCAwO3RyeXtmb3IodmFyIGMsdT10aGlzLiRjaGlsZHJlbltTeW1ib2wuaXRlcmF0b3JdKCk7IShyPShjPXUubmV4dCgpKS5kb25lKTtyPSEwKXsoZnVuY3Rpb24oKXt2YXIgaT1jLnZhbHVlO2lmKGkuc2VwZXJhdG9yKXJldHVybiBvLmFkZFNlcGFyYXRvcigpLFwiY29udGludWVcIjt2YXIgcj1uZXcgZS5NZW51SXRlbShpLnRleHQsZnVuY3Rpb24odCxvKXtpLmNhbGxiYWNrKHtwb2ludDp0LHBpeGVsOm8sQk1hcDplLG1hcDpuLHRhcmdldDphfSl9LHt3aWR0aDp0LGlkOmkuaWQsaWNvblVybDppLmljb25Vcmx9KTtpLmRpc2FibGVkP3IuZGlzYWJsZSgpOnIuZW5hYmxlKCksby5hZGRJdGVtKHIpfSkoKX19Y2F0Y2godCl7cz0hMCxsPXR9ZmluYWxseXt0cnl7IXImJnUucmV0dXJuJiZ1LnJldHVybigpfWZpbmFsbHl7aWYocyl0aHJvdyBsfX1hLmFkZENvbnRleHRNZW51KG8pfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbihpKXt2YXIgbyxhLHI7IWZ1bmN0aW9uKGkscyl7YT1bdCxlLG4oMSksbigyKV0sbz1zLHZvaWQgMCE9PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5hcHBseShlLGEpOm8pJiYodC5leHBvcnRzPXIpfSgwLGZ1bmN0aW9uKHQsZSxuLG8pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0obik7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tY2l0eS1saXN0XCIscmVuZGVyOmZ1bmN0aW9uKCl7fSxtaXhpbnM6WygwLGEuZGVmYXVsdCkoXCJjb250cm9sXCIpXSxwcm9wczp7YW5jaG9yOnt0eXBlOlN0cmluZ30sb2Zmc2V0Ont0eXBlOk9iamVjdH19LHdhdGNoOnthbmNob3I6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxvZmZzZXQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG49dGhpcy5hbmNob3IsYT10aGlzLm9mZnNldCxyPXRoaXM7dGhpcy5vcmlnaW5JbnN0YW5jZT1uZXcgdC5DaXR5TGlzdENvbnRyb2woe2FuY2hvcjppW25dLG9mZnNldDphJiYoMCxvLmNyZWF0ZVNpemUpKHQsYSksb25DaGFuZ2VCZWZvcmU6ZnVuY3Rpb24oKXtyLiRlbWl0KFwiY2hhbmdlQmVmb3JlXCIpfSxvbkNoYW5nZUFmdGVyOmZ1bmN0aW9uKCl7ci4kZW1pdChcImNoYW5nZUFmdGVyXCIpfX0pLGUuYWRkQ29udHJvbCh0aGlzLm9yaWdpbkluc3RhbmNlKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9KS5jYWxsKGUsbigzKSl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oaSl7dmFyIG8sYSxyOyFmdW5jdGlvbihpLHMpe2E9W3QsZSxuKDEpLG4oMildLG89cyx2b2lkIDAhPT0ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28uYXBwbHkoZSxhKTpvKSYmKHQuZXhwb3J0cz1yKX0oMCxmdW5jdGlvbih0LGUsbixvKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KG4pO2UuZGVmYXVsdD17bmFtZTpcImJtLWNvbnRyb2xcIixtaXhpbnM6WygwLGEuZGVmYXVsdCkoXCJjb250cm9sXCIpXSxwcm9wczpbXCJhbmNob3JcIixcIm9mZnNldFwiXSx3YXRjaDp7YW5jaG9yOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0QW5jaG9yKHQpfSxvZmZzZXQ6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRPZmZzZXQodCl9fSxtZXRob2RzOntsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5CTWFwLGU9dGhpcy5tYXAsbj10aGlzLmFuY2hvcixhPXRoaXMub2Zmc2V0LHI9dGhpcy4kZWwscz1mdW5jdGlvbigpe3RoaXMuZGVmYXVsdEFuY2hvcj1pW258fFwiQk1BUF9BTkNIT1JfVE9QX0xFRlRcIl0sdGhpcy5kZWZhdWx0T2Zmc2V0PSgwLG8uY3JlYXRlU2l6ZSkodCxhKX07cy5wcm90b3R5cGU9bmV3IHQuQ29udHJvbCxzLnByb3RvdHlwZS5pbml0aWFsaXplPWZ1bmN0aW9uKHQpe3JldHVybiB0LmdldENvbnRhaW5lcigpLmFwcGVuZENoaWxkKHIpfSx0aGlzLm9yaWdpbkluc3RhbmNlPW5ldyBzKG4sYSksZS5hZGRDb250cm9sKHRoaXMub3JpZ2luSW5zdGFuY2UpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0pLmNhbGwoZSxuKDMpKX0sZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbihpKXt2YXIgbyxhLHI7IWZ1bmN0aW9uKGkscyl7YT1bdCxlLG4oMSksbigyKV0sbz1zLHZvaWQgMCE9PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5hcHBseShlLGEpOm8pJiYodC5leHBvcnRzPXIpfSgwLGZ1bmN0aW9uKHQsZSxuLG8pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0obik7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tY29weXJpZ2h0XCIscmVuZGVyOmZ1bmN0aW9uKCl7fSxtaXhpbnM6WygwLGEuZGVmYXVsdCkoXCJjb250cm9sXCIpXSxwcm9wczpbXCJhbmNob3JcIixcIm9mZnNldFwiLFwiY29weXJpZ2h0XCJdLHdhdGNoOnthbmNob3I6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxvZmZzZXQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxjb3B5cmlnaHQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG49dGhpcy5vZmZzZXQsYT10aGlzLmFuY2hvcixyPXRoaXMudXBkYXRlQ29weXJpZ2h0TGlzdDt0aGlzLm9yaWdpbkluc3RhbmNlPW5ldyB0LkNvcHlyaWdodENvbnRyb2woe2FuY2hvcjppW2FdLG9mZnNldDpuJiYoMCxvLmNyZWF0ZVNpemUpKHQsbil9KSxyKCksZS5hZGRDb250cm9sKHRoaXMub3JpZ2luSW5zdGFuY2UpfSx1cGRhdGVDb3B5cmlnaHRMaXN0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuQk1hcCxuPXRoaXMubWFwLGk9dGhpcy5vcmlnaW5JbnN0YW5jZSxvPWkucmVtb3ZlQ29weXJpZ2h0LGE9aS5nZXRDb3B5cmlnaHRDb2xsZWN0aW9uLHI9YSgpO3ImJnIuZm9yRWFjaChmdW5jdGlvbih0KXtvKHQuaWQpfSksdGhpcy5jb3B5cmlnaHQmJnRoaXMuY29weXJpZ2h0LmZvckVhY2goZnVuY3Rpb24oaSl7dmFyIG89aS5ib3VuZHM/bmV3IGUuQm91bmRzKG5ldyBlLlBvaW50KGkuYm91bmRzLnN3LmxuZyxpLmJvdW5kcy5zdy5sYXQpLG5ldyBlLlBvaW50KGkuYm91bmRzLm5lLmxuZyxpLmJvdW5kcy5uZS5sYXQpKTpuLmdldEJvdW5kcygpO3Qub3JpZ2luSW5zdGFuY2UuYWRkQ29weXJpZ2h0KHtpZDppLmlkLGNvbnRlbnQ6aS5jb250ZW50LGJvdW5kczpvfSksdC5vcmlnaW5JbnN0YW5jZS5nZXRDb3B5cmlnaHRDb2xsZWN0aW9uKCl9KX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9KS5jYWxsKGUsbigzKSl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oaSl7dmFyIG8sYSxyOyFmdW5jdGlvbihpLHMpe2E9W3QsZSxuKDEpLG4oNCksbigyKV0sbz1zLHZvaWQgMCE9PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5hcHBseShlLGEpOm8pJiYodC5leHBvcnRzPXIpfSgwLGZ1bmN0aW9uKHQsZSxuLG8sYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9cihuKSxsPXIobyk7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tZ2VvbG9jYXRpb25cIixyZW5kZXI6ZnVuY3Rpb24oKXt9LG1peGluczpbKDAscy5kZWZhdWx0KShcImNvbnRyb2xcIildLHByb3BzOnthbmNob3I6e3R5cGU6U3RyaW5nfSxvZmZzZXQ6e3R5cGU6T2JqZWN0fSxzaG93QWRkcmVzc0Jhcjp7dHlwZTpCb29sZWFufSxhdXRvTG9jYXRpb246e3R5cGU6Qm9vbGVhbn0sbG9jYXRpb25JY29uOnt0eXBlOk9iamVjdH19LHdhdGNoOnthbmNob3I6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxvZmZzZXQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxzaG93QWRkcmVzc0JhcjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LGF1dG9Mb2NhdGlvbjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LGxvY2F0aW9uSWNvbjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9fSxtZXRob2RzOntsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5CTWFwLGU9dGhpcy5tYXAsbj10aGlzLmFuY2hvcixvPXRoaXMuc2hvd0FkZHJlc3NCYXIscj10aGlzLmF1dG9Mb2NhdGlvbixzPXRoaXMubG9jYXRpb25JY29uLGM9dGhpcy5vZmZzZXQ7dGhpcy5vcmlnaW5JbnN0YW5jZT1uZXcgdC5HZW9sb2NhdGlvbkNvbnRyb2woe2FuY2hvcjppW25dLHNob3dBZGRyZXNzQmFyOm8sZW5hYmxlQXV0b0xvY2F0aW9uOnIsb2Zmc2V0OmMmJigwLGEuY3JlYXRlU2l6ZSkodCxjKSxsb2NhdGlvbkljb246cyYmKDAsYS5jcmVhdGVJY29uKSh0LHMpfSksbC5kZWZhdWx0LmNhbGwodGhpcyx0aGlzLm9yaWdpbkluc3RhbmNlKSxlLmFkZENvbnRyb2wodGhpcy5vcmlnaW5JbnN0YW5jZSl9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pfSkuY2FsbChlLG4oMykpfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGkpe3ZhciBvLGEscjshZnVuY3Rpb24oaSxzKXthPVt0LGUsbigxKSxuKDIpXSxvPXMsdm9pZCAwIT09KHI9XCJmdW5jdGlvblwiPT10eXBlb2Ygbz9vLmFwcGx5KGUsYSk6bykmJih0LmV4cG9ydHM9cil9KDAsZnVuY3Rpb24odCxlLG4sbyl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fShuKTtlLmRlZmF1bHQ9e25hbWU6XCJibS1tYXAtdHlwZVwiLHJlbmRlcjpmdW5jdGlvbigpe30sbWl4aW5zOlsoMCxhLmRlZmF1bHQpKFwiY29udHJvbFwiKV0scHJvcHM6W1widHlwZVwiLFwibWFwVHlwZXNcIixcImFuY2hvclwiLFwib2Zmc2V0XCJdLHdhdGNoOnthbmNob3I6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxvZmZzZXQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSx0eXBlOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX0sbWFwVHlwZXM6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG49dGhpcy5hbmNob3IsYT10aGlzLm9mZnNldCxyPXRoaXMudHlwZSxzPVtdO3RoaXMubWFwVHlwZXMmJnRoaXMubWFwVHlwZXMuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gcy5wdXNoKGlbdF0pfSksdGhpcy5vcmlnaW5JbnN0YW5jZT1uZXcgdC5NYXBUeXBlQ29udHJvbCh7YW5jaG9yOmlbbl0sb2Zmc2V0OmEmJigwLG8uY3JlYXRlU2l6ZSkodCxhKSx0eXBlOmlbcl0sbWFwVHlwZXM6c30pLGUuYWRkQ29udHJvbCh0aGlzLm9yaWdpbkluc3RhbmNlKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9KS5jYWxsKGUsbigzKSl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oaSl7dmFyIG8sYSxyOyFmdW5jdGlvbihpLHMpe2E9W3QsZSxuKDEpLG4oMildLG89cyx2b2lkIDAhPT0ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28uYXBwbHkoZSxhKTpvKSYmKHQuZXhwb3J0cz1yKX0oMCxmdW5jdGlvbih0LGUsbixvKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KG4pO2UuZGVmYXVsdD17bmFtZTpcImJtLW5hdmlnYXRpb25cIixyZW5kZXI6ZnVuY3Rpb24oKXt9LG1peGluczpbKDAsYS5kZWZhdWx0KShcImNvbnRyb2xcIildLHByb3BzOnthbmNob3I6e3R5cGU6U3RyaW5nfSxvZmZzZXQ6e3R5cGU6T2JqZWN0fSx0eXBlOnt0eXBlOk9iamVjdH0sc2hvd1pvb21JbmZvOnt0eXBlOkJvb2xlYW59LGVuYWJsZUdlb2xvY2F0aW9uOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LHdhdGNoOnthbmNob3I6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxvZmZzZXQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSx0eXBlOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX0sc2hvd1pvb21JbmZvOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX19LG1ldGhvZHM6e2xvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkJNYXAsZT10aGlzLm1hcCxuPXRoaXMuYW5jaG9yLGE9dGhpcy5vZmZzZXQscj10aGlzLnR5cGUscz10aGlzLnNob3dab29tSW5mbyxsPXRoaXMuZW5hYmxlR2VvbG9jYXRpb247dGhpcy5vcmlnaW5JbnN0YW5jZT1uZXcgdC5OYXZpZ2F0aW9uQ29udHJvbCh7YW5jaG9yOmlbbl0sb2Zmc2V0OmEmJigwLG8uY3JlYXRlU2l6ZSkodCxhKSx0eXBlOnIsc2hvd1pvb21JbmZvOnMsZW5hYmxlR2VvbG9jYXRpb246bH0pLGUuYWRkQ29udHJvbCh0aGlzLm9yaWdpbkluc3RhbmNlKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9KS5jYWxsKGUsbigzKSl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oaSl7dmFyIG8sYSxyOyFmdW5jdGlvbihpLHMpe2E9W3QsZSxuKDIpLG4oMSksbig0KV0sbz1zLHZvaWQgMCE9PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5hcHBseShlLGEpOm8pJiYodC5leHBvcnRzPXIpfSgwLGZ1bmN0aW9uKHQsZSxuLG8sYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9cihvKSxsPXIoYSk7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tb3ZlcnZpZXctbWFwXCIsbWl4aW5zOlsoMCxzLmRlZmF1bHQpKFwiY29udHJvbFwiKV0scmVuZGVyOmZ1bmN0aW9uKCl7fSxwcm9wczp7YW5jaG9yOnt0eXBlOlN0cmluZ30sb2Zmc2V0Ont0eXBlOk9iamVjdH0sc2l6ZTp7dHlwZTpPYmplY3R9LGlzT3Blbjp7dHlwZTpCb29sZWFufX0sd2F0Y2g6e2FuY2hvcjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LG9mZnNldDpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LHNpemU6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxpc09wZW46ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG89dGhpcy5pc09wZW4sYT10aGlzLnNpemUscj10aGlzLm9mZnNldCxzPXRoaXMuYW5jaG9yLGM9W107dGhpcy5tYXBUeXBlcyYmdGhpcy5tYXBUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe2MucHVzaChpW3RdKX0pLHRoaXMub3JpZ2luSW5zdGFuY2U9bmV3IHQuT3ZlcnZpZXdNYXBDb250cm9sKHthbmNob3I6aVtzXSxvZmZzZXQ6KDAsbi5jcmVhdGVTaXplKSh0LHIpLHNpemU6KDAsbi5jcmVhdGVTaXplKSh0LGEpLGlzT3BlbjpvfSksbC5kZWZhdWx0LmNhbGwodGhpcyx0aGlzLm9yaWdpbkluc3RhbmNlKSxlLmFkZENvbnRyb2wodGhpcy5vcmlnaW5JbnN0YW5jZSl9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pfSkuY2FsbChlLG4oMykpfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGkpe3ZhciBvLGEscjshZnVuY3Rpb24oaSxzKXthPVt0LGUsbigxKSxuKDIpXSxvPXMsdm9pZCAwIT09KHI9XCJmdW5jdGlvblwiPT10eXBlb2Ygbz9vLmFwcGx5KGUsYSk6bykmJih0LmV4cG9ydHM9cil9KDAsZnVuY3Rpb24odCxlLG4sbyl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fShuKTtlLmRlZmF1bHQ9e25hbWU6XCJibS1wYW5vcmFtYVwiLG1peGluczpbKDAsYS5kZWZhdWx0KShcImNvbnRyb2xcIildLHJlbmRlcjpmdW5jdGlvbigpe30scHJvcHM6W1wiYW5jaG9yXCIsXCJvZmZzZXRcIl0sd2F0Y2g6e2FuY2hvcjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LG9mZnNldDpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9fSxtZXRob2RzOntsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5CTWFwLGU9dGhpcy5tYXAsbj10aGlzLmFuY2hvcixhPXRoaXMub2Zmc2V0O3RoaXMub3JpZ2luSW5zdGFuY2U9bmV3IHQuUGFub3JhbWFDb250cm9sKHthbmNob3I6aVtuXSxvZmZzZXQ6YSYmKDAsby5jcmVhdGVTaXplKSh0LGEpfSksZS5hZGRDb250cm9sKHRoaXMub3JpZ2luSW5zdGFuY2UpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0pLmNhbGwoZSxuKDMpKX0sZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbihpKXt2YXIgbyxhLHI7IWZ1bmN0aW9uKGkscyl7YT1bdCxlLG4oMSksbigyKV0sbz1zLHZvaWQgMCE9PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5hcHBseShlLGEpOm8pJiYodC5leHBvcnRzPXIpfSgwLGZ1bmN0aW9uKHQsZSxuLG8pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0obik7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tc2NhbGVcIixyZW5kZXI6ZnVuY3Rpb24oKXt9LG1peGluczpbKDAsYS5kZWZhdWx0KShcImNvbnRyb2xcIildLHByb3BzOnthbmNob3I6e3R5cGU6U3RyaW5nfSxvZmZzZXQ6e3R5cGU6T2JqZWN0fX0sd2F0Y2g6e2FuY2hvcjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LG9mZnNldDpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9fSxtZXRob2RzOntsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5CTWFwLGU9dGhpcy5tYXAsbj10aGlzLmFuY2hvcixhPXRoaXMub2Zmc2V0O3RoaXMub3JpZ2luSW5zdGFuY2U9bmV3IHQuU2NhbGVDb250cm9sKHthbmNob3I6aVtuXSxvZmZzZXQ6YSYmKDAsby5jcmVhdGVTaXplKSh0LGEpfSksZS5hZGRDb250cm9sKHRoaXMub3JpZ2luSW5zdGFuY2UpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0pLmNhbGwoZSxuKDMpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbig3OSksbigxKSxuKDQpLG4oMildLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbixpLG8sYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9cihuKSxsPXIoaSksYz1yKG8pLHU9W1wiY2xpY2tcIixcImRibGNsaWNrXCIsXCJtb3VzZWRvd25cIixcIm1vdXNldXBcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIixcInJlbW92ZVwiLFwibGluZXVwZGF0ZVwiXTtlLmRlZmF1bHQ9e25hbWU6XCJibWwtY3VydmUtbGluZVwiLHJlbmRlcjpmdW5jdGlvbigpe30sbWl4aW5zOlsoMCxsLmRlZmF1bHQpKFwib3ZlcmxheVwiKV0scHJvcHM6e3BvaW50czp7dHlwZTpBcnJheSxkZWZhdWx0OkFycmF5fSxzdHJva2VDb2xvcjp7dHlwZTpTdHJpbmd9LHN0cm9rZVdlaWdodDp7dHlwZTpOdW1iZXJ9LHN0cm9rZU9wYWNpdHk6e3R5cGU6TnVtYmVyfSxzdHJva2VTdHlsZTp7dHlwZTpTdHJpbmd9LG1hc3NDbGVhcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNsaWNraW5nOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sZWRpdGluZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSx3YXRjaDp7cG9pbnRzOntoYW5kbGVyOmZ1bmN0aW9uKHQsZSl7dGhpcy5vcmlnaW5JbnN0YW5jZS5kaXNhYmxlRWRpdGluZygpLHRoaXMucmVsb2FkKCl9LGRlZXA6ITB9LHN0cm9rZUNvbG9yOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0U3Ryb2tlQ29sb3IodCl9LHN0cm9rZU9wYWNpdHk6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRTdHJva2VPcGFjaXR5KHQpfSxzdHJva2VXZWlnaHQ6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRTdHJva2VPcGFjaXR5KHQpfSxzdHJva2VTdHlsZTpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldFN0cm9rZVN0eWxlKHQpfSxlZGl0aW5nOmZ1bmN0aW9uKHQpe3Q/dGhpcy5vcmlnaW5JbnN0YW5jZS5lbmFibGVFZGl0aW5nKCk6dGhpcy5vcmlnaW5JbnN0YW5jZS5kaXNhYmxlRWRpdGluZygpfSxtYXNzQ2xlYXI6ZnVuY3Rpb24odCl7dD90aGlzLm9yaWdpbkluc3RhbmNlLmVuYWJsZU1hc3NDbGVhcigpOnRoaXMub3JpZ2luSW5zdGFuY2UuZGlzYWJsZU1hc3NDbGVhcigpfSxjbGlja2luZzpmdW5jdGlvbih0KXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG49dGhpcy5wb2ludHMsaT10aGlzLnN0cm9rZUNvbG9yLG89dGhpcy5zdHJva2VXZWlnaHQscj10aGlzLnN0cm9rZU9wYWNpdHksbD10aGlzLnN0cm9rZVN0eWxlLGg9dGhpcy5lZGl0aW5nLHA9dGhpcy5tYXNzQ2xlYXIsZD10aGlzLmNsaWNraW5nLGY9bmV3IHMuZGVmYXVsdChuLm1hcChmdW5jdGlvbihlKXtyZXR1cm4oMCxhLmNyZWF0ZVBvaW50KSh0LGUpfSkse3N0cm9rZUNvbG9yOmksc3Ryb2tlV2VpZ2h0Om8sc3Ryb2tlT3BhY2l0eTpyLHN0cm9rZVN0eWxlOmwsZW5hYmxlTWFzc0NsZWFyOnAsZW5hYmxlQ2xpY2tpbmc6ZH0pO2g/Zi5lbmFibGVFZGl0aW5nKCk6Zi5kaXNhYmxlRWRpdGluZygpLHRoaXMub3JpZ2luSW5zdGFuY2U9ZixlLmFkZE92ZXJsYXkoZiksYy5kZWZhdWx0LmNhbGwodGhpcyxmLHUpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigxKSxuKDgwKV0saT1zLHZvaWQgMCE9PShhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShlLG8pOmkpJiYodC5leHBvcnRzPWEpfSgwLGZ1bmN0aW9uKHQsZSxuLGkpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPW8obikscj1vKGkpO2UuZGVmYXVsdD17bmFtZTpcImJtbC1oZWF0bWFwXCIscmVuZGVyOmZ1bmN0aW9uKCl7fSxtaXhpbnM6WygwLGEuZGVmYXVsdCkoXCJvdmVybGF5XCIpXSxwcm9wczp7ZGF0YTp7dHlwZTpBcnJheSxkZWZhdWx0OkFycmF5fSxtYXg6e3R5cGU6TnVtYmVyfSxyYWRpdXM6e3R5cGU6TnVtYmVyfSxncmFkaWVudDp7dHlwZTpPYmplY3R9LG9wYWNpdHk6e3R5cGU6TnVtYmVyfX0sd2F0Y2g6e2RhdGE6e2hhbmRsZXI6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxkZWVwOiEwfSxtYXg6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxyYWRpdXM6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMub3BhY2l0eSxpPXRoaXMuZ3JhZGllbnQ7ZS5zZXRPcHRpb25zKHtyYWRpdXM6dCxvcGFjaXR5Om4sZ3JhZGllbnQ6aX0pfSxncmFkaWVudDp7aGFuZGxlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlLG49dGhpcy5yYWRpdXMsaT10aGlzLm9wYWNpdHk7ZS5zZXRPcHRpb25zKHtyYWRpdXM6bixvcGFjaXR5OmksZ3JhZGllbnQ6dH0pfSxkZWVwOiEwfSxvcGFjaXR5OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3JpZ2luSW5zdGFuY2Usbj10aGlzLnJhZGl1cyxpPXRoaXMuZ3JhZGllbnQ7ZS5zZXRPcHRpb25zKHtyYWRpdXM6bixvcGFjaXR5OnQsZ3JhZGllbnQ6aX0pfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMubWFwLGU9dGhpcy5kYXRhLG49dGhpcy5tYXgsaT10aGlzLnJhZGl1cyxvPXRoaXMub3BhY2l0eSxhPXRoaXMuZ3JhZGllbnQscz10aGlzLm9yaWdpbkluc3RhbmNlPW5ldyByLmRlZmF1bHQoe3JhZGl1czppLG9wYWNpdHk6byxncmFkaWVudDphfSk7dC5hZGRPdmVybGF5KHMpLHMuc2V0RGF0YVNldCh7ZGF0YTplLG1heDpufSl9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pfSxmdW5jdGlvbih0LGUsbil7dmFyIGksbyxhOyFmdW5jdGlvbihyLHMpe289W3QsZSxuKDEpLG4oMiksbig4MSldLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbixpLG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWEobikscz1hKG8pO2UuZGVmYXVsdD17bmFtZTpcImJtLWx1c2h1XCIscmVuZGVyOmZ1bmN0aW9uKHQpe30sbWl4aW5zOlsoMCxyLmRlZmF1bHQpKFwibHVzaHVcIildLHByb3BzOntwYXRoOnt0eXBlOkFycmF5LGRlZmF1bHQ6W119LGxhbmRtYXJrUG9pczp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuW119fSxpY29uOnt0eXBlOk9iamVjdH0sc3BlZWQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6NGUzfSxjb250ZW50Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiXCJ9LGF1dG9WaWV3Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scm90YXRpb246e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxpbmZvV2luZG93Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0scGxheTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9fSx3YXRjaDp7cGF0aDp7aGFuZGxlcjpmdW5jdGlvbih0KXt0aGlzLnJlbG9hZCgpfSxkZWVwOiEwfSxsYW5kbWFya1BvaXM6e2hhbmRsZXI6ZnVuY3Rpb24odCl7dGhpcy5yZWxvYWQoKX0sZGVlcDohMH0saWNvbjp7aGFuZGxlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlLG49KHRoaXMuY29udGVudCwoMCxpLmNyZWF0ZUljb24pKEJNYXAsdCkpO2UuX29wdHMuaWNvbj1uLGUuX21hcmtlcj1ufSxkZWVwOiEwfSxzcGVlZDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlO3RoaXMuY29udGVudDtlLl9vcHRzLnNwZWVkPXR9LGNvbnRlbnQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMuaW5mb1dpbmRvdzt0JiZuP2Uuc2hvd0luZm9XaW5kb3coKTplLmhpZGVJbmZvV2luZG93KCksZS5fb3B0cy5kZWZhdWx0Q29udGVudD10LGUuX292ZXJsYXkmJmUuX292ZXJsYXkuc2V0SHRtbCh0KX0sYXV0b1ZpZXc6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZTt0aGlzLmNvbnRlbnQ7ZS5fb3B0cy5hdXRvVmlldz10fSxyb3RhdGlvbjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlO3RoaXMuY29udGVudDtlLl9vcHRzLmVuYWJsZVJvdGF0aW9uPXR9LGluZm9XaW5kb3c6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMuY29udGVudDtlJiZ0JiZuP2Uuc2hvd0luZm9XaW5kb3coKTplLmhpZGVJbmZvV2luZG93KCl9LHBsYXk6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZTt0JiZlP2Uuc3RhcnQoKTohdGhpcy5faXNFbmQmJmUucGF1c2UoKX19LG1ldGhvZHM6e2xvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5CTWFwLG49dGhpcy5tYXAsbz10aGlzLnBhdGgsYT10aGlzLmxhbmRtYXJrUG9pcyxyPXRoaXMuaWNvbixsPXRoaXMuc3BlZWQsYz10aGlzLmNvbnRlbnQsdT10aGlzLmF1dG9WaWV3LGg9dGhpcy5yb3RhdGlvbixwPXRoaXMuaW5mb1dpbmRvdyxkPXRoaXMucGxheSxmPXRoaXMub3JpZ2luSW5zdGFuY2U9bmV3IHMuZGVmYXVsdChuLG8se2VuYWJsZVJvdGF0aW9uOmgsbGFuZG1hcmtQb2lzOmEsc2hvd0luZm9XaW5kb3c6cCxkZWZhdWx0Q29udGVudDpjLGljb246ciYmKDAsaS5jcmVhdGVJY29uKShlLHIpLHNwZWVkOmwsYXV0b1ZpZXc6dSxvbnN0YXJ0OmZ1bmN0aW9uKGUpe3QuX2lzRW5kPSExLHQuJGVtaXQoXCJzdGFydFwiKX0sb25zdG9wOmZ1bmN0aW9uKGUpe3QuX2lzRW5kPSEwLHQuJGVtaXQoXCJzdG9wXCIpfSxvbnBhdXNlOmZ1bmN0aW9uKGUpe3JldHVybiB0LiRlbWl0KFwicGF1c2VcIil9fSk7ZCYmby5sZW5ndGgmJmYuc3RhcnQodGhpcyksby5sZW5ndGgmJihjJiZwP2Yuc2hvd0luZm9XaW5kb3coKTpmLmhpZGVJbmZvV2luZG93KCkpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbig4MiksbigyKSxuKDEpXSxpPXMsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCxlLG4saSxvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1hKG4pLHM9YShvKTtlLmRlZmF1bHQ9e25hbWU6XCJibWwtbWFya2VyLWNsdXNldGVyXCIsbWl4aW5zOlsoMCxzLmRlZmF1bHQpKFwibWFya2VyQ2x1c3RlcmVyXCIpXSxwcm9wczp7Z3JpZFNpemU6e3R5cGU6T2JqZWN0fSxtYXhab29tOnt0eXBlOk51bWJlcn0sbWluQ2x1c3RlclNpemU6e3R5cGU6T2JqZWN0fSxzdHlsZXM6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX0sYXZlcmFnZUNlbnRlcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSx3YXRjaDp7Z3JpZFNpemU6e2hhbmRsZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5CTWFwO3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0R3JpZFNpemUoZSx0Lm1hcCl9LGRlZXA6ITB9LG1heFpvb206ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRNYXhab29tKHQpfSxtaW5DbHVzdGVyU2l6ZTp7aGFuZGxlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkJNYXA7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRNaW5DbHVzdGVyU2l6ZSgoMCxpLmNyZWF0ZVNpemUpKGUsdCkpfSxkZWVwOiEwfSxzdHlsZXM6e2hhbmRsZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5CTWFwLG49dGhpcy5vcmlnaW5JbnN0YW5jZSxvPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodCkpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaXplPXQuc2l6ZSYmKDAsaS5jcmVhdGVTaXplKShlLHQuc2l6ZSksdH0pO24uc2V0U3R5bGVzKG8pfSxkZWVwOiEwfSxhdmVyYWdlQ2VudGVyOmZ1bmN0aW9uKHQpe3RoaXMucmVsb2FkKCl9fSxtZXRob2RzOntsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuQk1hcCxuPXRoaXMubWFwLG89dGhpcy5ncmlkU2l6ZSxhPXRoaXMubWluQ2x1c3RlclNpemUscz10aGlzLm1heFpvb20sbD10aGlzLnN0eWxlcyxjPXRoaXMuYXZlcmFnZUNlbnRlcjt0aGlzLm9yaWdpbkluc3RhbmNlPW5ldyByLmRlZmF1bHQobix7Z3JpZFNpemU6byYmKDAsaS5jcmVhdGVTaXplKShlLG8pLG1heFpvb206cyxtaW5DbHVzdGVyU2l6ZTphJiYoMCxpLmNyZWF0ZVNpemUpKGUsYSksc3R5bGVzOmwubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNpemU9KDAsaS5jcmVhdGVTaXplKShlLHQuc2l6ZSksdH0pLGlzQXZlcmFnZUNlbnRlcjpjfSksdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXt2YXIgbj10LiRjaGlsZHJlbi5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQub3JpZ2luSW5zdGFuY2V9KS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBlLk1hcmtlcn0pO3Qub3JpZ2luSW5zdGFuY2UuYWRkTWFya2VycyhuKX0pfX0sYmVmb3JlQ3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5wcmV2ZW50Q2hpbGRyZW5SZW5kZXI9ITB9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxvLGE7IWZ1bmN0aW9uKHIscyl7bz1bdCxlLG4oMSksbigyKV0saT1zLHZvaWQgMCE9PShhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShlLG8pOmkpJiYodC5leHBvcnRzPWEpfSgwLGZ1bmN0aW9uKHQsZSxuLGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0obik7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tdGlsZVwiLHJlbmRlcjpmdW5jdGlvbih0KXt9LG1peGluczpbKDAsby5kZWZhdWx0KShcImxheWVyXCIpXSxwcm9wczp7dHJhbnNwYXJlbnRQbmc6e3R5cGU6Qm9vbGVhbn0sdGlsZVVybFRlbXBsYXRlOnt0eXBlOlN0cmluZ30sY29weXJpZ2h0Ont9LHpJbmRleDp7dHlwZTpOdW1iZXJ9fSx3YXRjaDp7dHJhbnNwYXJlbnRQbmc6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSx0aWxlVXJsVGVtcGxhdGU6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxjb3B5cmlnaHQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSx6SW5kZXg6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG49dGhpcy50cmFuc3BhcmVudFBuZyxvPXRoaXMudGlsZVVybFRlbXBsYXRlLGE9dGhpcy5jb3B5cmlnaHQscj10aGlzLnpJbmRleDt0aGlzLm9yaWdpbkluc3RhbmNlPW5ldyB0LlRpbGVMYXllcih7dHJhbnNwYXJlbnRQbmc6bix0aWxlVXJsVGVtcGxhdGU6byxjb3B5cmlnaHQ6YSYme2lkOmEuaWQsY29udGVudDphLmNvbnRlbnQsYm91bmRzOmEuYm91bmRzJiYoMCxpLmNyZWF0ZUJvdW5kcykoYS5ib3VuZHMpfSx6SW5kZXg6cn0pLGUuYWRkVGlsZUxheWVyKHRoaXMub3JpZ2luSW5zdGFuY2UpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigxKV0saT1zLHZvaWQgMCE9PShhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aS5hcHBseShlLG8pOmkpJiYodC5leHBvcnRzPWEpfSgwLGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KG4pO2UuZGVmYXVsdD17bmFtZTpcImJtLXRyaWZmaWNcIixyZW5kZXI6ZnVuY3Rpb24odCl7fSxtaXhpbnM6WygwLGkuZGVmYXVsdCkoXCJsYXllclwiKV0scHJvcHM6e3ByZWRpY3REYXRlOnt0eXBlOk9iamVjdH19LHdhdGNoOntcInByaWRpY3REYXRlLndlZWtkYXlcIjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LFwicHJpZGljdERhdGUuaG91clwiOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX0scHJpZGljdERhdGU6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMucHJpZGljdERhdGUsZT10aGlzLkJNYXAsbj10aGlzLm1hcDt0aGlzLm9yaWdpbkluc3RhbmNlPW5ldyBlLlRyYWZmaWNMYXllcih7cHJpZGljdERhdGU6dH0pLG4uYWRkVGlsZUxheWVyKHRoaXMub3JpZ2luSW5zdGFuY2UpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4peyhmdW5jdGlvbihpKXt2YXIgbyxhLHI7IWZ1bmN0aW9uKGkscyl7YT1bdCxlLG4oNCksbig1KV0sbz1zLHZvaWQgMCE9PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5hcHBseShlLGEpOm8pJiYodC5leHBvcnRzPXIpfSgwLGZ1bmN0aW9uKHQsZSxuLG8pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0obik7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tbWFwXCIscHJvcHM6e2FrOnt0eXBlOlN0cmluZ30sY2VudGVyOnt0eXBlOltPYmplY3QsU3RyaW5nXX0sem9vbTp7dHlwZTpOdW1iZXJ9LG1pblpvb206e3R5cGU6TnVtYmVyfSxtYXhab29tOnt0eXBlOk51bWJlcn0saGlnaFJlc29sdXRpb246e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxtYXBDbGljazp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1hcFR5cGU6e3R5cGU6U3RyaW5nfSxkcmFnZ2luZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHNjcm9sbFdoZWVsWm9vbTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGRvdWJsZUNsaWNrWm9vbTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGtleWJvYXJkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0saW5lcnRpYWxEcmFnZ2luZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGNvbnRpbnVvdXNab29tOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0scGluY2hUb1pvb206e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxhdXRvUmVzaXplOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sdGhlbWU6e3R5cGU6QXJyYXl9LG1hcFN0eWxlOnt0eXBlOk9iamVjdH19LHdhdGNoOntjZW50ZXI6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLm1hcCxpPXRoaXMuem9vbTtcIlN0cmluZ1wiPT09KDAsby5jaGVja1R5cGUpKHQpJiZ0IT09ZSYmbi5jZW50ZXJBbmRab29tKHQsaSl9LFwiY2VudGVyLmxuZ1wiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5CTWFwLGk9dGhpcy5tYXAsbz10aGlzLnpvb20sYT10aGlzLmNlbnRlcjt0IT09ZSYmdD49LTE4MCYmdDw9MTgwJiZpLmNlbnRlckFuZFpvb20obmV3IG4uUG9pbnQodCxhLmxhdCksbyl9LFwiY2VudGVyLmxhdFwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5CTWFwLGk9dGhpcy5tYXAsbz10aGlzLnpvb20sYT10aGlzLmNlbnRlcjt0IT09ZSYmdD49LTc0JiZ0PD03NCYmaS5jZW50ZXJBbmRab29tKG5ldyBuLlBvaW50KGEubG5nLHQpLG8pfSx6b29tOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYXA7dCE9PWUmJnQ+PTMmJnQ8PTE5JiZuLnNldFpvb20odCl9LG1pblpvb206ZnVuY3Rpb24odCl7dGhpcy5tYXAuc2V0TWluWm9vbSh0KX0sbWF4Wm9vbTpmdW5jdGlvbih0KXt0aGlzLm1hcC5zZXRNYXhab29tKHQpfSxoaWdoUmVzb2x1dGlvbjpmdW5jdGlvbigpe3RoaXMucmVzZXQoKX0sbWFwQ2xpY2s6ZnVuY3Rpb24oKXt0aGlzLnJlc2V0KCl9LG1hcFR5cGU6ZnVuY3Rpb24odCl7dGhpcy5tYXAuc2V0TWFwVHlwZShpW3RdKX0sZHJhZ2dpbmc6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5tYXA7dD9lLmVuYWJsZURyYWdnaW5nKCk6ZS5kaXNhYmxlRHJhZ2dpbmcoKX0sc2Nyb2xsV2hlZWxab29tOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubWFwO3Q/ZS5lbmFibGVTY3JvbGxXaGVlbFpvb20oKTplLmRpc2FibGVTY3JvbGxXaGVlbFpvb20oKX0sZG91YmxlQ2xpY2tab29tOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubWFwO3Q/ZS5lbmFibGVEb3VibGVDbGlja1pvb20oKTplLmRpc2FibGVEb3VibGVDbGlja1pvb20oKX0sa2V5Ym9hcmQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5tYXA7dD9lLmVuYWJsZUtleWJvYXJkKCk6ZS5kaXNhYmxlS2V5Ym9hcmQoKX0saW5lcnRpYWxEcmFnZ2luZzpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm1hcDt0P2UuZW5hYmxlSW5lcnRpYWxEcmFnZ2luZygpOmUuZGlzYWJsZUluZXJ0aWFsRHJhZ2dpbmcoKX0sY29udGludW91c1pvb206ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5tYXA7dD9lLmVuYWJsZUNvbnRpbnVvdXNab29tKCk6ZS5kaXNhYmxlQ29udGludW91c1pvb20oKX0scGluY2hUb1pvb206ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5tYXA7dD9lLmVuYWJsZVBpbmNoVG9ab29tKCk6ZS5kaXNhYmxlUGluY2hUb1pvb20oKX0sYXV0b1Jlc2l6ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm1hcDt0P2UuZW5hYmxlQXV0b1Jlc2l6ZSgpOmUuZGlzYWJsZUF1dG9SZXNpemUoKX0sdGhlbWU6ZnVuY3Rpb24odCl7dGhpcy5tYXAuc2V0TWFwU3R5bGUoe3N0eWxlSnNvbjp0fSl9LFwibWFwU3R5bGUuZmVhdHVyZXNcIjp7aGFuZGxlcjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMubWFwLGk9dGhpcy5tYXBTdHlsZSxvPWkuc3R5bGUsYT1pLnN0eWxlSnNvbjtuLnNldE1hcFN0eWxlKHtzdHlsZUpzb246YSxmZWF0dXJlczp0LHN0eWxlOm99KX0sZGVlcDohMH0sXCJtYXBTdHlsZS5zdHlsZVwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYXAsaT10aGlzLm1hcFN0eWxlLG89aS5mZWF0dXJlcyxhPWkuc3R5bGVKc29uO24uc2V0TWFwU3R5bGUoe3N0eWxlSnNvbjphLGZlYXR1cmVzOm8sc3R5bGU6dH0pfSxcIm1hcFN0eWxlLnN0eWxlSnNvblwiOntoYW5kbGVyOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYXAsaT10aGlzLm1hcFN0eWxlLG89aS5mZWF0dXJlcyxhPWkuc3R5bGU7bi5zZXRNYXBTdHlsZSh7c3R5bGVKc29uOnQsZmVhdHVyZXM6byxzdHlsZTphfSl9LGRlZXA6ITB9LG1hcFN0eWxlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubWFwOyF0aGlzLnRoZW1lJiZlLnNldE1hcFN0eWxlKHQpfX0sbWV0aG9kczp7c2V0TWFwT3B0aW9uczpmdW5jdGlvbigpe3ZhciB0PXRoaXMubWFwLGU9dGhpcy5taW5ab29tLG49dGhpcy5tYXhab29tLG89dGhpcy5tYXBUeXBlLGE9dGhpcy5kcmFnZ2luZyxyPXRoaXMuc2Nyb2xsV2hlZWxab29tLHM9dGhpcy5kb3VibGVDbGlja1pvb20sbD10aGlzLmtleWJvYXJkLGM9dGhpcy5pbmVydGlhbERyYWdnaW5nLHU9dGhpcy5jb250aW51b3VzWm9vbSxoPXRoaXMucGluY2hUb1pvb20scD10aGlzLmF1dG9SZXNpemU7ZSYmdC5zZXRNaW5ab29tKGUpLG4mJnQuc2V0TWF4Wm9vbShuKSxvJiZ0LnNldE1hcFR5cGUoaVtvXSksYT90LmVuYWJsZURyYWdnaW5nKCk6dC5kaXNhYmxlRHJhZ2dpbmcoKSxyP3QuZW5hYmxlU2Nyb2xsV2hlZWxab29tKCk6dC5kaXNhYmxlU2Nyb2xsV2hlZWxab29tKCkscz90LmVuYWJsZURvdWJsZUNsaWNrWm9vbSgpOnQuZGlzYWJsZURvdWJsZUNsaWNrWm9vbSgpLGw/dC5lbmFibGVLZXlib2FyZCgpOnQuZGlzYWJsZUtleWJvYXJkKCksYz90LmVuYWJsZUluZXJ0aWFsRHJhZ2dpbmcoKTp0LmRpc2FibGVJbmVydGlhbERyYWdnaW5nKCksdT90LmVuYWJsZUNvbnRpbnVvdXNab29tKCk6dC5kaXNhYmxlQ29udGludW91c1pvb20oKSxoP3QuZW5hYmxlUGluY2hUb1pvb20oKTp0LmRpc2FibGVQaW5jaFRvWm9vbSgpLHA/dC5lbmFibGVBdXRvUmVzaXplKCk6dC5kaXNhYmxlQXV0b1Jlc2l6ZSgpfSxpbml0OmZ1bmN0aW9uKHQpe2lmKCF0aGlzLm1hcCl7dmFyIGU9dGhpcy4kcmVmcy52aWV3LG49ITAsaT0hMSxvPXZvaWQgMDt0cnl7Zm9yKHZhciByLHM9KHRoaXMuJHNsb3RzLmRlZmF1bHR8fFtdKVtTeW1ib2wuaXRlcmF0b3JdKCk7IShuPShyPXMubmV4dCgpKS5kb25lKTtuPSEwKXt2YXIgbD1yLnZhbHVlO2wuY29tcG9uZW50T3B0aW9ucyYmXCJibS12aWV3XCI9PT1sLmNvbXBvbmVudE9wdGlvbnMudGFnJiYodGhpcy5oYXNCbVZpZXc9ITAsZT1sLmVsbSl9fWNhdGNoKHQpe2k9ITAsbz10fWZpbmFsbHl7dHJ5eyFuJiZzLnJldHVybiYmcy5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgb319dmFyIGM9bmV3IHQuTWFwKGUse2VuYWJsZUhpZ2hSZXNvbHV0aW9uOnRoaXMuaGlnaFJlc29sdXRpb24sZW5hYmxlTWFwQ2xpY2s6dGhpcy5tYXBDbGlja30pO3RoaXMubWFwPWM7dmFyIHU9dGhpcy5zZXRNYXBPcHRpb25zLGg9dGhpcy56b29tLHA9dGhpcy5nZXRDZW50ZXJQb2ludCxkPXRoaXMudGhlbWUsZj10aGlzLm1hcFN0eWxlO2Q/Yy5zZXRNYXBTdHlsZSh7c3R5bGVKc29uOmR9KTpjLnNldE1hcFN0eWxlKGYpLHUoKSxhLmRlZmF1bHQuY2FsbCh0aGlzLGMpLGMucmVzZXQoKSxjLmNlbnRlckFuZFpvb20ocCgpLGgpLHRoaXMuJGVtaXQoXCJyZWFkeVwiLHtCTWFwOnQsbWFwOmN9KX19LGdldENlbnRlclBvaW50OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jZW50ZXIsZT10aGlzLkJNYXA7c3dpdGNoKCgwLG8uY2hlY2tUeXBlKSh0KSl7Y2FzZVwiU3RyaW5nXCI6cmV0dXJuIHQ7Y2FzZVwiT2JqZWN0XCI6cmV0dXJuIG5ldyBlLlBvaW50KHQubG5nLHQubGF0KTtkZWZhdWx0OnJldHVybiBuZXcgZS5Qb2ludH19LGluaXRNYXA6ZnVuY3Rpb24odCl7dGhpcy5CTWFwPXQsdGhpcy5pbml0KHQpfSxnZXRNYXBTY3JpcHQ6ZnVuY3Rpb24oKXtpZihpLkJNYXApcmV0dXJuIGkuQk1hcC5fcHJlbG9hZGVyP2kuQk1hcC5fcHJlbG9hZGVyOlByb21pc2UucmVzb2x2ZShpLkJNYXApO3ZhciB0PXRoaXMuYWt8fHRoaXMuX0JNYXAoKS5haztyZXR1cm4gaS5CTWFwPXt9LGkuQk1hcC5fcHJlbG9hZGVyPW5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsbil7aS5faW5pdEJhaWR1TWFwPWZ1bmN0aW9uKCl7ZShpLkJNYXApLGkuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChvKSxpLkJNYXAuX3ByZWxvYWRlcj1udWxsLGkuX2luaXRCYWlkdU1hcD1udWxsfTt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2kuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvKSxvLnNyYz1cImh0dHBzOi8vYXBpLm1hcC5iYWlkdS5jb20vYXBpP3Y9Mi4wJmFrPVwiK3QrXCImY2FsbGJhY2s9X2luaXRCYWlkdU1hcFwifSksaS5CTWFwLl9wcmVsb2FkZXJ9LHJlc2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRNYXBTY3JpcHQsZT10aGlzLmluaXRNYXA7dCgpLnRoZW4oZSl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5yZXNldCgpfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2hhc0JtVmlldzohMX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9KS5jYWxsKGUsbigzKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxvLGE7IWZ1bmN0aW9uKG4scil7bz1bdCxlXSxpPXIsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJibS12aWV3XCJ9LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigxKSxuKDQpXSxpPXMsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCxlLG4saSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGE9byhuKSxyPW8oaSk7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tYXV0b2NvbXBsZXRlXCIsbWl4aW5zOlsoMCxhLmRlZmF1bHQpKCldLHByb3BzOnt0eXBlczp7dHlwZTpTdHJpbmd9LGxvY2F0aW9uOnt0eXBlOlN0cmluZ30sc3VnU3R5bGU6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm57fX19fSx3YXRjaDp7dHlwZXM6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxsb2NhdGlvbjpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9fSxtZXRob2RzOntsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuQk1hcCxuPXRoaXMubWFwLGk9dGhpcy4kZWwsbz10aGlzLnR5cGVzLGE9dGhpcy5sb2NhdGlvbixzPXRoaXMuc3VnU3R5bGUsbD1pLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtsJiYodGhpcy5vcmlnaW5JbnN0YW5jZT1uZXcgZS5BdXRvY29tcGxldGUoe2lucHV0OmwsdHlwZXM6byxsb2NhdGlvbjphfHxuLG9uU2VhcmNoQ29tcGxldGU6ZnVuY3Rpb24oZSl7dmFyIG49ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YW5ncmFtLXN1Z2dlc3Rpb24tbWFpblwiKSxpPSEwLG89ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgcixsPW5bU3ltYm9sLml0ZXJhdG9yXSgpOyEoaT0ocj1sLm5leHQoKSkuZG9uZSk7aT0hMCl7dmFyIGM9ci52YWx1ZTtmb3IodmFyIHUgaW4gcyljLnN0eWxlW3VdPXNbdV0udG9TdHJpbmcoKX19Y2F0Y2godCl7bz0hMCxhPXR9ZmluYWxseXt0cnl7IWkmJmwucmV0dXJuJiZsLnJldHVybigpfWZpbmFsbHl7aWYobyl0aHJvdyBhfX10LiRlbWl0KFwic2VhcmNoY29tcGxldGVcIixlKX19KSx0aGlzLm9yaWdpbkluc3RhbmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJvbmNvbmZpcm1cIixmdW5jdGlvbihlKXt2YXIgbj1lLml0ZW0udmFsdWU7dC4kZW1pdChcImlucHV0XCIsbi5wcm92aW5jZStuLmNpdHkrbi5kaXN0cmljdCtuLnN0cmVldCtuLmJ1c2luZXNzKX0pLHIuZGVmYXVsdC5jYWxsKHRoaXMsdGhpcy5vcmlnaW5JbnN0YW5jZSkpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbig2KSxuKDEpLG4oNDIpXSxpPXMsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCxlLG4saSxvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1hKG4pLHM9YShpKSxsPWEobyksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt2YXIgbj1bXSxpPSEwLG89ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgcixzPXRbU3ltYm9sLml0ZXJhdG9yXSgpOyEoaT0ocj1zLm5leHQoKSkuZG9uZSkmJihuLnB1c2goci52YWx1ZSksIWV8fG4ubGVuZ3RoIT09ZSk7aT0hMCk7fWNhdGNoKHQpe289ITAsYT10fWZpbmFsbHl7dHJ5eyFpJiZzLnJldHVybiYmcy5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgYX19cmV0dXJuIG59cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZTtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiB0KGUsbik7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIil9fSgpO2UuZGVmYXVsdD17YWJzdHJhY3Q6ITAsbWl4aW5zOlsoMCxzLmRlZmF1bHQpKFwiYWJzdHJhY3RcIiksKDAsbC5kZWZhdWx0KSh7Y29tcG9uZW50OlwiYm0tcG9seWdvblwiLHByb3BzOltcInBhdGhcIixcInN0cm9rZUNvbG9yXCIsXCJzdHJva2VXZWlnaHRcIixcInN0cm9rZU9wYWNpdHlcIixcInN0cm9rZVN0eWxlXCIsXCJmaWxsQ29sb3JcIixcImZpbGxPcGFjaXR5XCIsXCJtYXNzQ2xlYXJcIixcImNsaWNraW5nXCJdLGV4dHJhUHJvcHM6W1wibmFtZVwiXSxleGNlcHRQcm9wczpbXCJwYXRoXCJdLGV2ZW50czpbXCJjbGlja1wiLFwiZGJsY2xpY2tcIixcIm1vdXNlZG93blwiLFwibW91c2V1cFwiLFwibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiLFwicmVtb3ZlXCJdfSldLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cGF0aDpbXX19LGNvbXBvbmVudHM6e0JtUG9seWdvbjpyLmRlZmF1bHR9LHdhdGNoOntuYW1lOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX19LG1ldGhvZHM6e2xvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5CTWFwLG49dGhpcy5uYW1lOyhuZXcgZS5Cb3VuZGFyeSkuZ2V0KG4sZnVuY3Rpb24oZSl7dC5wYXRoPShlLmJvdW5kYXJpZXNbMF18fFtdKS5zcGxpdChcIjtcIikubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgZT1jKHQsMik7cmV0dXJue2xuZzplWzBdLGxhdDplWzFdfX0odC5zcGxpdChcIixcIikubWFwKGZ1bmN0aW9uKHQpe3JldHVybit0fSkpfSl9KX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxvLGE7IWZ1bmN0aW9uKHIscyl7bz1bdCxlLG4oMSksbig0KSxuKDIpXSxpPXMsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCxlLG4saSxvKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBhKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1hKG4pLHM9YShpKTtlLmRlZmF1bHQ9e25hbWU6XCJibS1jaXJjbGVcIixyZW5kZXI6ZnVuY3Rpb24oKXt9LG1peGluczpbKDAsci5kZWZhdWx0KShcIm92ZXJsYXlcIildLHByb3BzOntjZW50ZXI6e30scmFkaXVzOnt9LHN0cm9rZUNvbG9yOnt0eXBlOlN0cmluZ30sc3Ryb2tlV2VpZ2h0Ont0eXBlOk51bWJlcn0sc3Ryb2tlT3BhY2l0eTp7dHlwZTpOdW1iZXJ9LHN0cm9rZVN0eWxlOnt0eXBlOlN0cmluZ30sZmlsbENvbG9yOnt0eXBlOlN0cmluZ30sZmlsbE9wYWNpdHk6e3R5cGU6TnVtYmVyfSxtYXNzQ2xlYXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbGlja2luZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGVkaXRpbmc6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sd2F0Y2g6e1wiY2VudGVyLmxuZ1wiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5CTWFwLGk9dGhpcy5vcmlnaW5JbnN0YW5jZSxhPXRoaXMuaXNFZGl0aW5nLHI9dGhpcy5kaXNhYmxlRWRpdGluZyxzPXRoaXMuZW5hYmxlRWRpdGluZyxsPXRoaXMuY2VudGVyLGM9dGhpcy5lZGl0aW5nO2lmKCFhKXtyKCk7dmFyIHU9dDt0LnRvU3RyaW5nKCkhPT1lLnRvU3RyaW5nKCkmJnU+PS0xODAmJnU8PTE4MCYmaS5zZXRDZW50ZXIoKDAsby5jcmVhdGVQb2ludCkobix7bG5nOnUsbGF0OmwubGF0fSkpLGMmJnMoKX19LFwiY2VudGVyLmxhdFwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5CTWFwLGk9dGhpcy5vcmlnaW5JbnN0YW5jZSxhPXRoaXMuaXNFZGl0aW5nLHI9dGhpcy5kaXNhYmxlRWRpdGluZyxzPXRoaXMuZW5hYmxlRWRpdGluZyxsPXRoaXMuY2VudGVyLGM9dGhpcy5lZGl0aW5nO2lmKCFhKXtyKCk7dmFyIHU9dDt0LnRvU3RyaW5nKCkhPT1lLnRvU3RyaW5nKCkmJnU+PS03NCYmdTw9NzQmJmkuc2V0Q2VudGVyKCgwLG8uY3JlYXRlUG9pbnQpKG4se2xuZzpsLmxuZyxsYXQ6dX0pKSxjJiZzKCl9fSxyYWRpdXM6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLm9yaWdpbkluc3RhbmNlLGk9dGhpcy5pc0VkaXRpbmcsbz10aGlzLmRpc2FibGVFZGl0aW5nLGE9dGhpcy5lbmFibGVFZGl0aW5nLHI9dGhpcy5lZGl0aW5nO2l8fChvKCksbi5zZXRSYWRpdXModCksciYmYSgpKX0sc3Ryb2tlQ29sb3I6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRTdHJva2VDb2xvcih0KX0sc3Ryb2tlT3BhY2l0eTpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldFN0cm9rZU9wYWNpdHkodCl9LHN0cm9rZVdlaWdodDpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldFN0cm9rZU9wYWNpdHkodCl9LHN0cm9rZVN0eWxlOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0U3Ryb2tlU3R5bGUodCl9LGZpbGxDb2xvcjpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldEZpbGxDb2xvcih0KX0sZmlsbE9wYWNpdHk6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRGaWxsT3BhY2l0eSh0KX0sZWRpdGluZzpmdW5jdGlvbih0KXt0P3RoaXMuZW5hYmxlRWRpdGluZygpOnRoaXMuZGlzYWJsZUVkaXRpbmcoKX0sbWFzc0NsZWFyOmZ1bmN0aW9uKHQpe3Q/dGhpcy5vcmlnaW5JbnN0YW5jZS5lbmFibGVNYXNzQ2xlYXIoKTp0aGlzLm9yaWdpbkluc3RhbmNlLmRpc2FibGVNYXNzQ2xlYXIoKX0sY2xpY2tpbmc6ZnVuY3Rpb24odCl7dGhpcy5yZWxvYWQoKX19LG1ldGhvZHM6e2RyYWdTdGFydEhhbmRsZXI6ZnVuY3Rpb24oKXt0aGlzLmlzRWRpdGluZz0hMH0sZHJhZ0VuZEhhbmRsZXI6ZnVuY3Rpb24oKXt0aGlzLmlzRWRpdGluZz0hMSx0aGlzLmJpbmRFZGl0aW5nTm9kZUV2ZW50cygpfSxiaW5kRWRpdGluZ05vZGVFdmVudHM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9yaWdpbkluc3RhbmNlLGU9dGhpcy5lZGl0aW5nS2V5LG49dGhpcy5kcmFnU3RhcnRIYW5kbGVyLGk9dGhpcy5kcmFnRW5kSGFuZGxlcjt0W2VdLmZvckVhY2goZnVuY3Rpb24odCl7dC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsbiksdC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VuZFwiLGkpfSl9LGVuYWJsZUVkaXRpbmc6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9yaWdpbkluc3RhbmNlLGU9dGhpcy5iaW5kRWRpdGluZ05vZGVFdmVudHM7dC5lbmFibGVFZGl0aW5nKCksZSgpfSxkaXNhYmxlRWRpdGluZzpmdW5jdGlvbigpe3RoaXMub3JpZ2luSW5zdGFuY2UuZGlzYWJsZUVkaXRpbmcoKX0sZ2V0RWRpdGluZ0tleTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49W107dC5lbmFibGVFZGl0aW5nKCksc2V0VGltZW91dChmdW5jdGlvbigpe2Zvcih2YXIgaSBpbiB0KXRbaV0mJjI9PT10W2ldLmxlbmd0aCYmbi5wdXNoKGkpO3QuZGlzYWJsZUVkaXRpbmcoKTtmb3IodmFyIG8gaW4gdCl0W29dJiYwPT09dFtvXS5sZW5ndGgmJn5uLmluZGV4T2YobykmJihlLmVkaXRpbmdLZXk9byl9LDApfSxsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5CTWFwLGU9dGhpcy5tYXAsbj10aGlzLmNlbnRlcixpPXRoaXMucmFkaXVzLGE9dGhpcy5zdHJva2VDb2xvcixyPXRoaXMuc3Ryb2tlV2VpZ2h0LGw9dGhpcy5zdHJva2VPcGFjaXR5LGM9dGhpcy5zdHJva2VTdHlsZSx1PXRoaXMuZmlsbENvbG9yLGg9dGhpcy5maWxsT3BhY2l0eSxwPXRoaXMuZWRpdGluZyxkPXRoaXMubWFzc0NsZWFyLGY9dGhpcy5jbGlja2luZyxtPXRoaXMuZW5hYmxlRWRpdGluZyxnPXRoaXMuZGlzYWJsZUVkaXRpbmcseT10aGlzLmdldEVkaXRpbmdLZXksdj10aGlzLmVkaXRpbmdLZXksXz1uZXcgdC5DaXJjbGUoKDAsby5jcmVhdGVQb2ludCkodCx7bG5nOm4ubG5nLGxhdDpuLmxhdH0pLGkse3N0cm9rZUNvbG9yOmEsc3Ryb2tlV2VpZ2h0OnIsc3Ryb2tlT3BhY2l0eTpsLHN0cm9rZVN0eWxlOmMsZmlsbENvbG9yOnUsZmlsbE9wYWNpdHk6aCxlbmFibGVNYXNzQ2xlYXI6ZCxlbmFibGVDbGlja2luZzpmfSk7dGhpcy5vcmlnaW5JbnN0YW5jZT1fLGUuYWRkT3ZlcmxheShfKSxzLmRlZmF1bHQuY2FsbCh0aGlzLF8pLCF2JiZ5KF8pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtwP20oKTpnKCl9LDApfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigxKSxuKDQpLG4oMildLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbixpLG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWEobikscz1hKGkpO2UuZGVmYXVsdD17bmFtZTpcImJtLWdyb3VuZFwiLHJlbmRlcjpmdW5jdGlvbigpe30sbWl4aW5zOlsoMCxyLmRlZmF1bHQpKFwib3ZlcmxheVwiKV0scHJvcHM6e2JvdW5kczp7dHlwZTpPYmplY3R9LG9wYWNpdHk6e3R5cGU6TnVtYmVyfSxpbWFnZVVSTDp7dHlwZTpTdHJpbmd9LGRpc3BsYXlPbk1pbkxldmVsOnt0eXBlOk51bWJlcn0sZGlzcGxheU9uTWF4TGV2ZWw6e3R5cGU6TnVtYmVyfX0sd2F0Y2g6e2JvdW5kczp7aGFuZGxlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkJNYXA7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRCb3VuZHMoKDAsby5jcmVhdGVCb3VuZHMpKGUsdCkpfSxkZWVwOiEwfSxvcGFjaXR5OmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0T3BhY2l0eSh0KX0saW1hZ2VVUkw6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRJbWFnZVVSTCh0KX0sZGlzcGxheU9uTWluTGV2ZWw6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXREaXNwbGF5T25NaW5MZXZlbCh0KX0sZGlzcGxheU9uTWF4TGV2ZWw6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXREaXNwbGF5T25NYXhMZXZlbCh0KX19LG1ldGhvZHM6e2xvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkJNYXAsZT10aGlzLm1hcCxuPXRoaXMuYm91bmRzLGk9dGhpcy5vcGFjaXR5LGE9dGhpcy5pbWFnZVVSTCxyPXRoaXMuZGlzcGxheU9uTWluTGV2ZWwsbD10aGlzLmRpc3BsYXlPbk1heExldmVsLGM9bmV3IHQuR3JvdW5kT3ZlcmxheShuJiYoMCxvLmNyZWF0ZUJvdW5kcykodCxuKSx7b3BhY2l0eTppLGltYWdlVVJMOmEsZGlzcGxheU9uTWF4TGV2ZWw6bCxkaXNwbGF5T25NaW5MZXZlbDpyfSk7Yy5zZXRJbWFnZVVSTChhKSx0aGlzLm9yaWdpbkluc3RhbmNlPWMscy5kZWZhdWx0LmNhbGwodGhpcyxjKSxlLmFkZE92ZXJsYXkoYyl9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGkpe3ZhciBvLGEscjshZnVuY3Rpb24oaSxzKXthPVt0LGUsbigxKSxuKDQpLG4oMildLG89cyx2b2lkIDAhPT0ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28uYXBwbHkoZSxhKTpvKSYmKHQuZXhwb3J0cz1yKX0oMCxmdW5jdGlvbih0LGUsbixvLGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPXIobiksbD1yKG8pO2UuZGVmYXVsdD17bmFtZTpcImJtLWluZm8td2luZG93XCIsbWl4aW5zOlsoMCxzLmRlZmF1bHQpKFwib3ZlcmxheVwiKV0scHJvcHM6e3Nob3c6e3R5cGU6Qm9vbGVhbn0scG9zaXRpb246e3R5cGU6T2JqZWN0fSx0aXRsZTp7dHlwZTpTdHJpbmd9LHdpZHRoOnt0eXBlOk51bWJlcn0saGVpZ2h0Ont0eXBlOk51bWJlcn0sbWF4V2lkdGg6e3R5cGU6TnVtYmVyfSxvZmZzZXQ6e3R5cGU6T2JqZWN0fSxtYXhpbWl6ZTp7dHlwZTpCb29sZWFufSxhdXRvUGFuOnt0eXBlOkJvb2xlYW59LGNsb3NlT25DbGljazp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1lc3NhZ2U6e3R5cGU6U3RyaW5nfX0sd2F0Y2g6e3Nob3c6ZnVuY3Rpb24odCl7dD90aGlzLm9wZW5JbmZvV2luZG93KCk6dGhpcy5jbG9zZUluZm9XaW5kb3coKX0sXCJwb3NpdGlvbi5sbmdcIjpmdW5jdGlvbih0LGUpe3RoaXMucmVsb2FkKCl9LFwicG9zaXRpb24ubGF0XCI6ZnVuY3Rpb24odCxlKXt0aGlzLnJlbG9hZCgpfSxcIm9mZnNldC53aWR0aFwiOmZ1bmN0aW9uKHQsZSl7dGhpcy5yZWxvYWQoKX0sXCJvZmZzZXQuaGVpZ2h0XCI6ZnVuY3Rpb24odCl7dGhpcy5yZWxvYWQoKX0sbWF4V2lkdGg6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSx3aWR0aDpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldFdpZHRoKHQpfSxoZWlnaHQ6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRIZWlnaHQodCl9LHRpdGxlOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0VGl0bGUodCl9LG1heGltaXplOmZ1bmN0aW9uKHQpe3Q/dGhpcy5vcmlnaW5JbnN0YW5jZS5lbmFibGVNYXhpbWl6ZSgpOnRoaXMub3JpZ2luSW5zdGFuY2UuZGlzYWJsZU1heGltaXplKCl9LGF1dG9QYW46ZnVuY3Rpb24odCl7dD90aGlzLm9yaWdpbkluc3RhbmNlLmVuYWJsZUF1dG9QYW4oKTp0aGlzLm9yaWdpbkluc3RhbmNlLmRpc2FibGVBdXRvUGFuKCl9LGNsb3NlT25DbGljazpmdW5jdGlvbih0KXt0P3RoaXMub3JpZ2luSW5zdGFuY2UuZW5hYmxlQ2xvc2VPbkNsaWNrKCk6dGhpcy5vcmlnaW5JbnN0YW5jZS5kaXNhYmxlQ2xvc2VPbkNsaWNrKCl9fSxtZXRob2RzOntyZWRyYXc6ZnVuY3Rpb24oKXt0aGlzLm9yaWdpbkluc3RhbmNlLnJlZHJhdygpfSxsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5CTWFwLGU9dGhpcy5tYXAsbj10aGlzLnNob3csaT10aGlzLnRpdGxlLG89dGhpcy53aWR0aCxyPXRoaXMuaGVpZ2h0LHM9dGhpcy5tYXhXaWR0aCxjPXRoaXMub2Zmc2V0LHU9dGhpcy5hdXRvUGFuLGg9dGhpcy5jbG9zZU9uQ2xpY2sscD10aGlzLm1lc3NhZ2UsZD10aGlzLm1heGltaXplLGY9dGhpcy5iaW5kT2JzZXJ2ZXIsbT10aGlzLiRwYXJlbnQsZz10aGlzLiRlbCx5PW5ldyB0LkluZm9XaW5kb3coZyx7d2lkdGg6byxoZWlnaHQ6cix0aXRsZTppLG1heFdpZHRoOnMsb2Zmc2V0OigwLGEuY3JlYXRlU2l6ZSkodCxjKSxlbmFibGVBdXRvUGFuOnUsZW5hYmxlQ2xvc2VPbkNsaWNrOmgsZW5hYmxlTWVzc2FnZTp2b2lkIDA9PT1wLG1lc3NhZ2U6cH0pO2Q/eS5lbmFibGVNYXhpbWl6ZSgpOnkuZGlzYWJsZU1heGltaXplKCksbC5kZWZhdWx0LmNhbGwodGhpcyx5KSx0aGlzLm9yaWdpbkluc3RhbmNlPXkseS5yZWRyYXcoKSxbXS5mb3JFYWNoLmNhbGwoZy5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nXCIpLGZ1bmN0aW9uKHQpe3Qub25sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIHkucmVkcmF3KCl9fSksZigpLHRoaXMuJGNvbnRhaW5lcj1tLm9yaWdpbkluc3RhbmNlJiZtLm9yaWdpbkluc3RhbmNlLm9wZW5JbmZvV2luZG93P20ub3JpZ2luSW5zdGFuY2U6ZSxuJiZ0aGlzLm9wZW5JbmZvV2luZG93KCl9LGJpbmRPYnNlcnZlcjpmdW5jdGlvbigpe3ZhciB0PWkuTXV0YXRpb25PYnNlcnZlcjtpZih0KXt2YXIgZT10aGlzLiRlbCxuPXRoaXMub3JpZ2luSW5zdGFuY2U7dGhpcy5vYnNlcnZlcj1uZXcgdChmdW5jdGlvbih0KXtyZXR1cm4gbi5yZWRyYXcoKX0pLHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShlLHthdHRyaWJ1dGVzOiEwLGNoaWxkTGlzdDohMCxjaGFyYWN0ZXJEYXRhOiEwLHN1YnRyZWU6ITB9KX19LG9wZW5JbmZvV2luZG93OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5CTWFwLGU9dGhpcy4kY29udGFpbmVyLG49dGhpcy5wb3NpdGlvbixpPXRoaXMub3JpZ2luSW5zdGFuY2U7ZS5vcGVuSW5mb1dpbmRvdyhpLCgwLGEuY3JlYXRlUG9pbnQpKHQsbikpfSxjbG9zZUluZm9XaW5kb3c6ZnVuY3Rpb24oKXt0aGlzLiRjb250YWluZXIuY2xvc2VJbmZvV2luZG93KHRoaXMub3JpZ2luSW5zdGFuY2UpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0pLmNhbGwoZSxuKDMpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigxKSxuKDQpLG4oMildLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbixpLG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWEobikscz1hKGkpO2UuZGVmYXVsdD17bmFtZTpcImJtLWxhYmVsXCIscmVuZGVyOmZ1bmN0aW9uKCl7fSxtaXhpbnM6WygwLHIuZGVmYXVsdCkoXCJvdmVybGF5XCIpXSxwcm9wczp7Y29udGVudDp7dHlwZTpTdHJpbmd9LHRpdGxlOnt0eXBlOlN0cmluZ30sb2Zmc2V0Ont9LHBvc2l0aW9uOnt9LGxhYmVsU3R5bGU6e30sekluZGV4Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9LG1hc3NDbGVhcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9fSx3YXRjaDp7Y29udGVudDpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldENvbnRlbnQodCl9LHRpdGxlOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0VGl0bGUodCl9LFwib2Zmc2V0LndpZHRoXCI6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLkJNYXA7dC50b1N0cmluZygpIT09ZS50b1N0cmluZygpJiZ0aGlzLm9yaWdpbkluc3RhbmNlLnNldE9mZnNldCgoMCxvLmNyZWF0ZVNpemUpKG4se3dpZHRoOnQsaGVpZ2h0OnRoaXMub2Zmc2V0LmhlaWdodH0pKX0sXCJvZmZzZXQuaGVpZ2h0XCI6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLkJNYXA7dC50b1N0cmluZygpIT09ZS50b1N0cmluZygpJiZ0aGlzLm9yaWdpbkluc3RhbmNlLnNldE9mZnNldCgoMCxvLmNyZWF0ZVNpemUpKG4se3dpZHRoOnRoaXMub2Zmc2V0LndpZHRoLGhlaWdodDp0fSkpfSxcInBvc2l0aW9uLmxuZ1wiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5CTWFwLGk9dDt0LnRvU3RyaW5nKCkhPT1lLnRvU3RyaW5nKCkmJmk+PS0xODAmJmk8PTE4MCYmdGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRDZW50ZXIoKDAsby5jcmVhdGVQb2ludCkobix7bG5nOmksbGF0OnRoaXMuY2VudGVyLmxhdH0pKX0sXCJwb3NpdGlvbi5sYXRcIjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuQk1hcCxpPXQ7dC50b1N0cmluZygpIT09ZS50b1N0cmluZygpJiZpPj0tNzQmJmk8PTc0JiZ0aGlzLm9yaWdpbkluc3RhbmNlLnNldENlbnRlcigoMCxvLmNyZWF0ZVBvaW50KShuLHtsbmc6dGhpcy5jZW50ZXIubG5nLGxhdDppfSkpfSxsYWJlbFN0eWxlOntoYW5kbGVyOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0U3R5bGUodCl9LGRlZXA6ITB9LHpJbmRleDpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldFpJbmRleCh0KX0sbWFzc0NsZWFyOmZ1bmN0aW9uKHQpe3Q/dGhpcy5vcmlnaW5JbnN0YW5jZS5lbmFibGVNYXNzQ2xlYXIoKTp0aGlzLm9yaWdpbkluc3RhbmNlLmRpc2FibGVNYXNzQ2xlYXIoKX19LG1ldGhvZHM6e2xvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkJNYXAsZT10aGlzLm1hcCxuPXRoaXMuY29udGVudCxpPXRoaXMudGl0bGUsYT10aGlzLm9mZnNldCxyPXRoaXMucG9zaXRpb24sbD10aGlzLmxhYmVsU3R5bGUsYz10aGlzLnpJbmRleCx1PXRoaXMubWFzc0NsZWFyLGg9dGhpcy4kcGFyZW50LHA9bmV3IHQuTGFiZWwobix7b2Zmc2V0OigwLG8uY3JlYXRlU2l6ZSkodCxhKSxwb3NpdGlvbjooMCxvLmNyZWF0ZVBvaW50KSh0LHIpLGVuYWJsZU1hc3NDbGVhcjp1fSk7dGhpcy5vcmlnaW5JbnN0YW5jZT1wO3RyeXtoLm9yaWdpbkluc3RhbmNlLnNldExhYmVsKHApfWNhdGNoKHQpe2UuYWRkT3ZlcmxheShwKX1pJiZwLnNldFRpdGxlKGkpLGwmJnAuc2V0U3R5bGUobCksYyYmcC5zZXRaSW5kZXgoYykscy5kZWZhdWx0LmNhbGwodGhpcyxwKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oaSl7dmFyIG8sYSxyOyFmdW5jdGlvbihpLHMpe2E9W3QsZSxuKDEpLG4oNCksbigyKV0sbz1zLHZvaWQgMCE9PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5hcHBseShlLGEpOm8pJiYodC5leHBvcnRzPXIpfSgwLGZ1bmN0aW9uKHQsZSxuLG8sYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9cihuKSxsPXIobyk7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tbWFya2VyXCIsbWl4aW5zOlsoMCxzLmRlZmF1bHQpKFwib3ZlcmxheVwiKV0scHJvcHM6e3Bvc2l0aW9uOnt9LG9mZnNldDp7fSxpY29uOnt9LG1hc3NDbGVhcjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGRyYWdnaW5nOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sY2xpY2tpbmc6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxyYWlzZU9uRHJhZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LGRyYWdnaW5nQ3Vyc29yOnt0eXBlOlN0cmluZ30scm90YXRpb246e3R5cGU6TnVtYmVyfSxzaGFkb3c6e3R5cGU6T2JqZWN0fSx0aXRsZTp7dHlwZTpTdHJpbmd9LGxhYmVsOnt0eXBlOk9iamVjdH0sYW5pbWF0aW9uOnt0eXBlOlN0cmluZ30sdG9wOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sekluZGV4Ont0eXBlOk51bWJlcixkZWZhdWx0OjB9fSx3YXRjaDp7XCJwb3NpdGlvbi5sbmdcIjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuQk1hcCxpPXRoaXMub3JpZ2luSW5zdGFuY2Usbz10aGlzLnBvc2l0aW9uLHI9dGhpcy5yZW5kZXJCeVBhcmVudCxzPXRoaXMuJHBhcmVudDt0IT09ZSYmdD49LTE4MCYmdDw9MTgwJiZpLnNldFBvc2l0aW9uKCgwLGEuY3JlYXRlUG9pbnQpKG4se2xuZzp0LGxhdDpvLmxhdH0pKSxyJiZzLnJlbG9hZCgpfSxcInBvc2l0aW9uLmxhdFwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5CTWFwLGk9dGhpcy5vcmlnaW5JbnN0YW5jZSxvPXRoaXMucG9zaXRpb24scj10aGlzLnJlbmRlckJ5UGFyZW50LHM9dGhpcy4kcGFyZW50O3QhPT1lJiZ0Pj0tNzQmJnQ8PTc0JiZpLnNldFBvc2l0aW9uKCgwLGEuY3JlYXRlUG9pbnQpKG4se2xuZzpvLmxuZyxsYXQ6dH0pKSxyJiZzLnJlbG9hZCgpfSxcIm9mZnNldC53aWR0aFwiOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5CTWFwLGk9dGhpcy5vcmlnaW5JbnN0YW5jZTt0IT09ZSYmaS5zZXRPZmZzZXQobmV3IG4uU2l6ZSh0LHRoaXMub2Zmc2V0LmhlaWdodCkpfSxcIm9mZnNldC5oZWlnaHRcIjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuQk1hcCxpPXRoaXMub3JpZ2luSW5zdGFuY2U7dCE9PWUmJmkuc2V0T2Zmc2V0KG5ldyBuLlNpemUodGhpcy5vZmZzZXQud2lkdGgsdCkpfSxpY29uOntkZWVwOiEwLGhhbmRsZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5CTWFwLG49dGhpcy5vcmlnaW5JbnN0YW5jZSxpPXRoaXMucm90YXRpb247biYmbi5zZXRJY29uKCgwLGEuY3JlYXRlSWNvbikoZSx0KSksaSYmbiYmbi5zZXRSb3RhdGlvbihpKX19LG1hc3NDbGVhcjpmdW5jdGlvbih0KXt0P3RoaXMub3JpZ2luSW5zdGFuY2UuZW5hYmxlTWFzc0NsZWFyKCk6dGhpcy5vcmlnaW5JbnN0YW5jZS5kaXNhYmxlTWFzc0NsZWFyKCl9LGRyYWdnaW5nOmZ1bmN0aW9uKHQpe3Q/dGhpcy5vcmlnaW5JbnN0YW5jZS5lbmFibGVEcmFnZ2luZygpOnRoaXMub3JpZ2luSW5zdGFuY2UuZGlzYWJsZURyYWdnaW5nKCl9LGNsaWNraW5nOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX0scmFpc2VPbkRyYWc6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxkcmFnZ2luZ0N1cnNvcjpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldERyYWdnaW5nQ3Vyc29yKHQpfSxyb3RhdGlvbjpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldFJvdGF0aW9uKHQpfSxzaGFkb3c6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRTaGFkb3codCl9LHRpdGxlOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0VGl0bGUodCl9LGxhYmVsOmZ1bmN0aW9uKHQpe3RoaXMucmVsb2FkKCl9LGFuaW1hdGlvbjpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldEFuaW1hdGlvbihpW3RdKX0sdG9wOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0VG9wKHQpfSx6SW5kZXg6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRaSW5kZXgodCl9fSxtZXRob2RzOntsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5CTWFwLGU9dGhpcy5tYXAsbj10aGlzLnBvc2l0aW9uLG89dGhpcy5vZmZzZXQscj10aGlzLmljb24scz10aGlzLm1hc3NDbGVhcixjPXRoaXMuZHJhZ2dpbmcsdT10aGlzLmNsaWNraW5nLGg9dGhpcy5yYWlzZU9uRHJhZyxwPXRoaXMuZHJhZ2dpbmdDdXJzb3IsZD10aGlzLnJvdGF0aW9uLGY9dGhpcy5zaGFkb3csbT10aGlzLnRpdGxlLGc9dGhpcy5sYWJlbCx5PXRoaXMuYW5pbWF0aW9uLHY9dGhpcy50b3AsXz10aGlzLnJlbmRlckJ5UGFyZW50LGI9dGhpcy4kcGFyZW50LHg9dGhpcy56SW5kZXgsdz1uZXcgdC5NYXJrZXIobmV3IHQuUG9pbnQobi5sbmcsbi5sYXQpLHtvZmZzZXQ6byxpY29uOnImJigwLGEuY3JlYXRlSWNvbikodCxyKSxlbmFibGVNYXNzQ2xlYXI6cyxlbmFibGVEcmFnZ2luZzpjLGVuYWJsZUNsaWNraW5nOnUscmFpc2VPbkRyYWc6aCxkcmFnZ2luZ0N1cnNvcjpwLHJvdGF0aW9uOmQsc2hhZG93OmYsdGl0bGU6bX0pO3RoaXMub3JpZ2luSW5zdGFuY2U9dyxnJiZ3JiZ3LnNldExhYmVsKCgwLGEuY3JlYXRlTGFiZWwpKHQsZykpLHcuc2V0VG9wKHYpLHcuc2V0WkluZGV4KHgpLGwuZGVmYXVsdC5jYWxsKHRoaXMsdyksXz9iLnJlbG9hZCgpOmUuYWRkT3ZlcmxheSh3KSx3LnNldEFuaW1hdGlvbihpW3ldKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9KS5jYWxsKGUsbigzKSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxvLGE7IWZ1bmN0aW9uKHIscyl7bz1bdCxlLG4oMSldLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gbyh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hZXx8XCJvYmplY3RcIiE9dHlwZW9mIGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGEodCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KG4pLHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWVbbl07aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLGkpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLGkmJnQoZSxpKSxlfX0oKTtlLmRlZmF1bHQ9e25hbWU6XCJibS1vdmVybGF5XCIsbWl4aW5zOlsoMCxyLmRlZmF1bHQpKFwib3ZlcmxheVwiKV0scHJvcHM6e3BhbmU6e3R5cGU6U3RyaW5nfX0sd2F0Y2g6e3BhbmU6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG49dGhpcy4kZWwscj10aGlzLnBhbmUsbD10aGlzLiRlbWl0LmJpbmQodGhpcyksYz1mdW5jdGlvbihjKXtmdW5jdGlvbiB1KCl7cmV0dXJuIGkodGhpcyx1KSxvKHRoaXMsKHUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YodSkpLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGEodSxjKSxzKHUsW3trZXk6XCJpbml0aWFsaXplXCIsdmFsdWU6ZnVuY3Rpb24oKXtsKFwiaW5pdGlhbGl6ZVwiLHtCTWFwOnQsbWFwOmUsZWw6bixvdmVybGF5OnRoaXN9KTt0cnl7ZS5nZXRQYW5lcygpW3JdLmFwcGVuZENoaWxkKG4pfWNhdGNoKHQpe31yZXR1cm4gbn19LHtrZXk6XCJkcmF3XCIsdmFsdWU6ZnVuY3Rpb24oKXtsKFwiZHJhd1wiLHtCTWFwOnQsbWFwOmUsZWw6bixvdmVybGF5OnRoaXN9KX19XSksdX0odC5PdmVybGF5KSx1PW5ldyBjO3RoaXMub3JpZ2luSW5zdGFuY2U9dSxlLmFkZE92ZXJsYXkodSl9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGkpe3ZhciBvLGEscjshZnVuY3Rpb24oaSxzKXthPVt0LGUsbigxKSxuKDQpLG4oMildLG89cyx2b2lkIDAhPT0ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28uYXBwbHkoZSxhKTpvKSYmKHQuZXhwb3J0cz1yKX0oMCxmdW5jdGlvbih0LGUsbixvLGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPXIobiksbD1yKG8pO2UuZGVmYXVsdD17cmVuZGVyOmZ1bmN0aW9uKCl7fSxuYW1lOlwiYm0tcG9pbnQtY29sbGVjdGlvblwiLG1peGluczpbKDAscy5kZWZhdWx0KShcIm92ZXJsYXlcIildLHByb3BzOntwb2ludHM6e3R5cGU6QXJyYXksZGVmYXVsdDpmdW5jdGlvbigpe3JldHVybltdfX0sc2hhcGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJCTUFQX1BPSU5UX1NIQVBFX0NJUkNMRVwifSxjb2xvcjp7dHlwZTpTdHJpbmd9LHNpemU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJCTUFQX1BPSU5UX1NJWkVfTk9STUFMXCJ9fSx3YXRjaDp7c2hhcGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMuY29sb3Isbz10aGlzLnNpemU7ZS5zZXRTdHlsZXMoe3NoYXBlOmlbdF0sY29sb3I6bixzaXplOmlbb119KX0sc2l6ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlLG49dGhpcy5jb2xvcixvPXRoaXMuc2hhcGU7ZS5zZXRTdHlsZXMoe3NoYXBlOmlbb10sY29sb3I6bixzaXplOmlbdF19KX0sY29sb3I6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMuc2hhcGUsbz10aGlzLnNpemU7ZS5zZXRTdHlsZXMoe3NoYXBlOmlbbl0sY29sb3I6dCxzaXplOmlbb119KX0scG9pbnRzOntkZWVwOiEwLGhhbmRsZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZTtlLmNsZWFyKCksZS5zZXRQb2ludHModCl9fX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG49dGhpcy5wb2ludHMsbz10aGlzLnNoYXBlLHI9dGhpcy5jb2xvcixzPXRoaXMuc2l6ZSxjPXRoaXMub3JpZ2luSW5zdGFuY2U9bmV3IHQuUG9pbnRDb2xsZWN0aW9uKG4ubWFwKGZ1bmN0aW9uKGUpe3JldHVybigwLGEuY3JlYXRlUG9pbnQpKHQsZSl9KSx7c2hhcGU6aVtvXSxjb2xvcjpyLHNpemU6aVtzXX0pO2wuZGVmYXVsdC5jYWxsKHRoaXMsYyksZS5hZGRPdmVybGF5KGMpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0pLmNhbGwoZSxuKDMpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigxKSxuKDQpLG4oMildLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbixpLG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWEobikscz1hKGkpO2UuZGVmYXVsdD17bmFtZTpcImJtLXBvbHlnb25cIixyZW5kZXI6ZnVuY3Rpb24oKXt9LG1peGluczpbKDAsci5kZWZhdWx0KShcIm92ZXJsYXlcIildLHByb3BzOntwYXRoOnt0eXBlOkFycmF5LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm5bXX19LHN0cm9rZUNvbG9yOnt0eXBlOlN0cmluZ30sc3Ryb2tlV2VpZ2h0Ont0eXBlOk51bWJlcn0sc3Ryb2tlT3BhY2l0eTp7dHlwZTpOdW1iZXJ9LHN0cm9rZVN0eWxlOnt0eXBlOlN0cmluZ30sZmlsbENvbG9yOnt0eXBlOlN0cmluZ30sZmlsbE9wYWNpdHk6e3R5cGU6TnVtYmVyfSxtYXNzQ2xlYXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbGlja2luZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGVkaXRpbmc6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sd2F0Y2g6e3BhdGg6e2hhbmRsZXI6ZnVuY3Rpb24odCxlKXt0aGlzLnJlbG9hZCgpfSxkZWVwOiEwfSxzdHJva2VDb2xvcjpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldFN0cm9rZUNvbG9yKHQpfSxzdHJva2VPcGFjaXR5OmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0U3Ryb2tlT3BhY2l0eSh0KX0sc3Ryb2tlV2VpZ2h0OmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0U3Ryb2tlT3BhY2l0eSh0KX0sc3Ryb2tlU3R5bGU6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRTdHJva2VTdHlsZSh0KX0sZmlsbENvbG9yOmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0RmlsbENvbG9yKHQpfSxmaWxsT3BhY2l0eTpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldEZpbGxPcGFjaXR5KHQpfSxlZGl0aW5nOmZ1bmN0aW9uKHQpe3Q/dGhpcy5vcmlnaW5JbnN0YW5jZS5lbmFibGVFZGl0aW5nKCk6dGhpcy5vcmlnaW5JbnN0YW5jZS5kaXNhYmxlRWRpdGluZygpfSxtYXNzQ2xlYXI6ZnVuY3Rpb24odCl7dD90aGlzLm9yaWdpbkluc3RhbmNlLmVuYWJsZU1hc3NDbGVhcigpOnRoaXMub3JpZ2luSW5zdGFuY2UuZGlzYWJsZU1hc3NDbGVhcigpfSxjbGlja2luZzpmdW5jdGlvbih0KXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7bG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuQk1hcCxlPXRoaXMubWFwLG49dGhpcy5wYXRoLGk9dGhpcy5zdHJva2VDb2xvcixhPXRoaXMuc3Ryb2tlV2VpZ2h0LHI9dGhpcy5zdHJva2VPcGFjaXR5LGw9dGhpcy5zdHJva2VTdHlsZSxjPXRoaXMuZmlsbENvbG9yLHU9dGhpcy5maWxsT3BhY2l0eSxoPXRoaXMuZWRpdGluZyxwPXRoaXMubWFzc0NsZWFyLGQ9dGhpcy5jbGlja2luZyxmPW5ldyB0LlBvbHlnb24obi5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuKDAsby5jcmVhdGVQb2ludCkodCx7bG5nOmUubG5nLGxhdDplLmxhdH0pfSkse3N0cm9rZUNvbG9yOmksc3Ryb2tlV2VpZ2h0OmEsc3Ryb2tlT3BhY2l0eTpyLHN0cm9rZVN0eWxlOmwsZmlsbENvbG9yOmMsZmlsbE9wYWNpdHk6dSxlbmFibGVNYXNzQ2xlYXI6cCxlbmFibGVDbGlja2luZzpkfSk7dGhpcy5vcmlnaW5JbnN0YW5jZT1mLGUuYWRkT3ZlcmxheShmKSxzLmRlZmF1bHQuY2FsbCh0aGlzLGYpLGg/Zi5lbmFibGVFZGl0aW5nKCk6Zi5kaXNhYmxlRWRpdGluZygpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigxKSxuKDQpLG4oMildLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbixpLG8pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGEodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWEobikscz1hKGkpO2UuZGVmYXVsdD17bmFtZTpcImJtLXBvbHlsaW5lXCIscmVuZGVyOmZ1bmN0aW9uKCl7fSxtaXhpbnM6WygwLHIuZGVmYXVsdCkoXCJvdmVybGF5XCIpXSxwcm9wczp7cGF0aDp7dHlwZTpBcnJheX0sc3Ryb2tlQ29sb3I6e3R5cGU6U3RyaW5nfSxzdHJva2VXZWlnaHQ6e3R5cGU6TnVtYmVyfSxzdHJva2VPcGFjaXR5Ont0eXBlOk51bWJlcn0sc3Ryb2tlU3R5bGU6e3R5cGU6U3RyaW5nfSxtYXNzQ2xlYXI6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxjbGlja2luZzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGVkaXRpbmc6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfX0sd2F0Y2g6e3BhdGg6e2hhbmRsZXI6ZnVuY3Rpb24odCxlKXt0aGlzLnJlbG9hZCgpfSxkZWVwOiEwfSxzdHJva2VDb2xvcjpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlLnNldFN0cm9rZUNvbG9yKHQpfSxzdHJva2VPcGFjaXR5OmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0U3Ryb2tlT3BhY2l0eSh0KX0sc3Ryb2tlV2VpZ2h0OmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0U3Ryb2tlT3BhY2l0eSh0KX0sc3Ryb2tlU3R5bGU6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRTdHJva2VTdHlsZSh0KX0sZWRpdGluZzpmdW5jdGlvbih0KXt0P3RoaXMub3JpZ2luSW5zdGFuY2UuZW5hYmxlRWRpdGluZygpOnRoaXMub3JpZ2luSW5zdGFuY2UuZGlzYWJsZUVkaXRpbmcoKX0sbWFzc0NsZWFyOmZ1bmN0aW9uKHQpe3Q/dGhpcy5vcmlnaW5JbnN0YW5jZS5lbmFibGVNYXNzQ2xlYXIoKTp0aGlzLm9yaWdpbkluc3RhbmNlLmRpc2FibGVNYXNzQ2xlYXIoKX0sY2xpY2tpbmc6ZnVuY3Rpb24odCl7dGhpcy5yZWxvYWQoKX19LG1ldGhvZHM6e2xvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkJNYXAsZT10aGlzLm1hcCxuPXRoaXMucGF0aCxpPXRoaXMuc3Ryb2tlQ29sb3IsYT10aGlzLnN0cm9rZVdlaWdodCxyPXRoaXMuc3Ryb2tlT3BhY2l0eSxsPXRoaXMuc3Ryb2tlU3R5bGUsYz10aGlzLmVkaXRpbmcsdT10aGlzLm1hc3NDbGVhcixoPXRoaXMuY2xpY2tpbmcscD1uZXcgdC5Qb2x5bGluZShuLm1hcChmdW5jdGlvbihlKXtyZXR1cm4oMCxvLmNyZWF0ZVBvaW50KSh0LHtsbmc6ZS5sbmcsbGF0OmUubGF0fSl9KSx7c3Ryb2tlQ29sb3I6aSxzdHJva2VXZWlnaHQ6YSxzdHJva2VPcGFjaXR5OnIsc3Ryb2tlU3R5bGU6bCxlbmFibGVFZGl0aW5nOmMsZW5hYmxlTWFzc0NsZWFyOnUsZW5hYmxlQ2xpY2tpbmc6aH0pO3RoaXMub3JpZ2luSW5zdGFuY2U9cCxlLmFkZE92ZXJsYXkocCkscy5kZWZhdWx0LmNhbGwodGhpcyxwKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxvLGE7IWZ1bmN0aW9uKHIscyl7bz1bdCxlLG4oMiksbig1KSxuKDEpXSxpPXMsdm9pZCAwIT09KGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSkmJih0LmV4cG9ydHM9YSl9KDAsZnVuY3Rpb24odCxlLG4saSxvKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYT1mdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19KG8pO2UuZGVmYXVsdD17bmFtZTpcImJtLWJ1c1wiLG1peGluczpbKDAsYS5kZWZhdWx0KShcInNlYXJjaFwiKV0scHJvcHM6e2xvY2F0aW9uOnt0eXBlOltPYmplY3QsU3RyaW5nXX0sa2V5d29yZDp7dHlwZTpTdHJpbmd9LHBhbmVsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0scGFnZUNhcGFjaXR5Ont0eXBlOk51bWJlcn0sYXV0b1ZpZXdwb3J0Ont0eXBlOkJvb2xlYW59LHNlbGVjdEZpcnN0UmVzdWx0Ont0eXBlOkJvb2xlYW59fSx3YXRjaDp7bG9jYXRpb246e2hhbmRsZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMubWFwO2Uuc2V0TG9jYXRpb24odHx8bil9LGRlZXA6ITB9LGtleXdvcmQ6ZnVuY3Rpb24odCl7dGhpcy5zZWFyY2godCl9LHBhbmVsOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX0sYXV0b1ZpZXdwb3J0OmZ1bmN0aW9uKHQpe3RoaXMucmVsb2FkKCl9LHNlbGVjdEZpcnN0UmVzdWx0OmZ1bmN0aW9uKHQpe3RoaXMucmVsb2FkKCl9fSxtZXRob2RzOntzZWFyY2g6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZS5nZXRCdXNMaXN0KHQpfSxsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMubG9jYXRpb24sbz10aGlzLnNlbGVjdEZpcnN0UmVzdWx0LGE9dGhpcy5hdXRvVmlld3BvcnQscj10aGlzLmhpZ2hsaWdodE1vZGUscz10aGlzLmtleXdvcmQsbD10aGlzLnNlYXJjaCxjPXRoaXMuQk1hcCx1PXRoaXMubWFwLGg9dGhpcy5vcmlnaW5JbnN0YW5jZSxwPWU/KDAsaS5pc1BvaW50KShlKT8oMCxuLmNyZWF0ZVBvaW50KShjLGUpOmU6dSxkPXRoaXMub3JpZ2luSW5zdGFuY2U9bmV3IGMuQnVzTGluZVNlYXJjaChwLHtyZW5kZXJPcHRpb25zOnttYXA6dSxwYW5lbDp0aGlzLiRlbCxzZWxlY3RGaXJzdFJlc3VsdDpvLGF1dG9WaWV3cG9ydDphLGhpZ2hsaWdodE1vZGU6cn0sb25HZXRCdXNMaXN0Q29tcGxldGU6ZnVuY3Rpb24oZSl7aCYmaCE9PWQmJmguY2xlYXJSZXN1bHRzKCksdC4kZW1pdChcImdldGJ1c2xpc3Rjb21wbGV0ZVwiLGUpfSxvbkdldEJ1c0xpbmVDb21wbGV0ZTpmdW5jdGlvbihlKXtoJiZoIT09ZCYmaC5jbGVhclJlc3VsdHMoKSx0LiRlbWl0KFwiZ2V0YnVzbGluZWNvbXBsZXRlXCIsZSl9LG9uQnVzTGlzdEh0bWxTZXQ6ZnVuY3Rpb24oZSl7dC4kZW1pdChcImJ1c2xpc3RodG1sc2V0XCIsZSl9LG9uQnVzTGluZUh0bWxTZXQ6ZnVuY3Rpb24oZSl7dC4kZW1pdChcImJ1c2xpbmVodG1sc2V0XCIsZSl9LG9uTWFya2Vyc1NldDpmdW5jdGlvbihlKXt0LiRlbWl0KFwibWFya2Vyc3NldFwiLGUpfSxvblBvbHlsaW5lc1NldDpmdW5jdGlvbihlKXt0LiRlbWl0KFwicG9seWxpbmVzc2V0XCIsZSl9fSk7bChzKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oaSl7dmFyIG8sYSxyOyFmdW5jdGlvbihpLHMpe2E9W3QsZSxuKDIpLG4oNSksbigxKV0sbz1zLHZvaWQgMCE9PShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIG8/by5hcHBseShlLGEpOm8pJiYodC5leHBvcnRzPXIpfSgwLGZ1bmN0aW9uKHQsZSxuLG8sYSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHI9ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fShhKTtlLmRlZmF1bHQ9e25hbWU6XCJibS1kcml2aW5nXCIsbWl4aW5zOlsoMCxyLmRlZmF1bHQpKFwic2VhcmNoXCIpXSxwcm9wczp7bG9jYXRpb246e3R5cGU6W09iamVjdCxTdHJpbmddfSxzdGFydDp7dHlwZTpbT2JqZWN0LFN0cmluZ119LGVuZDp7dHlwZTpbT2JqZWN0LFN0cmluZ119LHN0YXJ0Q2l0eTp7dHlwZTpbU3RyaW5nLE51bWJlcl19LGVuZENpdHk6e3R5cGU6W1N0cmluZyxOdW1iZXJdfSx3YXlwb2ludHM6e3R5cGU6QXJyYXl9LHBvbGljeTp7dHlwZTpTdHJpbmd9LHBhbmVsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMH0sYXV0b1ZpZXdwb3J0Ont0eXBlOkJvb2xlYW59LHNlbGVjdEZpcnN0UmVzdWx0Ont0eXBlOkJvb2xlYW59fSx3YXRjaDp7bG9jYXRpb246e2hhbmRsZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMubWFwO2Uuc2V0TG9jYXRpb24odHx8bil9LGRlZXA6ITB9LHN0YXJ0OntoYW5kbGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3JpZ2luSW5zdGFuY2Usbj10aGlzLmVuZCxpPXRoaXMuc3RhcnRDaXR5LGE9dGhpcy5lbmRDaXR5LHI9dGhpcy53YXlwb2ludHMscz10aGlzLkJNYXAsbD10aGlzLmdldFdheXBvaW50cztlLnNlYXJjaCgoMCxvLmdldFBvc2l0aW9uKShzLHQpLCgwLG8uZ2V0UG9zaXRpb24pKHMsbikse3N0YXJ0Q2l0eTppLGVuZENpdHk6YSx3YXlwb2ludHM6bChyKX0pfSxkZWVwOiEwfSxlbmQ6e2hhbmRsZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMuc3RhcnQsaT10aGlzLnN0YXJ0Q2l0eSxhPXRoaXMuZW5kQ2l0eSxyPXRoaXMud2F5cG9pbnRzLHM9dGhpcy5CTWFwLGw9dGhpcy5nZXRXYXlwb2ludHM7ZS5zZWFyY2goKDAsby5nZXRQb3NpdGlvbikocyxuKSwoMCxvLmdldFBvc2l0aW9uKShzLHQpLHtzdGFydENpdHk6aSxlbmRDaXR5OmEsd2F5cG9pbnRzOmwocil9KX0sZGVlcDohMH0sc3RhcnRDaXR5OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3JpZ2luSW5zdGFuY2Usbj10aGlzLnN0YXJ0LGk9dGhpcy5lbmQsbz10aGlzLmVuZENpdHksYT10aGlzLndheXBvaW50cyxyPXRoaXMuZ2V0V2F5cG9pbnRzO2Uuc2VhcmNoKG4saSx7dmFsOnQsZW5kQ2l0eTpvLHdheXBvaW50czpyKGEpfSl9LGVuZENpdHk6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxuPXRoaXMuc3RhcnQsaT10aGlzLmVuZCxvPXRoaXMuc3RhcnRDaXR5LGE9dGhpcy53YXlwb2ludHMscj10aGlzLmdldFdheXBvaW50cztlLnNlYXJjaChuLGkse3N0YXJ0Q2l0eTpvLHZhbDp0LHdheXBvaW50czpyKGEpfSl9LHdheXBvaW50czp7aGFuZGxlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlLG49dGhpcy5zdGFydCxpPXRoaXMuZW5kLG89dGhpcy5zdGFydENpdHksYT10aGlzLmVuZENpdHkscj10aGlzLmdldFdheXBvaW50cztlLnNlYXJjaChuLGkse3N0YXJ0Q2l0eTpvLGVuZENpdHk6YSx3YXlwb2ludHM6cih0KX0pfSxkZWVwOiEwfSxwYW5lbDpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LHBvbGljeTpmdW5jdGlvbih0KXt0aGlzLnJlbG9hZCgpfSxhdXRvVmlld3BvcnQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxzZWxlY3RGaXJzdFJlc3VsdDpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9LGhpZ2hsaWdodE1vZGU6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7c2VhcmNoOmZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uLnN0YXJ0Q2l0eSxvPW4uZW5kQ2l0eSxhPW4ud2F5cG9pbnRzLHI9dGhpcy5vcmlnaW5JbnN0YW5jZSxzPXRoaXMuZ2V0V2F5cG9pbnRzO3Iuc2VhcmNoKHQsZSx7c3RhcnRDaXR5OmksZW5kQ2l0eTpvLHdheXBvaW50czpzKGEpfSl9LGdldFdheXBvaW50czpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkJNYXA7aWYodClyZXR1cm4gdC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuKDAsby5nZXRQb3NpdGlvbikoZSx0KX0pfSxsb2FkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMubWFwLGE9dGhpcy5CTWFwLHI9dGhpcy5sb2NhdGlvbixzPXRoaXMucG9saWN5LGw9dGhpcy5zZWxlY3RGaXJzdFJlc3VsdCxjPXRoaXMuYXV0b1ZpZXdwb3J0LHU9dGhpcy5oaWdobGlnaHRNb2RlLGg9dGhpcy5zZWFyY2gscD10aGlzLnN0YXJ0LGQ9dGhpcy5lbmQsZj10aGlzLnN0YXJ0Q2l0eSxtPXRoaXMuZW5kQ2l0eSxnPXRoaXMud2F5cG9pbnRzLHk9dGhpcy5vcmlnaW5JbnN0YW5jZSx2PXRoaXMuZ2V0V2F5cG9pbnRzLF89cj8oMCxvLmlzUG9pbnQpKHIpPygwLG4uY3JlYXRlUG9pbnQpKGEscik6cjplLGI9dGhpcy5vcmlnaW5JbnN0YW5jZT1uZXcgYS5Ecml2aW5nUm91dGUoXyx7cmVuZGVyT3B0aW9uczp7bWFwOmUscGFuZWw6dGhpcy4kZWwsc2VsZWN0Rmlyc3RSZXN1bHQ6bCxhdXRvVmlld3BvcnQ6YyxoaWdobGlnaHRNb2RlOnV9LHBvbGljeTppW3NdLG9uU2VhcmNoQ29tcGxldGU6ZnVuY3Rpb24oZSl7eSYmeSE9PWImJnkuY2xlYXJSZXN1bHRzKCksdC4kZW1pdChcInNlYXJjaGNvbXBsZXRlXCIsZSl9LG9uTWFya2Vyc1NldDpmdW5jdGlvbihlKXt0LiRlbWl0KFwibWFya2Vyc3NldFwiLGUpfSxvbkluZm9IdG1sU2V0OmZ1bmN0aW9uKGUpe3QuJGVtaXQoXCJpbmZvaHRtbHNldFwiLGUpfSxvblBvbHlsaW5lc1NldDpmdW5jdGlvbihlKXt0LiRlbWl0KFwicG9seWxpbmVzc2V0XCIsZSl9LG9uUmVzdWx0c0h0bWxTZXQ6ZnVuY3Rpb24oZSl7dC4kZW1pdChcInJlc3VsdHNodG1sc2V0XCIsZSl9fSk7aCgoMCxvLmdldFBvc2l0aW9uKShhLHApLCgwLG8uZ2V0UG9zaXRpb24pKGEsZCkse3N0YXJ0Q2l0eTpmLGVuZENpdHk6bSx3YXlwb2ludHM6dihnKX0pfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0pLmNhbGwoZSxuKDMpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigyKSxuKDUpLG4oMSldLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbixpLG8pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0obyk7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tbG9jYWwtc2VhcmNoXCIsbWl4aW5zOlsoMCxhLmRlZmF1bHQpKFwic2VhcmNoXCIpXSxwcm9wczp7bG9jYXRpb246e3R5cGU6W09iamVjdCxTdHJpbmddfSxrZXl3b3JkOnt0eXBlOltBcnJheSxTdHJpbmddfSxwYW5lbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LGZvcmNlTG9jYWw6e3R5cGU6Qm9vbGVhbn0sY3VzdG9tRGF0YTp7dHlwZTpPYmplY3R9LGJvdW5kczp7dHlwZTpPYmplY3R9LG5lYXJieTp7dHlwZTpPYmplY3R9LHBhZ2VDYXBhY2l0eTp7dHlwZTpOdW1iZXJ9LGF1dG9WaWV3cG9ydDp7dHlwZTpCb29sZWFufSxzZWxlY3RGaXJzdFJlc3VsdDp7dHlwZTpCb29sZWFufX0sd2F0Y2g6e2xvY2F0aW9uOntoYW5kbGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3JpZ2luSW5zdGFuY2Usbj10aGlzLnNlYXJjaDtlLnNldExvY2F0aW9uKHR8fHRoaXMubWFwKSxuKCl9LGRlZXA6ITB9LGtleXdvcmQ6ZnVuY3Rpb24oKXt0aGlzLnNlYXJjaCgpfSxib3VuZHM6e2hhbmRsZXI6ZnVuY3Rpb24odCl7KDAsdGhpcy5zZWFyY2hJbkJvdW5kcykodCl9LGRlZXA6ITB9LG5lYXJieTp7aGFuZGxlcjpmdW5jdGlvbih0KXsoMCx0aGlzLnNlYXJjaE5lYXJieSkodCl9LGRlZXA6ITB9LGZvcmNlTG9jYWw6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxjdXN0b21EYXRhOntkZWVwOiEwLGhhbmRsZXI6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0scGFnZUNhcGFjaXR5OmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2UmJnRoaXMub3JpZ2luSW5zdGFuY2Uuc2V0UGFnZUNhcGFjaXR5KHQpfSxhdXRvVmlld3BvcnQ6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZSYmKHQ/dGhpcy5vcmlnaW5JbnN0YW5jZS5lbmFibGVBdXRvVmlld3BvcnQoKTp0aGlzLm9yaWdpbkluc3RhbmNlLmRpc2FibGVBdXRvVmlld3BvcnQoKSl9LHNlbGVjdEZpcnN0UmVzdWx0OmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2UmJih0P3RoaXMub3JpZ2luSW5zdGFuY2UuZW5hYmxlRmlyc3RSZXN1bHRTZWxlY3Rpb24oKTp0aGlzLm9yaWdpbkluc3RhbmNlLmRpc2FibGVGaXJzdFJlc3VsdFNlbGVjdGlvbigpKX0saGlnaGxpZ2h0TW9kZTpmdW5jdGlvbigpe3RoaXMucmVsb2FkKCl9fSxtZXRob2RzOntzZWFyY2hOZWFyYnk6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcmlnaW5JbnN0YW5jZSxpPXRoaXMua2V5d29yZCxvPXRoaXMuY3VzdG9tRGF0YSxhPXRoaXMuQk1hcDtlLnNlYXJjaE5lYXJieShpLCgwLG4uY3JlYXRlUG9pbnQpKGEsdC5jZW50ZXIpLHQucmFkaXVzLG8pfSxzZWFyY2hJbkJvdW5kczpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlLGk9dGhpcy5rZXl3b3JkLG89dGhpcy5jdXN0b21EYXRhLGE9dGhpcy5CTWFwO2Uuc2VhcmNoSW5Cb3VuZHMoaSwoMCxuLmNyZWF0ZUJvdW5kcykoYSx0KSxvKX0sc2VhcmNoOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcmlnaW5JbnN0YW5jZSxlPXRoaXMua2V5d29yZCxuPXRoaXMuZm9yY2VMb2NhbCxpPXRoaXMuY3VzdG9tRGF0YSxvPXRoaXMubmVhcmJ5LGE9dGhpcy5ib3VuZHMscj10aGlzLnNlYXJjaE5lYXJieSxzPXRoaXMuc2VhcmNoSW5Cb3VuZHM7bz9yKG8pOmE/cyhhKTp0LnNlYXJjaChlLHtmb3JjZUxvY2FsOm4sY3VzdG9tRGF0YTppfSl9LGxvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5tYXAsbz10aGlzLkJNYXAsYT10aGlzLnNlYXJjaCxyPXRoaXMucGFnZUNhcGFjaXR5LHM9dGhpcy5hdXRvVmlld3BvcnQsbD10aGlzLnNlbGVjdEZpcnN0UmVzdWx0LGM9dGhpcy5oaWdobGlnaHRNb2RlLHU9dGhpcy5sb2NhdGlvbixoPXRoaXMub3JpZ2luSW5zdGFuY2UscD11PygwLGkuaXNQb2ludCkodSk/KDAsbi5jcmVhdGVQb2ludCkobyx1KTp1OmUsZD10aGlzLm9yaWdpbkluc3RhbmNlPW5ldyBvLkxvY2FsU2VhcmNoKHAse29uTWFya2Vyc1NldDpmdW5jdGlvbihlKXt0LiRlbWl0KFwibWFya2Vyc3NldFwiLGUpfSxvbkluZm9IdG1sU2V0OmZ1bmN0aW9uKGUpe3QuJGVtaXQoXCJpbmZvaHRtbHNldFwiLGUpfSxvblJlc3VsdHNIdG1sU2V0OmZ1bmN0aW9uKGUpe3QuJGVtaXQoXCJyZXN1bHRzaHRtbHNldFwiLGUpfSxvblNlYXJjaENvbXBsZXRlOmZ1bmN0aW9uKGUpe2gmJmghPT1kJiZoLmNsZWFyUmVzdWx0cygpLHQuJGVtaXQoXCJzZWFyY2hjb21wbGV0ZVwiLGUpfSxwYWdlQ2FwYWNpdHk6cixyZW5kZXJPcHRpb25zOnttYXA6ZSxwYW5lbDp0aGlzLiRlbCxzZWxlY3RGaXJzdFJlc3VsdDpsLGF1dG9WaWV3cG9ydDpzLGhpZ2hsaWdodE1vZGU6Y319KTthKCl9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pfSxmdW5jdGlvbih0LGUsbil7KGZ1bmN0aW9uKGkpe3ZhciBvLGEscjshZnVuY3Rpb24oaSxzKXthPVt0LGUsbigyKSxuKDUpLG4oMSldLG89cyx2b2lkIDAhPT0ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28uYXBwbHkoZSxhKTpvKSYmKHQuZXhwb3J0cz1yKX0oMCxmdW5jdGlvbih0LGUsbixvLGEpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciByPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0oYSk7ZS5kZWZhdWx0PXtuYW1lOlwiYm0tdHJhbnNpdFwiLG1peGluczpbKDAsci5kZWZhdWx0KShcInNlYXJjaFwiKV0scHJvcHM6e2xvY2F0aW9uOnt0eXBlOltPYmplY3QsU3RyaW5nXX0sc3RhcnQ6e3R5cGU6W09iamVjdCxTdHJpbmddfSxlbmQ6e3R5cGU6W09iamVjdCxTdHJpbmddfSxwYW5lbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHBvbGljeTp7dHlwZTpTdHJpbmd9LHBhZ2VDYXBhY2l0eTp7dHlwZTpOdW1iZXJ9LGF1dG9WaWV3cG9ydDp7dHlwZTpCb29sZWFufSxzZWxlY3RGaXJzdFJlc3VsdDp7dHlwZTpCb29sZWFufX0sd2F0Y2g6e2xvY2F0aW9uOntoYW5kbGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3JpZ2luSW5zdGFuY2Usbj10aGlzLm1hcDtlLnNldExvY2F0aW9uKHR8fG4pfSxkZWVwOiEwfSxzdGFydDp7aGFuZGxlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlLG49dGhpcy5lbmQsaT10aGlzLkJNYXA7ZS5zZWFyY2goKDAsby5nZXRQb3NpdGlvbikoaSx0KSwoMCxvLmdldFBvc2l0aW9uKShpLG4pKX0sZGVlcDohMH0sZW5kOntoYW5kbGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3JpZ2luSW5zdGFuY2Usbj10aGlzLnN0YXJ0LGk9dGhpcy5CTWFwO2Uuc2VhcmNoKCgwLG8uZ2V0UG9zaXRpb24pKGksbiksKDAsby5nZXRQb3NpdGlvbikoaSx0KSl9LGRlZXA6ITB9LHBhbmVsOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX0scG9saWN5OmZ1bmN0aW9uKHQpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2V0UG9saWN5KGlbdF0pfSxwYWdlQ2FwYWNpdHk6ZnVuY3Rpb24odCl7dGhpcy5vcmlnaW5JbnN0YW5jZSYmdGhpcy5vcmlnaW5JbnN0YW5jZS5zZXRQYWdlQ2FwYWNpdHkodCl9LGF1dG9WaWV3cG9ydDpmdW5jdGlvbih0KXt0aGlzLm9yaWdpbkluc3RhbmNlJiYodD90aGlzLm9yaWdpbkluc3RhbmNlLmVuYWJsZUF1dG9WaWV3cG9ydCgpOnRoaXMub3JpZ2luSW5zdGFuY2UuZGlzYWJsZUF1dG9WaWV3cG9ydCgpKX0sc2VsZWN0Rmlyc3RSZXN1bHQ6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfSxoaWdobGlnaHRNb2RlOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX19LG1ldGhvZHM6e3NlYXJjaDpmdW5jdGlvbih0LGUpe3RoaXMub3JpZ2luSW5zdGFuY2Uuc2VhcmNoKHQsZSl9LGxvYWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5tYXAsYT10aGlzLkJNYXAscj10aGlzLmxvY2F0aW9uLHM9dGhpcy5wb2xpY3ksbD10aGlzLnBhZ2VDYXBhY2l0eSxjPXRoaXMuc2VsZWN0Rmlyc3RSZXN1bHQsdT10aGlzLmF1dG9WaWV3cG9ydCxoPXRoaXMuaGlnaGxpZ2h0TW9kZSxwPXRoaXMuc2VhcmNoLGQ9dGhpcy5zdGFydCxmPXRoaXMuZW5kLG09dGhpcy5vcmlnaW5JbnN0YW5jZSxnPXI/KDAsby5pc1BvaW50KShyKT8oMCxuLmNyZWF0ZVBvaW50KShhLHIpOnI6ZSx5PXRoaXMub3JpZ2luSW5zdGFuY2U9bmV3IGEuVHJhbnNpdFJvdXRlKGcse3JlbmRlck9wdGlvbnM6e21hcDplLHBhbmVsOnRoaXMuJGVsLHNlbGVjdEZpcnN0UmVzdWx0OmMsYXV0b1ZpZXdwb3J0OnUsaGlnaGxpZ2h0TW9kZTpofSxwb2xpY3k6aVtzXSxwYWdlQ2FwYWNpdHk6bCxvblNlYXJjaENvbXBsZXRlOmZ1bmN0aW9uKGUpe20mJm0hPT15JiZtLmNsZWFyUmVzdWx0cygpLHQuJGVtaXQoXCJzZWFyY2hjb21wbGV0ZVwiLGUpfSxvbk1hcmtlcnNTZXQ6ZnVuY3Rpb24oZSl7dC4kZW1pdChcIm1hcmtlcnNzZXRcIixlKX0sb25JbmZvSHRtbFNldDpmdW5jdGlvbihlKXt0LiRlbWl0KFwiaW5mb2h0bWxzZXRcIixlKX0sb25Qb2x5bGluZXNTZXQ6ZnVuY3Rpb24oZSl7dC4kZW1pdChcInBvbHlsaW5lc3NldFwiLGUpfSxvblJlc3VsdHNIdG1sU2V0OmZ1bmN0aW9uKGUpe3QuJGVtaXQoXCJyZXN1bHRzaHRtbHNldFwiLGUpfX0pO3AoKDAsby5pc1BvaW50KShkKT8oMCxuLmNyZWF0ZVBvaW50KShhLGQpOmQsKDAsby5pc1BvaW50KShmKT8oMCxuLmNyZWF0ZVBvaW50KShhLGYpOmYpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KX0pLmNhbGwoZSxuKDMpKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBpLG8sYTshZnVuY3Rpb24ocixzKXtvPVt0LGUsbigyKSxuKDUpLG4oMSldLGk9cyx2b2lkIDAhPT0oYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkoZSxvKTppKSYmKHQuZXhwb3J0cz1hKX0oMCxmdW5jdGlvbih0LGUsbixpLG8pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBhPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0obyk7ZS5kZWZhdWx0PXtuYW1lOlwiYm0td2Fsa2luZ1wiLG1peGluczpbKDAsYS5kZWZhdWx0KShcInNlYXJjaFwiKV0scHJvcHM6e2xvY2F0aW9uOnt0eXBlOltPYmplY3QsU3RyaW5nXX0sc3RhcnQ6e3R5cGU6W09iamVjdCxTdHJpbmddfSxlbmQ6e3R5cGU6W09iamVjdCxTdHJpbmddfSxwYW5lbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHBhZ2VDYXBhY2l0eTp7dHlwZTpOdW1iZXJ9LGF1dG9WaWV3cG9ydDp7dHlwZTpCb29sZWFufSxzZWxlY3RGaXJzdFJlc3VsdDp7dHlwZTpCb29sZWFufX0sd2F0Y2g6e2xvY2F0aW9uOntoYW5kbGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3JpZ2luSW5zdGFuY2Usbj10aGlzLm1hcDtlLnNldExvY2F0aW9uKHR8fG4pfSxkZWVwOiEwfSxzdGFydDp7aGFuZGxlcjpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm9yaWdpbkluc3RhbmNlLG49dGhpcy5lbmQsbz10aGlzLkJNYXA7ZS5zZWFyY2goKDAsaS5nZXRQb3NpdGlvbikobyx0KSwoMCxpLmdldFBvc2l0aW9uKShvLG4pKX0sZGVlcDohMH0sZW5kOntoYW5kbGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3JpZ2luSW5zdGFuY2Usbj10aGlzLnN0YXJ0LG89dGhpcy5CTWFwO2Uuc2VhcmNoKCgwLGkuZ2V0UG9zaXRpb24pKG8sbiksKDAsaS5nZXRQb3NpdGlvbikobyx0KSl9LGRlZXA6ITB9LHBhbmVsOmZ1bmN0aW9uKCl7dGhpcy5yZWxvYWQoKX0sYXV0b1ZpZXdwb3J0OmZ1bmN0aW9uKHQpe3RoaXMucmVsb2FkKCl9LHNlbGVjdEZpcnN0UmVzdWx0OmZ1bmN0aW9uKHQpe3RoaXMucmVsb2FkKCl9LGhpZ2hsaWdodE1vZGU6ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZCgpfX0sbWV0aG9kczp7c2VhcmNoOmZ1bmN0aW9uKHQsZSl7dGhpcy5vcmlnaW5JbnN0YW5jZS5zZWFyY2godCxlKX0sbG9hZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10aGlzLm1hcCxvPXRoaXMuQk1hcCxhPXRoaXMubG9jYXRpb24scj10aGlzLnNlbGVjdEZpcnN0UmVzdWx0LHM9dGhpcy5hdXRvVmlld3BvcnQsbD10aGlzLmhpZ2hsaWdodE1vZGUsYz10aGlzLnNlYXJjaCx1PXRoaXMuc3RhcnQsaD10aGlzLmVuZCxwPXRoaXMub3JpZ2luSW5zdGFuY2UsZD1hPygwLGkuaXNQb2ludCkoYSk/KDAsbi5jcmVhdGVQb2ludCkobyxhKTphOmUsZj10aGlzLm9yaWdpbkluc3RhbmNlPW5ldyBvLldhbGtpbmdSb3V0ZShkLHtyZW5kZXJPcHRpb25zOnttYXA6ZSxwYW5lbDp0aGlzLiRlbCxzZWxlY3RGaXJzdFJlc3VsdDpyLGF1dG9WaWV3cG9ydDpzLGhpZ2hsaWdodE1vZGU6bH0sb25TZWFyY2hDb21wbGV0ZTpmdW5jdGlvbihlKXtwJiZwIT09ZiYmcC5jbGVhclJlc3VsdHMoKSx0LiRlbWl0KFwic2VhcmNoY29tcGxldGVcIixlKX0sb25NYXJrZXJzU2V0OmZ1bmN0aW9uKGUpe3QuJGVtaXQoXCJtYXJrZXJzc2V0XCIsZSl9LG9uSW5mb0h0bWxTZXQ6ZnVuY3Rpb24oZSl7dC4kZW1pdChcImluZm9odG1sc2V0XCIsZSl9LG9uUG9seWxpbmVzU2V0OmZ1bmN0aW9uKGUpe3QuJGVtaXQoXCJwb2x5bGluZXNzZXRcIixlKX0sb25SZXN1bHRzSHRtbFNldDpmdW5jdGlvbihlKXt0LiRlbWl0KFwicmVzdWx0c2h0bWxzZXRcIixlKX19KTtjKCgwLGkuaXNQb2ludCkodSk/KDAsbi5jcmVhdGVQb2ludCkobyx1KTp1LCgwLGkuaXNQb2ludCkoaCk/KDAsbi5jcmVhdGVQb2ludCkobyxoKTpoKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSl9LGZ1bmN0aW9uKHQsZSxuKXshZnVuY3Rpb24oZSxuKXt0LmV4cG9ydHM9bigpfSgwLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LG4pe3RyeXtCTWFwfWNhdGNoKHQpe3Rocm93IEVycm9yKFwiQmFpZHUgTWFwIEpTIEFQSSBpcyBub3QgcmVhZHkgeWV0IVwiKX12YXIgaT1lKHQpLG89bmV3IEJNYXAuUG9seWxpbmUoaSxuKTtyZXR1cm4gby5hZGRFdmVudExpc3RlbmVyKFwibGluZXVwZGF0ZVwiLGZ1bmN0aW9uKCl7dGhpcy5pc0VkaXRpbmcmJnRoaXMuZW5hYmxlRWRpdGluZygpfSksby5jb3JuZXJQb2ludHM9dCxvLmVkaXRNYXJrZXJzPVtdLG8uZW5hYmxlRWRpdGluZz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYodC5tYXApe3QuZGlzYWJsZUVkaXRpbmcoKTtmb3IodmFyIG49MDtuPHQuY29ybmVyUG9pbnRzLmxlbmd0aDtuKyspe3ZhciBpPW5ldyBCTWFwLk1hcmtlcih0LmNvcm5lclBvaW50c1tuXSx7aWNvbjpuZXcgQk1hcC5JY29uKFwiaHR0cDovL2FwaS5tYXAuYmFpZHUuY29tL2xpYnJhcnkvQ3VydmVMaW5lLzEuNS9zcmMvY2lyY2xlLnBuZ1wiLG5ldyBCTWFwLlNpemUoMTYsMTYpKSxlbmFibGVEcmFnZ2luZzohMCxyYWlzZU9uRHJhZzohMH0pO2kuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdlbmRcIixmdW5jdGlvbigpe3QuY29ybmVyUG9pbnRzLmxlbmd0aD0wO2Zvcih2YXIgbj0wO248dC5lZGl0TWFya2Vycy5sZW5ndGg7bisrKXQuY29ybmVyUG9pbnRzLnB1c2godC5lZGl0TWFya2Vyc1tuXS5nZXRQb3NpdGlvbigpKTt2YXIgaT1lKHQuY29ybmVyUG9pbnRzKTt0LnNldFBhdGgoaSl9KSxpLmluZGV4PW4sdC5lZGl0TWFya2Vycy5wdXNoKGkpLHQubWFwLmFkZE92ZXJsYXkoaSl9fXQuaXNFZGl0aW5nPSEwfSxvLmRpc2FibGVFZGl0aW5nPWZ1bmN0aW9uKCl7dGhpcy5pc0VkaXRpbmc9ITE7Zm9yKHZhciB0PTA7dDx0aGlzLmVkaXRNYXJrZXJzLmxlbmd0aDt0KyspdGhpcy5tYXAucmVtb3ZlT3ZlcmxheSh0aGlzLmVkaXRNYXJrZXJzW3RdKSx0aGlzLmVkaXRNYXJrZXJzW3RdPW51bGw7dGhpcy5lZGl0TWFya2Vycy5sZW5ndGg9MH0sby5nZXRQYXRoPWZ1bmN0aW9uKCl7cmV0dXJuIGl9LG99ZnVuY3Rpb24gZSh0KXtmb3IodmFyIGU9W10saT0wO2k8dC5sZW5ndGgtMTtpKyspe3ZhciBvPW4odFtpXSx0W2krMV0pO28mJm8ubGVuZ3RoPjAmJihlPWUuY29uY2F0KG8pKX1yZXR1cm4gZX1mdW5jdGlvbiBuKHQsZSl7dmFyIG49W107aWYoISh0JiZlJiZ0IGluc3RhbmNlb2YgQk1hcC5Qb2ludCYmZSBpbnN0YW5jZW9mIEJNYXAuUG9pbnQpKXJldHVybiBudWxsO3ZhciBpLG8sYSxyLHMsbCxjPWZ1bmN0aW9uKHQpe3JldHVybiAxLTIqdCt0KnR9LHU9ZnVuY3Rpb24odCl7cmV0dXJuIDIqdC0yKnQqdH0saD1mdW5jdGlvbih0KXtyZXR1cm4gdCp0fSxwPTAsZD0wO2lmKHZvaWQgMD09PWUpcmV0dXJuIHZvaWQodm9pZCAwIT09biYmKG49W10pKTt2YXIgZj1wYXJzZUZsb2F0KHQubGF0KSxtPXBhcnNlRmxvYXQoZS5sYXQpLGc9cGFyc2VGbG9hdCh0LmxuZykseT1wYXJzZUZsb2F0KGUubG5nKTtmb3IoeT5nJiZwYXJzZUZsb2F0KHktZyk+MTgwJiZnPDAmJihnPXBhcnNlRmxvYXQoMzYwK2cpKSxnPnkmJnBhcnNlRmxvYXQoZy15KT4xODAmJnk8MCYmKHk9cGFyc2VGbG9hdCgzNjAreSkpLDAsbD0wLG09PWY/KGk9MCxvPWcteSk6eT09Zz8oaT1NYXRoLlBJLzIsbz1mLW0pOihpPU1hdGguYXRhbigobS1mKS8oeS1nKSksbz0obS1mKS9NYXRoLnNpbihpKSksMD09bCYmKGw9aStNYXRoLlBJLzUpLGE9by8yLHM9YSpNYXRoLmNvcyhsKStnLHI9YSpNYXRoLnNpbihsKStmLHA9MDtwPDMxO3ArKyluLnB1c2gobmV3IEJNYXAuUG9pbnQoZypjKGQpK3MqdShkKSt5KmgoZCksZipjKGQpK3IqdShkKSttKmgoZCkpKSxkKz0xLzMwO3JldHVybiBufXJldHVybiB0fSl9LGZ1bmN0aW9uKHQsZSxuKXshZnVuY3Rpb24oZSxuKXt0LmV4cG9ydHM9bigpfSgwLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUsbil7dmFyIGksbyxhPXQucHJvdG90eXBlLHI9bmV3IEZ1bmN0aW9uO3IucHJvdG90eXBlPWUucHJvdG90eXBlLG89dC5wcm90b3R5cGU9bmV3IHI7Zm9yKGkgaW4gYSlvW2ldPWFbaV07dC5wcm90b3R5cGUuY29uc3RydWN0b3I9dCx0LnN1cGVyQ2xhc3M9ZS5wcm90b3R5cGUsXCJzdHJpbmdcIj09dHlwZW9mIG4mJihvLl9jbGFzc05hbWU9bil9dmFyIGU9ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbih0KXt2YXIgZT17ZGF0YTpbXSxoZWF0bWFwOnR9O3RoaXMubWF4PTEsdGhpcy5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LHRoaXMuc2V0PWZ1bmN0aW9uKHQsbil7ZVt0XT1ufX07dC5wcm90b3R5cGU9e2FkZERhdGFQb2ludDpmdW5jdGlvbih0LGUpe2lmKCEodDwwfHxlPDApKXt2YXIgbj10aGlzLGk9bi5nZXQoXCJoZWF0bWFwXCIpLG89bi5nZXQoXCJkYXRhXCIpO2lmKG9bdF18fChvW3RdPVtdKSxvW3RdW2VdfHwob1t0XVtlXT0wKSxvW3RdW2VdKz1hcmd1bWVudHMubGVuZ3RoPDM/MTphcmd1bWVudHNbMl0sbi5zZXQoXCJkYXRhXCIsbyksbi5tYXg8b1t0XVtlXSlyZXR1cm4gaS5nZXQoXCJhY3R4XCIpLmNsZWFyUmVjdCgwLDAsaS5nZXQoXCJ3aWR0aFwiKSxpLmdldChcImhlaWdodFwiKSksdm9pZCBuLnNldERhdGFTZXQoe21heDpvW3RdW2VdLGRhdGE6b30sITApO2kuZHJhd0FscGhhKHQsZSxvW3RdW2VdLCEwKX19LHNldERhdGFTZXQ6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLGk9bi5nZXQoXCJoZWF0bWFwXCIpLG89W10sYT10LmRhdGEscj1hLmxlbmd0aDtpZihpLmNsZWFyKCksdGhpcy5tYXg9dC5tYXgsaS5nZXQoXCJsZWdlbmRcIikmJmkuZ2V0KFwibGVnZW5kXCIpLnVwZGF0ZSh0Lm1heCksbnVsbCE9ZSYmZSl7Zm9yKHZhciBzIGluIGEpaWYodm9pZCAwIT09cylmb3IodmFyIGwgaW4gYVtzXSl2b2lkIDAhPT1sJiZpLmRyYXdBbHBoYShzLGwsYVtzXVtsXSwhMSl9ZWxzZSBmb3IoO3ItLTspe3ZhciBjPWFbcl07aS5kcmF3QWxwaGEoYy54LGMueSxjLmNvdW50LCExKSxvW2MueF18fChvW2MueF09W10pLG9bYy54XVtjLnldfHwob1tjLnhdW2MueV09MCksb1tjLnhdW2MueV09Yy5jb3VudH1pLmNvbG9yaXplKCksdGhpcy5zZXQoXCJkYXRhXCIsYSl9LGV4cG9ydERhdGFTZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5nZXQoXCJkYXRhXCIpLG49W107Zm9yKHZhciBpIGluIGUpaWYodm9pZCAwIT09aSlmb3IodmFyIG8gaW4gZVtpXSl2b2lkIDAhPT1vJiZuLnB1c2goe3g6cGFyc2VJbnQoaSwxMCkseTpwYXJzZUludChvLDEwKSxjb3VudDplW2ldW29dfSk7cmV0dXJue21heDp0Lm1heCxkYXRhOm59fSxnZW5lcmF0ZVJhbmRvbURhdGFTZXQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXQoXCJoZWF0bWFwXCIpLG49ZS5nZXQoXCJ3aWR0aFwiKSxpPWUuZ2V0KFwiaGVpZ2h0XCIpLG89e30sYT1NYXRoLmZsb29yKDFlMypNYXRoLnJhbmRvbSgpKzEpO28ubWF4PWE7Zm9yKHZhciByPVtdO3QtLTspci5wdXNoKHt4Ok1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpuKzEpLHk6TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmkrMSksY291bnQ6TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmErMSl9KTtvLmRhdGE9cix0aGlzLnNldERhdGFTZXQobyl9fTt2YXIgZT1mdW5jdGlvbih0KXt0aGlzLmNvbmZpZz10O3ZhciBlPXtlbGVtZW50Om51bGwsbGFiZWxzRWw6bnVsbCxncmFkaWVudENmZzpudWxsLGN0eDpudWxsfTt0aGlzLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0sdGhpcy5zZXQ9ZnVuY3Rpb24odCxuKXtlW3RdPW59LHRoaXMuaW5pdCgpfTtlLnByb3RvdHlwZT17aW5pdDpmdW5jdGlvbigpe3ZhciB0LGUsbj10aGlzLGk9bi5jb25maWcsbz1pLnRpdGxlfHxcIkxlZ2VuZFwiLGE9aS5wb3NpdGlvbixyPWkub2Zmc2V0fHwxMCxzPShpLmdyYWRpZW50LGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKSksbD1cIlwiO24ucHJvY2Vzc0dyYWRpZW50T2JqZWN0KCksYS5pbmRleE9mKFwidFwiKT4tMT9sKz1cInRvcDpcIityK1wicHg7XCI6bCs9XCJib3R0b206XCIrcitcInB4O1wiLGEuaW5kZXhPZihcImxcIik+LTE/bCs9XCJsZWZ0OlwiK3IrXCJweDtcIjpsKz1cInJpZ2h0OlwiK3IrXCJweDtcIix0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdC5zdHlsZS5jc3NUZXh0PVwiYm9yZGVyLXJhZGl1czo1cHg7cG9zaXRpb246YWJzb2x1dGU7XCIrbCtcImZvbnQtZmFtaWx5OkhlbHZldGljYTsgd2lkdGg6MjU2cHg7ei1pbmRleDoxMDAwMDAwMDAwMDsgYmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMjU1LDEpO3BhZGRpbmc6MTBweDtib3JkZXI6MXB4IHNvbGlkIGJsYWNrO21hcmdpbjowO1wiLHQuaW5uZXJIVE1MPVwiPGgzIHN0eWxlPSdwYWRkaW5nOjA7bWFyZ2luOjA7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1zaXplOjE2cHg7Jz5cIitvK1wiPC9oMz5cIixzLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MTJweDtkaXNwbGF5OmJsb2NrO2xpc3Qtc3R5bGU6bm9uZTtsaXN0LXN0eWxlLXR5cGU6bm9uZTttYXJnaW46MDtoZWlnaHQ6MTVweDtcIixlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZS5zdHlsZS5jc3NUZXh0PVtcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MjU2cHg7aGVpZ2h0OjE1cHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgYmxhY2s7IGJhY2tncm91bmQtaW1hZ2U6dXJsKFwiLG4uY3JlYXRlR3JhZGllbnRJbWFnZSgpLFwiKTtcIl0uam9pbihcIlwiKSx0LmFwcGVuZENoaWxkKHMpLHQuYXBwZW5kQ2hpbGQoZSksbi5zZXQoXCJlbGVtZW50XCIsdCksbi5zZXQoXCJsYWJlbHNFbFwiLHMpLG4udXBkYXRlKDEpfSxwcm9jZXNzR3JhZGllbnRPYmplY3Q6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5jb25maWcuZ3JhZGllbnQsbj1bXTtmb3IodmFyIGkgaW4gZSllLmhhc093blByb3BlcnR5KGkpJiZuLnB1c2goe3N0b3A6aSx2YWx1ZTplW2ldfSk7bi5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuc3RvcC1lLnN0b3B9KSxuLnVuc2hpZnQoe3N0b3A6MCx2YWx1ZTpcInJnYmEoMCwwLDAsMClcIn0pLHQuc2V0KFwiZ3JhZGllbnRBcnJcIixuKX0sY3JlYXRlR3JhZGllbnRJbWFnZTpmdW5jdGlvbigpe3ZhciB0LGU9dGhpcyxuPWUuZ2V0KFwiZ3JhZGllbnRBcnJcIiksaT1uLmxlbmd0aCxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksYT1vLmdldENvbnRleHQoXCIyZFwiKTtvLndpZHRoPVwiMjU2XCIsby5oZWlnaHQ9XCIxNVwiLHQ9YS5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLDUsMjU2LDEwKTtmb3IodmFyIHI9MDtyPGk7cisrKXQuYWRkQ29sb3JTdG9wKDEvKGktMSkqcixuW3JdLnZhbHVlKTthLmZpbGxTdHlsZT10LGEuZmlsbFJlY3QoMCw1LDI1NiwxMCksYS5zdHJva2VTdHlsZT1cImJsYWNrXCIsYS5iZWdpblBhdGgoKTtmb3IodmFyIHI9MDtyPGk7cisrKWEubW92ZVRvKC41KygxLyhpLTEpKnIqMjU2Pj4wKSwwKSxhLmxpbmVUbyguNSsoMS8oaS0xKSpyKjI1Nj4+MCksMD09cj8xNTo1KTtyZXR1cm4gYS5tb3ZlVG8oMjU1LjUsMCksYS5saW5lVG8oMjU1LjUsMTUpLGEubW92ZVRvKDI1NS41LDQuNSksYS5saW5lVG8oMCw0LjUpLGEuc3Ryb2tlKCksZS5zZXQoXCJjdHhcIixhKSxvLnRvRGF0YVVSTCgpfSxnZXRFbGVtZW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0KFwiZWxlbWVudFwiKX0sdXBkYXRlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuLGk9dGhpcyxvPWkuZ2V0KFwiZ3JhZGllbnRBcnJcIiksYT1pLmdldChcImN0eFwiKSxyPWkuZ2V0KFwibGFiZWxzRWxcIikscz1cIlwiLGw9MDtsPG8ubGVuZ3RoO2wrKyllPXQqb1tsXS5zdG9wPj4wLG49YS5tZWFzdXJlVGV4dChlKS53aWR0aC8yPj4wLDA9PWwmJihuPTApLGw9PW8ubGVuZ3RoLTEmJihuKj0yKSxzKz0nPGxpIHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7bGVmdDonKygoKDEvKG8ubGVuZ3RoLTEpKmwqMjU2fHwwKT4+MCktbisuNSkrJ3B4XCI+JytlK1wiPC9saT5cIjtyLmlubmVySFRNTD1zfX07dmFyIG49ZnVuY3Rpb24oZSl7dmFyIG49e3JhZGl1czo0MCxlbGVtZW50Ont9LGNhbnZhczp7fSxhY2FudmFzOnt9LGN0eDp7fSxhY3R4Ont9LGxlZ2VuZDpudWxsLHZpc2libGU6ITAsd2lkdGg6MCxoZWlnaHQ6MCxtYXg6ITEsZ3JhZGllbnQ6ITEsb3BhY2l0eToxODAscHJlbXVsdGlwbHlBbHBoYTohMSxib3VuZHM6e2w6MWUzLHI6MCx0OjFlMyxiOjB9LGRlYnVnOiExfTt0aGlzLnN0b3JlPW5ldyB0KHRoaXMpLHRoaXMuZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiBuW3RdfSx0aGlzLnNldD1mdW5jdGlvbih0LGUpe25bdF09ZX0sdGhpcy5jb25maWd1cmUoZSksdGhpcy5pbml0KCl9O3JldHVybiBuLnByb3RvdHlwZT17Y29uZmlndXJlOmZ1bmN0aW9uKHQpe3ZhciBuPXRoaXM7aWYobi5zZXQoXCJyYWRpdXNcIix0LnJhZGl1c3x8NDApLG4uc2V0KFwiZWxlbWVudFwiLHQuZWxlbWVudCBpbnN0YW5jZW9mIE9iamVjdD90LmVsZW1lbnQ6ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodC5lbGVtZW50KSksbi5zZXQoXCJ2aXNpYmxlXCIsbnVsbD09dC52aXNpYmxlfHx0LnZpc2libGUpLG4uc2V0KFwibWF4XCIsdC5tYXh8fCExKSxuLnNldChcImdyYWRpZW50XCIsdC5ncmFkaWVudHx8ey40NTpcInJnYigwLDAsMjU1KVwiLC41NTpcInJnYigwLDI1NSwyNTUpXCIsLjY1OlwicmdiKDAsMjU1LDApXCIsLjk1OlwieWVsbG93XCIsMTpcInJnYigyNTUsMCwwKVwifSksbi5zZXQoXCJvcGFjaXR5XCIscGFyc2VJbnQoMjU1LygxMDAvdC5vcGFjaXR5KSwxMCl8fDE4MCksbi5zZXQoXCJ3aWR0aFwiLHQud2lkdGh8fDApLG4uc2V0KFwiaGVpZ2h0XCIsdC5oZWlnaHR8fDApLG4uc2V0KFwiZGVidWdcIix0LmRlYnVnKSx0LmxlZ2VuZCl7dmFyIGk9dC5sZWdlbmQ7aS5ncmFkaWVudD1uLmdldChcImdyYWRpZW50XCIpLG4uc2V0KFwibGVnZW5kXCIsbmV3IGUoaSkpfX0scmVzaXplOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuZ2V0KFwiZWxlbWVudFwiKSxuPXQuZ2V0KFwiY2FudmFzXCIpLGk9dC5nZXQoXCJhY2FudmFzXCIpO24ud2lkdGg9aS53aWR0aD10LmdldChcIndpZHRoXCIpfHxlLnN0eWxlLndpZHRoLnJlcGxhY2UoL3B4LyxcIlwiKXx8dC5nZXRXaWR0aChlKSx0aGlzLnNldChcIndpZHRoXCIsbi53aWR0aCksbi5oZWlnaHQ9aS5oZWlnaHQ9dC5nZXQoXCJoZWlnaHRcIil8fGUuc3R5bGUuaGVpZ2h0LnJlcGxhY2UoL3B4LyxcIlwiKXx8dC5nZXRIZWlnaHQoZSksdGhpcy5zZXQoXCJoZWlnaHRcIixuLmhlaWdodCl9LGluaXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksaT1lLmdldENvbnRleHQoXCIyZFwiKSxvPW4uZ2V0Q29udGV4dChcIjJkXCIpLGE9dC5nZXQoXCJlbGVtZW50XCIpO3QuaW5pdENvbG9yUGFsZXR0ZSgpLHQuc2V0KFwiY2FudmFzXCIsZSksdC5zZXQoXCJjdHhcIixpKSx0LnNldChcImFjYW52YXNcIixuKSx0LnNldChcImFjdHhcIixvKSx0LnJlc2l6ZSgpLGUuc3R5bGUuY3NzVGV4dD1uLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7ei1pbmRleDoxMDAwMDAwMDtcIix0LmdldChcInZpc2libGVcIil8fChlLnN0eWxlLmRpc3BsYXk9XCJub25lXCIpLGEuYXBwZW5kQ2hpbGQoZSksdC5nZXQoXCJsZWdlbmRcIikmJmEuYXBwZW5kQ2hpbGQodC5nZXQoXCJsZWdlbmRcIikuZ2V0RWxlbWVudCgpKSx0LmdldChcImRlYnVnXCIpJiZkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG4pLG8uc2hhZG93T2Zmc2V0WD0xNWUzLG8uc2hhZG93T2Zmc2V0WT0xNWUzLG8uc2hhZG93Qmx1cj0xNX0saW5pdENvbG9yUGFsZXR0ZTpmdW5jdGlvbigpe3ZhciB0LGUsbixpPXRoaXMsbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLGE9aS5nZXQoXCJncmFkaWVudFwiKTtvLndpZHRoPVwiMVwiLG8uaGVpZ2h0PVwiMjU2XCIsdD1vLmdldENvbnRleHQoXCIyZFwiKSxlPXQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwwLDEsMjU2KSxuPXQuZ2V0SW1hZ2VEYXRhKDAsMCwxLDEpLG4uZGF0YVswXT1uLmRhdGFbM109NjQsbi5kYXRhWzFdPW4uZGF0YVsyXT0wLHQucHV0SW1hZ2VEYXRhKG4sMCwwKSxuPXQuZ2V0SW1hZ2VEYXRhKDAsMCwxLDEpLGkuc2V0KFwicHJlbXVsdGlwbHlBbHBoYVwiLG4uZGF0YVswXTw2MHx8bi5kYXRhWzBdPjcwKTtmb3IodmFyIHIgaW4gYSllLmFkZENvbG9yU3RvcChyLGFbcl0pO3QuZmlsbFN0eWxlPWUsdC5maWxsUmVjdCgwLDAsMSwyNTYpLGkuc2V0KFwiZ3JhZGllbnRcIix0LmdldEltYWdlRGF0YSgwLDAsMSwyNTYpLmRhdGEpfSxnZXRXaWR0aDpmdW5jdGlvbih0KXt2YXIgZT10Lm9mZnNldFdpZHRoO3JldHVybiB0LnN0eWxlLnBhZGRpbmdMZWZ0JiYoZSs9dC5zdHlsZS5wYWRkaW5nTGVmdCksdC5zdHlsZS5wYWRkaW5nUmlnaHQmJihlKz10LnN0eWxlLnBhZGRpbmdSaWdodCksZX0sZ2V0SGVpZ2h0OmZ1bmN0aW9uKHQpe3ZhciBlPXQub2Zmc2V0SGVpZ2h0O3JldHVybiB0LnN0eWxlLnBhZGRpbmdUb3AmJihlKz10LnN0eWxlLnBhZGRpbmdUb3ApLHQuc3R5bGUucGFkZGluZ0JvdHRvbSYmKGUrPXQuc3R5bGUucGFkZGluZ0JvdHRvbSksZX0sY29sb3JpemU6ZnVuY3Rpb24odCxlKXt2YXIgbixpLG8sYSxyLHMsbCxjLHUsaD10aGlzLHA9aC5nZXQoXCJ3aWR0aFwiKSxkPWguZ2V0KFwicmFkaXVzXCIpLGY9aC5nZXQoXCJoZWlnaHRcIiksbT1oLmdldChcImFjdHhcIiksZz1oLmdldChcImN0eFwiKSx5PTMqZCx2PWguZ2V0KFwicHJlbXVsdGlwbHlBbHBoYVwiKSxfPWguZ2V0KFwiZ3JhZGllbnRcIiksYj1oLmdldChcIm9wYWNpdHlcIikseD1oLmdldChcImJvdW5kc1wiKTtudWxsIT10JiZudWxsIT1lPyh0K3k+cCYmKHQ9cC15KSx0PDAmJih0PTApLGU8MCYmKGU9MCksZSt5PmYmJihlPWYteSksbj10LGk9ZSxhPXQreSxvPWUreSk6KG49eC5sPDA/MDp4LmwsYT14LnI+cD9wOngucixpPXgudDwwPzA6eC50LG89eC5iPmY/Zjp4LmIpLHI9bS5nZXRJbWFnZURhdGEobixpLGEtbixvLWkpLHM9ci5kYXRhLmxlbmd0aDtmb3IodmFyIHc9Mzt3PHM7dys9NClsPXIuZGF0YVt3XSxjPTQqbCxjJiYodT1sPGI/bDpiLHIuZGF0YVt3LTNdPV9bY10sci5kYXRhW3ctMl09X1tjKzFdLHIuZGF0YVt3LTFdPV9bYysyXSx2JiYoci5kYXRhW3ctM10vPTI1NS91LHIuZGF0YVt3LTJdLz0yNTUvdSxyLmRhdGFbdy0xXS89MjU1L3UpLHIuZGF0YVt3XT11KTtnLnB1dEltYWdlRGF0YShyLG4saSl9LGRyYXdBbHBoYTpmdW5jdGlvbih0LGUsbixpKXt2YXIgbz10aGlzLGE9by5nZXQoXCJyYWRpdXNcIikscj1vLmdldChcImFjdHhcIikscz0oby5nZXQoXCJtYXhcIiksby5nZXQoXCJib3VuZHNcIikpLGw9dC0xLjUqYT4+MCxjPWUtMS41KmE+PjAsdT10KzEuNSphPj4wLGg9ZSsxLjUqYT4+MDtyLnNoYWRvd0NvbG9yPVwicmdiYSgwLDAsMCxcIisobj9uL28uc3RvcmUubWF4OlwiMC4xXCIpK1wiKVwiLHIuc2hhZG93T2Zmc2V0WD0xNWUzLHIuc2hhZG93T2Zmc2V0WT0xNWUzLHIuc2hhZG93Qmx1cj0xNSxyLmJlZ2luUGF0aCgpLHIuYXJjKHQtMTVlMyxlLTE1ZTMsYSwwLDIqTWF0aC5QSSwhMCksci5jbG9zZVBhdGgoKSxyLmZpbGwoKSxpP28uY29sb3JpemUobCxjKToobDxzLmwmJihzLmw9bCksYzxzLnQmJihzLnQ9YyksdT5zLnImJihzLnI9dSksaD5zLmImJihzLmI9aCkpfSx0b2dnbGVEaXNwbGF5OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuZ2V0KFwidmlzaWJsZVwiKSxuPXQuZ2V0KFwiY2FudmFzXCIpO24uc3R5bGUuZGlzcGxheT1lP1wibm9uZVwiOlwiYmxvY2tcIix0LnNldChcInZpc2libGVcIiwhZSl9LGdldEltYWdlRGF0YTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldChcImNhbnZhc1wiKS50b0RhdGFVUkwoKX0sY2xlYXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5nZXQoXCJ3aWR0aFwiKSxuPXQuZ2V0KFwiaGVpZ2h0XCIpO3Quc3RvcmUuc2V0KFwiZGF0YVwiLFtdKSx0LmdldChcImN0eFwiKS5jbGVhclJlY3QoMCwwLGUsbiksdC5nZXQoXCJhY3R4XCIpLmNsZWFyUmVjdCgwLDAsZSxuKX0sY2xlYW51cDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5nZXQoXCJlbGVtZW50XCIpLnJlbW92ZUNoaWxkKHQuZ2V0KFwiY2FudmFzXCIpKX19LHtjcmVhdGU6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBuKHQpfSx1dGlsOnttb3VzZVBvc2l0aW9uOmZ1bmN0aW9uKHQpe3ZhciBlLG47aWYodC5sYXllclg/KGU9dC5sYXllclgsbj10LmxheWVyWSk6dC5vZmZzZXRYJiYoZT10Lm9mZnNldFgsbj10Lm9mZnNldFkpLHZvaWQgMCE9PWUpcmV0dXJuW2Usbl19fX19KCksbj1mdW5jdGlvbihlKXt0cnl7Qk1hcH1jYXRjaCh0KXt0aHJvdyBFcnJvcihcIkJhaWR1IE1hcCBKUyBBUEkgaXMgbm90IHJlYWR5IHlldCFcIil9aWYoIW4uX2lzRXh0ZW5kZWQpe24uX2lzRXh0ZW5kZWQ9ITAsdChuLEJNYXAuT3ZlcmxheSxcIkhlYXRtYXBPdmVybGF5XCIpO3ZhciBpPW5ldyBuKGUpO3RoaXMuX19wcm90b19fPWkuX19wcm90b19ffXRoaXMuY29uZj1lLHRoaXMuaGVhdG1hcD1udWxsLHRoaXMubGF0bG5ncz1bXSx0aGlzLmJvdW5kcz1udWxsLHRoaXMuX21vdmVlbmRIYW5kbGVyPXRoaXMuX21vdmVlbmRIYW5kbGVyLmJpbmQodGhpcyl9O3JldHVybiBuLnByb3RvdHlwZS5pbml0aWFsaXplPWZ1bmN0aW9uKHQpe3RoaXMuX21hcD10O3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIG4uc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLG4uc3R5bGUudG9wPTAsbi5zdHlsZS5sZWZ0PTAsbi5zdHlsZS5ib3JkZXI9MCxuLnN0eWxlLndpZHRoPXRoaXMuX21hcC5nZXRTaXplKCkud2lkdGgrXCJweFwiLG4uc3R5bGUuaGVpZ2h0PXRoaXMuX21hcC5nZXRTaXplKCkuaGVpZ2h0K1wicHhcIix0aGlzLmNvbmYuZWxlbWVudD1uLHQuZ2V0UGFuZXMoKS5tYXBQYW5lLmFwcGVuZENoaWxkKG4pLHRoaXMuaGVhdG1hcD1lLmNyZWF0ZSh0aGlzLmNvbmYpLHRoaXMuX2Rpdj1uLG59LG4ucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9tYXAuZ2V0Qm91bmRzKCk7aWYoIXQuZXF1YWxzKHRoaXMuYm91bmRzKSl7dGhpcy5ib3VuZHM9dDt2YXIgZT10aGlzLl9tYXAucG9pbnRUb092ZXJsYXlQaXhlbCh0LmdldE5vcnRoRWFzdCgpKSxuPXRoaXMuX21hcC5wb2ludFRvT3ZlcmxheVBpeGVsKHQuZ2V0U291dGhXZXN0KCkpO2lmKGUmJm4pe3ZhciBpPWUueSxvPW4ueCxhPW4ueS1lLnkscj1lLngtbi54O2lmKHRoaXMuY29uZi5lbGVtZW50LnN0eWxlLmxlZnQ9bytcInB4XCIsdGhpcy5jb25mLmVsZW1lbnQuc3R5bGUudG9wPWkrXCJweFwiLHRoaXMuY29uZi5lbGVtZW50LnN0eWxlLndpZHRoPXIrXCJweFwiLHRoaXMuY29uZi5lbGVtZW50LnN0eWxlLmhlaWdodD1hK1wicHhcIix0aGlzLmhlYXRtYXAuc3RvcmUuZ2V0KFwiaGVhdG1hcFwiKS5yZXNpemUoKSx0aGlzLmxhdGxuZ3MubGVuZ3RoPjApe3RoaXMuaGVhdG1hcC5jbGVhcigpO2Zvcih2YXIgcz10aGlzLmxhdGxuZ3MubGVuZ3RoLGw9e21heDp0aGlzLmhlYXRtYXAuc3RvcmUubWF4LGRhdGE6W119O3MtLTspe3ZhciBjPXRoaXMubGF0bG5nc1tzXS5sYXRsbmc7aWYodC5jb250YWluc1BvaW50KGMpKXt2YXIgdT10aGlzLl9tYXAucG9pbnRUb092ZXJsYXlQaXhlbChjKSxoPW5ldyBCTWFwLlBpeGVsKHUueC1vLHUueS1pKSxwPXRoaXMucGl4ZWxUcmFuc2Zvcm0oaCk7bC5kYXRhLnB1c2goe3g6cC54LHk6cC55LGNvdW50OnRoaXMubGF0bG5nc1tzXS5jfSl9fXRoaXMuaGVhdG1hcC5zdG9yZS5zZXREYXRhU2V0KGwpfX19fSxuLnByb3RvdHlwZS5waXhlbFRyYW5zZm9ybT1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5oZWF0bWFwLmdldChcIndpZHRoXCIpLG49dGhpcy5oZWF0bWFwLmdldChcImhlaWdodFwiKTt0Lng8MDspdC54Kz1lO2Zvcig7dC54PmU7KXQueC09ZTtmb3IoO3QueTwwOyl0LnkrPW47Zm9yKDt0Lnk+bjspdC55LT1uO3JldHVybiB0Lng9dC54Pj4wLHQueT10Lnk+PjAsdH0sbi5wcm90b3R5cGUuX21vdmVlbmRIYW5kbGVyPWZ1bmN0aW9uKHQpe3RoaXMuc2V0RGF0YVNldCh0aGlzLl9kYXRhKSxkZWxldGUgdGhpcy5fZGF0YSx0aGlzLl9tYXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdmVlbmRcIix0aGlzLl9tb3ZlZW5kSGFuZGxlcil9LG4ucHJvdG90eXBlLnNldERhdGFTZXQ9ZnVuY3Rpb24odCl7aWYodGhpcy5fbWFwKXt2YXIgZT10aGlzLl9tYXAuZ2V0Qm91bmRzKCksbj10aGlzLl9tYXAucG9pbnRUb092ZXJsYXlQaXhlbChlLmdldE5vcnRoRWFzdCgpKSxpPXRoaXMuX21hcC5wb2ludFRvT3ZlcmxheVBpeGVsKGUuZ2V0U291dGhXZXN0KCkpO24mJml8fCh0aGlzLl9kYXRhPXQsdGhpcy5fbWFwLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3ZlZW5kXCIsdGhpcy5fbW92ZWVuZEhhbmRsZXIpKTt2YXIgbz17bWF4OnQubWF4LGRhdGE6W119LGE9dC5kYXRhLHI9YS5sZW5ndGg7Zm9yKHRoaXMubGF0bG5ncz1bXTtyLS07KXt2YXIgcz1uZXcgQk1hcC5Qb2ludChhW3JdLmxuZyxhW3JdLmxhdCk7aWYodGhpcy5sYXRsbmdzLnB1c2goe2xhdGxuZzpzLGM6YVtyXS5jb3VudH0pLGUuY29udGFpbnNQb2ludChzKSl7dmFyIGw9dGhpcy5fbWFwLnBvaW50VG9PdmVybGF5UGl4ZWwocyksYz10aGlzLl9tYXAucG9pbnRUb092ZXJsYXlQaXhlbChlLmdldFNvdXRoV2VzdCgpKS54LHU9dGhpcy5fbWFwLnBvaW50VG9PdmVybGF5UGl4ZWwoZS5nZXROb3J0aEVhc3QoKSkueSxoPW5ldyBCTWFwLlBpeGVsKGwueC1jLGwueS11KSxwPXRoaXMucGl4ZWxUcmFuc2Zvcm0oaCk7by5kYXRhLnB1c2goe3g6cC54LHk6cC55LGNvdW50OmFbcl0uY291bnR9KX19dGhpcy5oZWF0bWFwLmNsZWFyKCksdGhpcy5oZWF0bWFwLnN0b3JlLnNldERhdGFTZXQobyl9fSxuLnByb3RvdHlwZS5hZGREYXRhUG9pbnQ9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW5ldyBCTWFwLlBvaW50KHQsZSksbz10aGlzLnBpeGVsVHJhbnNmb3JtKHRoaXMuX21hcC5wb2ludFRvT3ZlcmxheVBpeGVsKGkpKTt0aGlzLmhlYXRtYXAuc3RvcmUuYWRkRGF0YVBvaW50KG8ueCxvLnksbiksdGhpcy5sYXRsbmdzLnB1c2goe2xhdGxuZzppLGM6bn0pfSxuLnByb3RvdHlwZS50b2dnbGU9ZnVuY3Rpb24oKXt0aGlzLmhlYXRtYXAudG9nZ2xlRGlzcGxheSgpfSxufSl9LGZ1bmN0aW9uKHQsZSxuKXshZnVuY3Rpb24oZSxuKXt0LmV4cG9ydHM9bigpfSgwLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3RoaXMuX3BvaW50PXQsdGhpcy5faHRtbD1lfWZ1bmN0aW9uIGUoKXt0LnByb3RvdHlwZT1uZXcgQk1hcC5PdmVybGF5LHQucHJvdG90eXBlLmluaXRpYWxpemU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZGl2PW4uZG9tLmNyZWF0ZShcImRpdlwiLHtzdHlsZTpcImJvcmRlcjpzb2xpZCAxcHggI2NjYzt3aWR0aDphdXRvO21pbi13aWR0aDo1MHB4O3RleHQtYWxpZ246Y2VudGVyO3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQ6I2ZmZjtjb2xvcjojMDAwO2ZvbnQtc2l6ZToxMnB4O2JvcmRlci1yYWRpdXM6IDEwcHg7cGFkZGluZzo1cHg7d2hpdGUtc3BhY2U6IG5vd3JhcDtcIn0pO3JldHVybiBlLmlubmVySFRNTD10aGlzLl9odG1sLHQuZ2V0UGFuZXMoKS5mbG9hdFBhbmUuYXBwZW5kQ2hpbGQoZSksdGhpcy5fbWFwPXQsZX0sdC5wcm90b3R5cGUuZHJhdz1mdW5jdGlvbigpe3RoaXMuc2V0UG9zaXRpb24odGhpcy5sdXNodU1haW4uX21hcmtlci5nZXRQb3NpdGlvbigpLHRoaXMubHVzaHVNYWluLl9tYXJrZXIuZ2V0SWNvbigpLnNpemUpfSxuLm9iamVjdC5leHRlbmQodC5wcm90b3R5cGUse3NldFBvc2l0aW9uOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5fbWFwLnBvaW50VG9PdmVybGF5UGl4ZWwodCksbz1uLmRvbS5nZXRTdHlsZSh0aGlzLl9kaXYsXCJ3aWR0aFwiKSxhPW4uZG9tLmdldFN0eWxlKHRoaXMuX2RpdixcImhlaWdodFwiKSxyPXBhcnNlSW50KHRoaXMuX2Rpdi5jbGllbnRXaWR0aHx8bywxMCk7cGFyc2VJbnQodGhpcy5fZGl2LmNsaWVudEhlaWdodHx8YSwxMCk7dGhpcy5fZGl2LnN0eWxlLmxlZnQ9aS54LXIvMitcInB4XCIsdGhpcy5fZGl2LnN0eWxlLmJvdHRvbT0tKGkueS1lLmhlaWdodCkrXCJweFwifSxzZXRIdG1sOmZ1bmN0aW9uKHQpe3RoaXMuX2Rpdi5pbm5lckhUTUw9dH0sc2V0UmVsYXRlZENsYXNzOmZ1bmN0aW9uKHQpe3RoaXMubHVzaHVNYWluPXR9fSl9dmFyIG49e307bi5kb209e30sbi5kb20uZz1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdHx8dCBpbnN0YW5jZW9mIFN0cmluZz9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KTp0JiZ0Lm5vZGVOYW1lJiYoMT09dC5ub2RlVHlwZXx8OT09dC5ub2RlVHlwZSk/dDpudWxsfSxuLmc9bi5HPW4uZG9tLmcsbi5sYW5nPW4ubGFuZ3x8e30sbi5sYW5nLmlzU3RyaW5nPWZ1bmN0aW9uKHQpe3JldHVyblwiW29iamVjdCBTdHJpbmddXCI9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX0sbi5pc1N0cmluZz1uLmxhbmcuaXNTdHJpbmcsbi5kb20uX2c9ZnVuY3Rpb24odCl7cmV0dXJuIG4ubGFuZy5pc1N0cmluZyh0KT9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KTp0fSxuLl9nPW4uZG9tLl9nLG4uZG9tLmdldERvY3VtZW50PWZ1bmN0aW9uKHQpe3JldHVybiB0PW4uZG9tLmcodCksOT09dC5ub2RlVHlwZT90OnQub3duZXJEb2N1bWVudHx8dC5kb2N1bWVudH0sbi5icm93c2VyPW4uYnJvd3Nlcnx8e30sbi5icm93c2VyLmllPW4uaWU9L21zaWUgKFxcZCtcXC5cXGQrKS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk/ZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHwrUmVnRXhwLiQxOnZvaWQgMCxuLmRvbS5nZXRDb21wdXRlZFN0eWxlPWZ1bmN0aW9uKHQsZSl7dD1uLmRvbS5fZyh0KTt2YXIgaSxvPW4uZG9tLmdldERvY3VtZW50KHQpO3JldHVybiBvLmRlZmF1bHRWaWV3JiZvLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUmJihpPW8uZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSh0LG51bGwpKT9pW2VdfHxpLmdldFByb3BlcnR5VmFsdWUoZSk6XCJcIn0sbi5kb20uX3N0eWxlRml4ZXI9bi5kb20uX3N0eWxlRml4ZXJ8fHt9LG4uZG9tLl9zdHlsZUZpbHRlcj1uLmRvbS5fc3R5bGVGaWx0ZXJ8fFtdLG4uZG9tLl9zdHlsZUZpbHRlci5maWx0ZXI9ZnVuY3Rpb24odCxlLGkpe2Zvcih2YXIgbyxhPTAscj1uLmRvbS5fc3R5bGVGaWx0ZXI7bz1yW2FdO2ErKykobz1vW2ldKSYmKGU9byh0LGUpKTtyZXR1cm4gZX0sbi5zdHJpbmc9bi5zdHJpbmd8fHt9LG4uc3RyaW5nLnRvQ2FtZWxDYXNlPWZ1bmN0aW9uKHQpe3JldHVybiB0LmluZGV4T2YoXCItXCIpPDAmJnQuaW5kZXhPZihcIl9cIik8MD90OnQucmVwbGFjZSgvWy1fXVteLV9dL2csZnVuY3Rpb24odCl7cmV0dXJuIHQuY2hhckF0KDEpLnRvVXBwZXJDYXNlKCl9KX0sbi5kb20uZ2V0U3R5bGU9ZnVuY3Rpb24odCxlKXt2YXIgaT1uLmRvbTt0PWkuZyh0KSxlPW4uc3RyaW5nLnRvQ2FtZWxDYXNlKGUpO3ZhciBvPXQuc3R5bGVbZV18fCh0LmN1cnJlbnRTdHlsZT90LmN1cnJlbnRTdHlsZVtlXTpcIlwiKXx8aS5nZXRDb21wdXRlZFN0eWxlKHQsZSk7aWYoIW8pe3ZhciBhPWkuX3N0eWxlRml4ZXJbZV07YSYmKG89YS5nZXQ/YS5nZXQodCk6bi5kb20uZ2V0U3R5bGUodCxhKSl9cmV0dXJuKGE9aS5fc3R5bGVGaWx0ZXIpJiYobz1hLmZpbHRlcihlLG8sXCJnZXRcIikpLG99LG4uZ2V0U3R5bGU9bi5kb20uZ2V0U3R5bGUsbi5kb20uX05BTUVfQVRUUlM9ZnVuY3Rpb24oKXt2YXIgdD17Y2VsbHBhZGRpbmc6XCJjZWxsUGFkZGluZ1wiLGNlbGxzcGFjaW5nOlwiY2VsbFNwYWNpbmdcIixjb2xzcGFuOlwiY29sU3BhblwiLHJvd3NwYW46XCJyb3dTcGFuXCIsdmFsaWduOlwidkFsaWduXCIsdXNlbWFwOlwidXNlTWFwXCIsZnJhbWVib3JkZXI6XCJmcmFtZUJvcmRlclwifTtyZXR1cm4gbi5icm93c2VyLmllPDg/KHQuZm9yPVwiaHRtbEZvclwiLHQuY2xhc3M9XCJjbGFzc05hbWVcIik6KHQuaHRtbEZvcj1cImZvclwiLHQuY2xhc3NOYW1lPVwiY2xhc3NcIiksdH0oKSxuLmRvbS5zZXRBdHRyPWZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdD1uLmRvbS5nKHQpLFwic3R5bGVcIj09ZT90LnN0eWxlLmNzc1RleHQ9aTooZT1uLmRvbS5fTkFNRV9BVFRSU1tlXXx8ZSx0LnNldEF0dHJpYnV0ZShlLGkpKSx0fSxuLnNldEF0dHI9bi5kb20uc2V0QXR0cixuLmRvbS5zZXRBdHRycz1mdW5jdGlvbih0LGUpe3Q9bi5kb20uZyh0KTtmb3IodmFyIGkgaW4gZSluLmRvbS5zZXRBdHRyKHQsaSxlW2ldKTtyZXR1cm4gdH0sbi5zZXRBdHRycz1uLmRvbS5zZXRBdHRycyxuLmRvbS5jcmVhdGU9ZnVuY3Rpb24odCxlKXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHQpLG89ZXx8e307cmV0dXJuIG4uZG9tLnNldEF0dHJzKGksbyl9LG4ub2JqZWN0PW4ub2JqZWN0fHx7fSxuLmV4dGVuZD1uLm9iamVjdC5leHRlbmQ9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSllLmhhc093blByb3BlcnR5KG4pJiYodFtuXT1lW25dKTtyZXR1cm4gdH07dmFyIGk9ZnVuY3Rpb24odCxlLG4pe3RyeXtCTWFwfWNhdGNoKHQpe3Rocm93IEVycm9yKFwiQmFpZHUgTWFwIEpTIEFQSSBpcyBub3QgcmVhZHkgeWV0IVwiKX0hZXx8ZS5sZW5ndGg8MXx8KHRoaXMuX21hcD10LHRoaXMuX3BhdGg9ZSx0aGlzLmk9MCx0aGlzLl9zZXRUaW1lb3V0UXVlbmU9W10sdGhpcy5fcHJvamVjdGlvbj10aGlzLl9tYXAuZ2V0TWFwVHlwZSgpLmdldFByb2plY3Rpb24oKSx0aGlzLl9vcHRzPXtpY29uOm51bGwsc3BlZWQ6NGUzLGRlZmF1bHRDb250ZW50OlwiXCIsc2hvd0luZm9XaW5kb3c6ITF9LHRoaXMuX3NldE9wdGlvbnMobiksdGhpcy5fcm90YXRpb249MCwhdGhpcy5fb3B0cy5pY29uIGluc3RhbmNlb2YgQk1hcC5JY29uJiYodGhpcy5fb3B0cy5pY29uPWRlZmF1bHRJY29uKSl9O3JldHVybiBpLnByb3RvdHlwZS5fc2V0T3B0aW9ucz1mdW5jdGlvbih0KXtpZih0KWZvcih2YXIgZSBpbiB0KXQuaGFzT3duUHJvcGVydHkoZSkmJih0aGlzLl9vcHRzW2VdPXRbZV0pfSxpLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10Ll9wYXRoLmxlbmd0aDtpZih0aGlzLl9vcHRzLm9uc3RhcnQmJnRoaXMuX29wdHMub25zdGFydCh0KSx0LmkmJnQuaTxlLTEpe2lmKCF0Ll9mcm9tUGF1c2UpcmV0dXJuO3QuX2Zyb21TdG9wfHx0Ll9tb3ZlTmV4dCgrK3QuaSl9ZWxzZSF0Ll9tYXJrZXImJnQuX2FkZE1hcmtlcigpLHQuX3RpbWVvdXRGbGFnPXNldFRpbWVvdXQoZnVuY3Rpb24oKXshdC5fb3ZlcmxheSYmdC5fYWRkSW5mb1dpbigpLHQuX21vdmVOZXh0KHQuaSl9LDQwMCk7dGhpcy5fZnJvbVBhdXNlPSExLHRoaXMuX2Zyb21TdG9wPSExfSxpLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5pPTAsdGhpcy5fZnJvbVN0b3A9ITAsY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbEZsYWcpLHRoaXMuX2NsZWFyVGltZW91dCgpO2Zvcih2YXIgdD0wLGU9dGhpcy5fb3B0cy5sYW5kbWFya1BvaXMsbj1lLmxlbmd0aDt0PG47dCsrKWVbdF0uYlNob3c9ITE7dGhpcy5fb3B0cy5vbnN0b3AmJnRoaXMuX29wdHMub25zdG9wKHRoaXMpfSxpLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe2NsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxGbGFnKSx0aGlzLl9mcm9tUGF1c2U9ITAsdGhpcy5fY2xlYXJUaW1lb3V0KCksdGhpcy5fb3B0cy5vbnBhdXNlJiZ0aGlzLl9vcHRzLm9ucGF1c2UodGhpcyl9LGkucHJvdG90eXBlLmhpZGVJbmZvV2luZG93PWZ1bmN0aW9uKCl7dGhpcy5fb3B0cy5zaG93SW5mb1dpbmRvdz0hMSx0aGlzLl9vdmVybGF5JiYodGhpcy5fb3ZlcmxheS5fZGl2LnN0eWxlLnZpc2liaWxpdHk9XCJoaWRkZW5cIil9LGkucHJvdG90eXBlLnNob3dJbmZvV2luZG93PWZ1bmN0aW9uKCl7dGhpcy5fb3B0cy5zaG93SW5mb1dpbmRvdz0hMCx0aGlzLl9vdmVybGF5JiYodGhpcy5fb3ZlcmxheS5fZGl2LnN0eWxlLnZpc2liaWxpdHk9XCJ2aXNpYmxlXCIpfSxpLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7Y2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbEZsYWcpLHRoaXMuX3NldFRpbWVvdXRRdWVuZSYmdGhpcy5fY2xlYXJUaW1lb3V0KCksdGhpcy5fbWFwJiYodGhpcy5fbWFwLnJlbW92ZU92ZXJsYXkodGhpcy5fb3ZlcmxheSksdGhpcy5fbWFwLnJlbW92ZU92ZXJsYXkodGhpcy5fbWFya2VyKSl9LG4ub2JqZWN0LmV4dGVuZChpLnByb3RvdHlwZSx7X2FkZE1hcmtlcjpmdW5jdGlvbih0KXt0aGlzLl9tYXJrZXImJih0aGlzLnN0b3AoKSx0aGlzLl9tYXAucmVtb3ZlT3ZlcmxheSh0aGlzLl9tYXJrZXIpLGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0RmxhZykpLHRoaXMuX292ZXJsYXkmJnRoaXMuX21hcC5yZW1vdmVPdmVybGF5KHRoaXMuX292ZXJsYXkpO3ZhciBlPW5ldyBCTWFwLk1hcmtlcih0aGlzLl9wYXRoWzBdKTt0aGlzLl9vcHRzLmljb24mJmUuc2V0SWNvbih0aGlzLl9vcHRzLmljb24pLHRoaXMuX21hcC5hZGRPdmVybGF5KGUpLGUuc2V0QW5pbWF0aW9uKEJNQVBfQU5JTUFUSU9OX0RST1ApLHRoaXMuX21hcmtlcj1lfSxfYWRkSW5mb1dpbjpmdW5jdGlvbigpe3ZhciBuPXRoaXM7IXQucHJvdG90eXBlLmluaXRpYWxpemUmJmUoKTt2YXIgaT1uZXcgdChuLl9tYXJrZXIuZ2V0UG9zaXRpb24oKSxuLl9vcHRzLmRlZmF1bHRDb250ZW50KTtpLnNldFJlbGF0ZWRDbGFzcyh0aGlzKSx0aGlzLl9vdmVybGF5PWksdGhpcy5fbWFwLmFkZE92ZXJsYXkoaSksdGhpcy5fb3B0cy5zaG93SW5mb1dpbmRvdz90aGlzLnNob3dJbmZvV2luZG93KCk6dGhpcy5oaWRlSW5mb1dpbmRvdygpfSxfZ2V0TWVyY2F0b3I6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX21hcC5nZXRNYXBUeXBlKCkuZ2V0UHJvamVjdGlvbigpLmxuZ0xhdFRvUG9pbnQodCl9LF9nZXREaXN0YW5jZTpmdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codC54LWUueCwyKStNYXRoLnBvdyh0LnktZS55LDIpKX0sX21vdmU6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMsbz0wLGE9dGhpcy5fb3B0cy5zcGVlZC8xMDAscj10aGlzLl9wcm9qZWN0aW9uLmxuZ0xhdFRvUG9pbnQodCkscz10aGlzLl9wcm9qZWN0aW9uLmxuZ0xhdFRvUG9pbnQoZSksbD1NYXRoLnJvdW5kKGkuX2dldERpc3RhbmNlKHIscykvYSk7aWYobDwxKXJldHVybiB2b2lkIGkuX21vdmVOZXh0KCsraS5pKTtpLl9pbnRlcnZhbEZsYWc9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtpZihvPj1sKXtpZihjbGVhckludGVydmFsKGkuX2ludGVydmFsRmxhZyksaS5pPmkuX3BhdGgubGVuZ3RoKXJldHVybjtpLl9tb3ZlTmV4dCgrK2kuaSl9ZWxzZXtvKys7dmFyIGE9bihyLngscy54LG8sbCksYz1uKHIueSxzLnksbyxsKSx1PWkuX3Byb2plY3Rpb24ucG9pbnRUb0xuZ0xhdChuZXcgQk1hcC5QaXhlbChhLGMpKTtpZigxPT1vKXt2YXIgaD1udWxsO2kuaS0xPj0wJiYoaD1pLl9wYXRoW2kuaS0xXSksMT09aS5fb3B0cy5lbmFibGVSb3RhdGlvbiYmaS5zZXRSb3RhdGlvbihoLHQsZSksaS5fb3B0cy5hdXRvVmlldyYmKGkuX21hcC5nZXRCb3VuZHMoKS5jb250YWluc1BvaW50KHUpfHxpLl9tYXAuc2V0Q2VudGVyKHUpKX1pLl9tYXJrZXIuc2V0UG9zaXRpb24odSksaS5fc2V0SW5mb1dpbih1KX19LDEwKX0sc2V0Um90YXRpb246ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRoaXMsbz0wO2lmKGU9aS5fbWFwLnBvaW50VG9QaXhlbChlKSxuPWkuX21hcC5wb2ludFRvUGl4ZWwobiksbi54IT1lLngpe3ZhciBhPShuLnktZS55KS8obi54LWUueCk7bz0zNjAqTWF0aC5hdGFuKGEpLygyKk1hdGguUEkpLG89bi54PGUueD85MC1vKzkwOi1vLGkuX21hcmtlci5zZXRSb3RhdGlvbigtbyl9ZWxzZXt2YXIgcj1uLnktZS55LHM9MDtzPXI+MD8tMToxLGkuX21hcmtlci5zZXRSb3RhdGlvbig5MCotcyl9fSxsaW5lUGl4ZWxsZW5ndGg6ZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5zcXJ0KE1hdGguYWJzKHQueC1lLngpKk1hdGguYWJzKHQueC1lLngpK01hdGguYWJzKHQueS1lLnkpKk1hdGguYWJzKHQueS1lLnkpKX0scG9pbnRUb1BvaW50OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1hdGguYWJzKHQueC1lLngpKk1hdGguYWJzKHQueC1lLngpK01hdGguYWJzKHQueS1lLnkpKk1hdGguYWJzKHQueS1lLnkpfSxfbW92ZU5leHQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0PHRoaXMuX3BhdGgubGVuZ3RoLTE/ZS5fbW92ZShlLl9wYXRoW3RdLGUuX3BhdGhbdCsxXSxlLl90d2Vlbi5saW5lYXIpOmUuc3RvcCgpfSxfc2V0SW5mb1dpbjpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2UuX292ZXJsYXkuc2V0UG9zaXRpb24odCxlLl9tYXJrZXIuZ2V0SWNvbigpLnNpemUpO3ZhciBuPWUuX3Ryb3VnaFBvaW50SW5kZXgodCk7LTEhPW4/KGNsZWFySW50ZXJ2YWwoZS5faW50ZXJ2YWxGbGFnKSxlLl9vdmVybGF5LnNldEh0bWwoZS5fb3B0cy5sYW5kbWFya1BvaXNbbl0uaHRtbCksZS5fb3ZlcmxheS5zZXRQb3NpdGlvbih0LGUuX21hcmtlci5nZXRJY29uKCkuc2l6ZSksZS5fcGF1c2VGb3JWaWV3KG4pKTplLl9vdmVybGF5LnNldEh0bWwoZS5fb3B0cy5kZWZhdWx0Q29udGVudCl9LF9wYXVzZUZvclZpZXc6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLl9tb3ZlTmV4dCgrK2UuaSl9LDFlMyplLl9vcHRzLmxhbmRtYXJrUG9pc1t0XS5wYXVzZVRpbWUpO2UuX3NldFRpbWVvdXRRdWVuZS5wdXNoKG4pfSxfY2xlYXJUaW1lb3V0OmZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuX3NldFRpbWVvdXRRdWVuZSljbGVhclRpbWVvdXQodGhpcy5fc2V0VGltZW91dFF1ZW5lW3RdKTt0aGlzLl9zZXRUaW1lb3V0UXVlbmUubGVuZ3RoPTB9LF90d2Vlbjp7bGluZWFyOmZ1bmN0aW9uKHQsZSxuLGkpe3JldHVybihlLXQpKm4vaSt0fX0sX3Ryb3VnaFBvaW50SW5kZXg6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuX29wdHMubGFuZG1hcmtQb2lzLG49MCxpPWUubGVuZ3RoO248aTtuKyspaWYoIWVbbl0uYlNob3cmJnRoaXMuX21hcC5nZXREaXN0YW5jZShuZXcgQk1hcC5Qb2ludChlW25dLmxuZyxlW25dLmxhdCksdCk8MTApcmV0dXJuIGVbbl0uYlNob3c9ITAsbjtyZXR1cm4tMX19KSxpfSl9LGZ1bmN0aW9uKHQsZSxuKXsoZnVuY3Rpb24oZSl7dmFyIGksbzshZnVuY3Rpb24oZSxuKXt0LmV4cG9ydHM9bigpfSgwLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCh0KXt0aGlzLl9tYXJrZXJDbHVzdGVyZXI9dCx0aGlzLl9tYXA9dC5nZXRNYXAoKSx0aGlzLl9taW5DbHVzdGVyU2l6ZT10LmdldE1pbkNsdXN0ZXJTaXplKCksdGhpcy5faXNBdmVyYWdlQ2VudGVyPXQuaXNBdmVyYWdlQ2VudGVyKCksdGhpcy5fY2VudGVyPW51bGwsdGhpcy5fbWFya2Vycz1bXSx0aGlzLl9ncmlkQm91bmRzPW51bGwsdGhpcy5faXNSZWFsPSExLHRoaXMuX2NsdXN0ZXJNYXJrZXI9bmV3IHModGhpcy5fY2VudGVyLHRoaXMuX21hcmtlcnMubGVuZ3RoLHtzdHlsZXM6dGhpcy5fbWFya2VyQ2x1c3RlcmVyLmdldFN0eWxlcygpfSl9dmFyIGE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09ZT9lOnRoaXMscj1mdW5jdGlvbih0LGUpe3JldHVybiBlPXtleHBvcnRzOnt9fSx0KGUsZS5leHBvcnRzLGEpLGUuZXhwb3J0c30oZnVuY3Rpb24odCxlLGEpeyFmdW5jdGlvbihhLHIpe1wib2JqZWN0XCI9PXR5cGVvZiBlP3QuZXhwb3J0cz1yKCk6KGk9cix2b2lkIDAhPT0obz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuY2FsbChlLG4sZSx0KTppKSYmKHQuZXhwb3J0cz1vKSl9KDAsZnVuY3Rpb24oKXt2YXIgdCxlPXQ9ZXx8e3ZlcnNpb246XCIxLjMuOFwifSxuPXt9O2UuZ3VpZD1cIiRCQUlEVSRcIixuW2UuZ3VpZF09bltlLmd1aWRdfHx7fSxlLmRvbT1lLmRvbXx8e30sZS5kb20uZz1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdHx8dCBpbnN0YW5jZW9mIFN0cmluZz9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KTp0JiZ0Lm5vZGVOYW1lJiYoMT09dC5ub2RlVHlwZXx8OT09dC5ub2RlVHlwZSk/dDpudWxsfSxlLmc9ZS5HPWUuZG9tLmcsZS5kb20uZ2V0RG9jdW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9ZS5kb20uZyh0KSw5PT10Lm5vZGVUeXBlP3Q6dC5vd25lckRvY3VtZW50fHx0LmRvY3VtZW50fSxlLmxhbmc9ZS5sYW5nfHx7fSxlLmxhbmcuaXNTdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuXCJbb2JqZWN0IFN0cmluZ11cIj09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfSxlLmlzU3RyaW5nPWUubGFuZy5pc1N0cmluZyxlLmRvbS5fZz1mdW5jdGlvbih0KXtyZXR1cm4gZS5sYW5nLmlzU3RyaW5nKHQpP2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpOnR9LGUuX2c9ZS5kb20uX2csZS5icm93c2VyPWUuYnJvd3Nlcnx8e30sL21zaWUgKFxcZCtcXC5cXGQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmKGUuYnJvd3Nlci5pZT1lLmllPWRvY3VtZW50LmRvY3VtZW50TW9kZXx8K1JlZ0V4cC4kMSksZS5kb20uZ2V0Q29tcHV0ZWRTdHlsZT1mdW5jdGlvbih0LG4pe3Q9ZS5kb20uX2codCk7dmFyIGksbz1lLmRvbS5nZXREb2N1bWVudCh0KTtyZXR1cm4gby5kZWZhdWx0VmlldyYmby5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlJiYoaT1vLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUodCxudWxsKSk/aVtuXXx8aS5nZXRQcm9wZXJ0eVZhbHVlKG4pOlwiXCJ9LGUuZG9tLl9zdHlsZUZpeGVyPWUuZG9tLl9zdHlsZUZpeGVyfHx7fSxlLmRvbS5fc3R5bGVGaWx0ZXI9ZS5kb20uX3N0eWxlRmlsdGVyfHxbXSxlLmRvbS5fc3R5bGVGaWx0ZXIuZmlsdGVyPWZ1bmN0aW9uKHQsbixpKXtmb3IodmFyIG8sYT0wLHI9ZS5kb20uX3N0eWxlRmlsdGVyO289clthXTthKyspKG89b1tpXSkmJihuPW8odCxuKSk7cmV0dXJuIG59LGUuc3RyaW5nPWUuc3RyaW5nfHx7fSxlLnN0cmluZy50b0NhbWVsQ2FzZT1mdW5jdGlvbih0KXtyZXR1cm4gdC5pbmRleE9mKFwiLVwiKTwwJiZ0LmluZGV4T2YoXCJfXCIpPDA/dDp0LnJlcGxhY2UoL1stX11bXi1fXS9nLGZ1bmN0aW9uKHQpe3JldHVybiB0LmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpfSl9LGUuZG9tLmdldFN0eWxlPWZ1bmN0aW9uKHQsbil7dmFyIGk9ZS5kb207dD1pLmcodCksbj1lLnN0cmluZy50b0NhbWVsQ2FzZShuKTt2YXIgbz10LnN0eWxlW25dfHwodC5jdXJyZW50U3R5bGU/dC5jdXJyZW50U3R5bGVbbl06XCJcIil8fGkuZ2V0Q29tcHV0ZWRTdHlsZSh0LG4pO2lmKCFvKXt2YXIgYT1pLl9zdHlsZUZpeGVyW25dO2EmJihvPWEuZ2V0P2EuZ2V0KHQpOmUuZG9tLmdldFN0eWxlKHQsYSkpfXJldHVybihhPWkuX3N0eWxlRmlsdGVyKSYmKG89YS5maWx0ZXIobixvLFwiZ2V0XCIpKSxvfSxlLmdldFN0eWxlPWUuZG9tLmdldFN0eWxlLC9vcGVyYVxcLyhcXGQrXFwuXFxkKS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJihlLmJyb3dzZXIub3BlcmE9K1JlZ0V4cC4kMSksZS5icm93c2VyLmlzV2Via2l0PS93ZWJraXQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLGUuYnJvd3Nlci5pc0dlY2tvPS9nZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJiEvbGlrZSBnZWNrby9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZS5icm93c2VyLmlzU3RyaWN0PVwiQ1NTMUNvbXBhdFwiPT1kb2N1bWVudC5jb21wYXRNb2RlLGUuZG9tLmdldFBvc2l0aW9uPWZ1bmN0aW9uKHQpe3Q9ZS5kb20uZyh0KTt2YXIgbixpLG89ZS5kb20uZ2V0RG9jdW1lbnQodCksYT1lLmJyb3dzZXIscj1lLmRvbS5nZXRTdHlsZSxzPShhLmlzR2Vja28+MCYmby5nZXRCb3hPYmplY3RGb3ImJlwiYWJzb2x1dGVcIj09cih0LFwicG9zaXRpb25cIikmJihcIlwiPT09dC5zdHlsZS50b3B8fHQuc3R5bGUubGVmdCkse2xlZnQ6MCx0b3A6MH0pLGw9YS5pZSYmIWEuaXNTdHJpY3Q/by5ib2R5Om8uZG9jdW1lbnRFbGVtZW50O2lmKHQ9PWwpcmV0dXJuIHM7aWYodC5nZXRCb3VuZGluZ0NsaWVudFJlY3Qpe2k9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxzLmxlZnQ9TWF0aC5mbG9vcihpLmxlZnQpK01hdGgubWF4KG8uZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsby5ib2R5LnNjcm9sbExlZnQpLHMudG9wPU1hdGguZmxvb3IoaS50b3ApK01hdGgubWF4KG8uZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCxvLmJvZHkuc2Nyb2xsVG9wKSxzLmxlZnQtPW8uZG9jdW1lbnRFbGVtZW50LmNsaWVudExlZnQscy50b3AtPW8uZG9jdW1lbnRFbGVtZW50LmNsaWVudFRvcDt2YXIgYz1vLmJvZHksdT1wYXJzZUludChyKGMsXCJib3JkZXJMZWZ0V2lkdGhcIikpLGg9cGFyc2VJbnQocihjLFwiYm9yZGVyVG9wV2lkdGhcIikpO2EuaWUmJiFhLmlzU3RyaWN0JiYocy5sZWZ0LT1pc05hTih1KT8yOnUscy50b3AtPWlzTmFOKGgpPzI6aCl9ZWxzZXtuPXQ7ZG97aWYocy5sZWZ0Kz1uLm9mZnNldExlZnQscy50b3ArPW4ub2Zmc2V0VG9wLGEuaXNXZWJraXQ+MCYmXCJmaXhlZFwiPT1yKG4sXCJwb3NpdGlvblwiKSl7cy5sZWZ0Kz1vLmJvZHkuc2Nyb2xsTGVmdCxzLnRvcCs9by5ib2R5LnNjcm9sbFRvcDticmVha31uPW4ub2Zmc2V0UGFyZW50fXdoaWxlKG4mJm4hPXQpO2ZvcigoYS5vcGVyYT4wfHxhLmlzV2Via2l0PjAmJlwiYWJzb2x1dGVcIj09cih0LFwicG9zaXRpb25cIikpJiYocy50b3AtPW8uYm9keS5vZmZzZXRUb3ApLG49dC5vZmZzZXRQYXJlbnQ7biYmbiE9by5ib2R5OylzLmxlZnQtPW4uc2Nyb2xsTGVmdCxhLm9wZXJhJiZcIlRSXCI9PW4udGFnTmFtZXx8KHMudG9wLT1uLnNjcm9sbFRvcCksbj1uLm9mZnNldFBhcmVudH1yZXR1cm4gc30sZS5ldmVudD1lLmV2ZW50fHx7fSxlLmV2ZW50Ll9saXN0ZW5lcnM9ZS5ldmVudC5fbGlzdGVuZXJzfHxbXSxlLmV2ZW50Lm9uPWZ1bmN0aW9uKHQsbixpKXtuPW4ucmVwbGFjZSgvXm9uL2ksXCJcIiksdD1lLmRvbS5fZyh0KTt2YXIgbyxhPWZ1bmN0aW9uKGUpe2kuY2FsbCh0LGUpfSxyPWUuZXZlbnQuX2xpc3RlbmVycyxzPWUuZXZlbnQuX2V2ZW50RmlsdGVyLGw9bjtyZXR1cm4gbj1uLnRvTG93ZXJDYXNlKCkscyYmc1tuXSYmKG89c1tuXSh0LG4sYSksbD1vLnR5cGUsYT1vLmxpc3RlbmVyKSx0LmFkZEV2ZW50TGlzdGVuZXI/dC5hZGRFdmVudExpc3RlbmVyKGwsYSwhMSk6dC5hdHRhY2hFdmVudCYmdC5hdHRhY2hFdmVudChcIm9uXCIrbCxhKSxyW3IubGVuZ3RoXT1bdCxuLGksYSxsXSx0fSxlLm9uPWUuZXZlbnQub24sZnVuY3Rpb24oKXt2YXIgdD1uW2UuZ3VpZF07ZS5sYW5nLmd1aWQ9ZnVuY3Rpb24oKXtyZXR1cm5cIlRBTkdSQU1fX1wiKyh0Ll9jb3VudGVyKyspLnRvU3RyaW5nKDM2KX0sdC5fY291bnRlcj10Ll9jb3VudGVyfHwxfSgpLG5bZS5ndWlkXS5faW5zdGFuY2VzPW5bZS5ndWlkXS5faW5zdGFuY2VzfHx7fSxlLmxhbmcuaXNGdW5jdGlvbj1mdW5jdGlvbih0KXtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX0sZS5sYW5nLkNsYXNzPWZ1bmN0aW9uKHQpe3RoaXMuZ3VpZD10fHxlLmxhbmcuZ3VpZCgpLG5bZS5ndWlkXS5faW5zdGFuY2VzW3RoaXMuZ3VpZF09dGhpc30sbltlLmd1aWRdLl9pbnN0YW5jZXM9bltlLmd1aWRdLl9pbnN0YW5jZXN8fHt9LGUubGFuZy5DbGFzcy5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe2RlbGV0ZSBuW2UuZ3VpZF0uX2luc3RhbmNlc1t0aGlzLmd1aWRdO2Zvcih2YXIgdCBpbiB0aGlzKWUubGFuZy5pc0Z1bmN0aW9uKHRoaXNbdF0pfHxkZWxldGUgdGhpc1t0XTt0aGlzLmRpc3Bvc2VkPSEwfSxlLmxhbmcuQ2xhc3MucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IFwiKyh0aGlzLl9jbGFzc05hbWV8fFwiT2JqZWN0XCIpK1wiXVwifSxlLmxhbmcuRXZlbnQ9ZnVuY3Rpb24odCxlKXt0aGlzLnR5cGU9dCx0aGlzLnJldHVyblZhbHVlPSEwLHRoaXMudGFyZ2V0PWV8fG51bGwsdGhpcy5jdXJyZW50VGFyZ2V0PW51bGx9LGUubGFuZy5DbGFzcy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbih0LG4saSl7aWYoZS5sYW5nLmlzRnVuY3Rpb24obikpeyF0aGlzLl9fbGlzdGVuZXJzJiYodGhpcy5fX2xpc3RlbmVycz17fSk7dmFyIG8sYT10aGlzLl9fbGlzdGVuZXJzO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpJiZpKXtpZigvW15cXHdcXC1dLy50ZXN0KGkpKXRocm93XCJub25zdGFuZGFyZCBrZXk6XCIraTtuLmhhc2hDb2RlPWksbz1pfTAhPXQuaW5kZXhPZihcIm9uXCIpJiYodD1cIm9uXCIrdCksXCJvYmplY3RcIiE9dHlwZW9mIGFbdF0mJihhW3RdPXt9KSxvPW98fGUubGFuZy5ndWlkKCksbi5oYXNoQ29kZT1vLGFbdF1bb109bn19LGUubGFuZy5DbGFzcy5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbih0LG4pe2lmKHZvaWQgMD09PW58fCghZS5sYW5nLmlzRnVuY3Rpb24obil8fChuPW4uaGFzaENvZGUpKSYmZS5sYW5nLmlzU3RyaW5nKG4pKXshdGhpcy5fX2xpc3RlbmVycyYmKHRoaXMuX19saXN0ZW5lcnM9e30pLDAhPXQuaW5kZXhPZihcIm9uXCIpJiYodD1cIm9uXCIrdCk7dmFyIGk9dGhpcy5fX2xpc3RlbmVycztpZihpW3RdKWlmKHZvaWQgMCE9PW4paVt0XVtuXSYmZGVsZXRlIGlbdF1bbl07ZWxzZSBmb3IodmFyIG8gaW4gaVt0XSlkZWxldGUgaVt0XVtvXX19LGUubGFuZy5DbGFzcy5wcm90b3R5cGUuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbih0LG4pe2UubGFuZy5pc1N0cmluZyh0KSYmKHQ9bmV3IGUubGFuZy5FdmVudCh0KSksIXRoaXMuX19saXN0ZW5lcnMmJih0aGlzLl9fbGlzdGVuZXJzPXt9KSxuPW58fHt9O2Zvcih2YXIgaSBpbiBuKXRbaV09bltpXTt2YXIgaSxvPXRoaXMuX19saXN0ZW5lcnMsYT10LnR5cGU7aWYodC50YXJnZXQ9dC50YXJnZXR8fHRoaXMsdC5jdXJyZW50VGFyZ2V0PXRoaXMsMCE9YS5pbmRleE9mKFwib25cIikmJihhPVwib25cIithKSxlLmxhbmcuaXNGdW5jdGlvbih0aGlzW2FdKSYmdGhpc1thXS5hcHBseSh0aGlzLGFyZ3VtZW50cyksXCJvYmplY3RcIj09dHlwZW9mIG9bYV0pZm9yKGkgaW4gb1thXSlvW2FdW2ldLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gdC5yZXR1cm5WYWx1ZX0sZS5sYW5nLmluaGVyaXRzPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxvLGE9dC5wcm90b3R5cGUscj1uZXcgRnVuY3Rpb247ci5wcm90b3R5cGU9ZS5wcm90b3R5cGUsbz10LnByb3RvdHlwZT1uZXcgcjtmb3IoaSBpbiBhKW9baV09YVtpXTt0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10LHQuc3VwZXJDbGFzcz1lLnByb3RvdHlwZSxcInN0cmluZ1wiPT10eXBlb2YgbiYmKG8uX2NsYXNzTmFtZT1uKX0sZS5pbmhlcml0cz1lLmxhbmcuaW5oZXJpdHM7dmFyIGk9ZnVuY3Rpb24oZSxuLG8pe3RyeXtCTWFwfWNhdGNoKHQpe3Rocm93IEVycm9yKFwiQmFpZHUgTWFwIEpTIEFQSSBpcyBub3QgcmVhZHkgeWV0IVwiKX10LmxhbmcuaW5oZXJpdHMoaSxCTWFwLk92ZXJsYXksXCJUZXh0SWNvbk92ZXJsYXlcIiksdGhpcy5fcG9zaXRpb249ZSx0aGlzLl90ZXh0PW4sdGhpcy5fb3B0aW9ucz1vfHx7fSx0aGlzLl9zdHlsZXM9dGhpcy5fb3B0aW9ucy5zdHlsZXN8fFtdLCF0aGlzLl9zdHlsZXMubGVuZ3RoJiZ0aGlzLl9zZXR1cERlZmF1bHRTdHlsZXMoKX07cmV0dXJuIGkucHJvdG90eXBlLl9zZXR1cERlZmF1bHRTdHlsZXM9ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT1bNTMsNTYsNjYsNzgsOTBdLG49MDt0PWVbbl07bisrKXRoaXMuX3N0eWxlcy5wdXNoKHt1cmw6XCJodHRwOi8vYXBpLm1hcC5iYWlkdS5jb20vbGlicmFyeS9UZXh0SWNvbk92ZXJsYXkvMS4yL3NyYy9pbWFnZXMvbVwiK24rXCIucG5nXCIsc2l6ZTpuZXcgQk1hcC5TaXplKHQsdCl9KX0saS5wcm90b3R5cGUuaW5pdGlhbGl6ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fbWFwPXQsdGhpcy5fZG9tRWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuX3VwZGF0ZUNzcygpLHRoaXMuX3VwZGF0ZVRleHQoKSx0aGlzLl91cGRhdGVQb3NpdGlvbigpLHRoaXMuX2JpbmQoKSx0aGlzLl9tYXAuZ2V0UGFuZXMoKS5tYXJrZXJNb3VzZVRhcmdldC5hcHBlbmRDaGlsZCh0aGlzLl9kb21FbGVtZW50KSx0aGlzLl9kb21FbGVtZW50fSxpLnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKCl7dGhpcy5fbWFwJiZ0aGlzLl91cGRhdGVQb3NpdGlvbigpfSxpLnByb3RvdHlwZS5nZXRUZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RleHR9LGkucHJvdG90eXBlLnNldFRleHQ9ZnVuY3Rpb24odCl7IXR8fHRoaXMuX3RleHQmJnRoaXMuX3RleHQudG9TdHJpbmcoKT09dC50b1N0cmluZygpfHwodGhpcy5fdGV4dD10LHRoaXMuX3VwZGF0ZVRleHQoKSx0aGlzLl91cGRhdGVDc3MoKSx0aGlzLl91cGRhdGVQb3NpdGlvbigpKX0saS5wcm90b3R5cGUuZ2V0UG9zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcG9zaXRpb259LGkucHJvdG90eXBlLnNldFBvc2l0aW9uPWZ1bmN0aW9uKHQpeyF0fHx0aGlzLl9wb3NpdGlvbiYmdGhpcy5fcG9zaXRpb24uZXF1YWxzKHQpfHwodGhpcy5fcG9zaXRpb249dCx0aGlzLl91cGRhdGVQb3NpdGlvbigpKX0saS5wcm90b3R5cGUuZ2V0U3R5bGVCeVRleHQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1wYXJzZUludCh0KSxpPXBhcnNlSW50KG4vMTApO3JldHVybiBpPU1hdGgubWF4KDAsaSksaT1NYXRoLm1pbihpLGUubGVuZ3RoLTEpLGVbaV19LGkucHJvdG90eXBlLl91cGRhdGVDc3M9ZnVuY3Rpb24oKXtpZih0aGlzLl9kb21FbGVtZW50KXt2YXIgdD10aGlzLmdldFN0eWxlQnlUZXh0KHRoaXMuX3RleHQsdGhpcy5fc3R5bGVzKTt0aGlzLl9kb21FbGVtZW50LnN0eWxlLmNzc1RleHQ9dGhpcy5fYnVpbGRDc3NUZXh0KHQpfX0saS5wcm90b3R5cGUuX3VwZGF0ZVRleHQ9ZnVuY3Rpb24oKXt0aGlzLl9kb21FbGVtZW50JiYodGhpcy5fZG9tRWxlbWVudC5pbm5lckhUTUw9dGhpcy5fdGV4dCl9LGkucHJvdG90eXBlLl91cGRhdGVQb3NpdGlvbj1mdW5jdGlvbigpe2lmKHRoaXMuX2RvbUVsZW1lbnQmJnRoaXMuX3Bvc2l0aW9uKXt2YXIgdD10aGlzLl9kb21FbGVtZW50LnN0eWxlLGU9dGhpcy5fbWFwLnBvaW50VG9PdmVybGF5UGl4ZWwodGhpcy5fcG9zaXRpb24pO2UueC09TWF0aC5jZWlsKHBhcnNlSW50KHQud2lkdGgpLzIpLGUueS09TWF0aC5jZWlsKHBhcnNlSW50KHQuaGVpZ2h0KS8yKSx0LmxlZnQ9ZS54K1wicHhcIix0LnRvcD1lLnkrXCJweFwifX0saS5wcm90b3R5cGUuX2J1aWxkQ3NzVGV4dD1mdW5jdGlvbihlKXt2YXIgbj1lLnVybCxpPWUuc2l6ZSxvPWUuYW5jaG9yLGE9ZS5vZmZzZXQscj1lLnRleHRDb2xvcnx8XCJibGFja1wiLHM9ZS50ZXh0U2l6ZXx8MTAsbD1bXTtpZih0LmJyb3dzZXIuaWU8NylsLnB1c2goJ2ZpbHRlcjpwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGFJbWFnZUxvYWRlcihzaXppbmdNZXRob2Q9c2NhbGUsc3JjPVwiJytuKydcIik7Jyk7ZWxzZXtsLnB1c2goXCJiYWNrZ3JvdW5kLWltYWdlOnVybChcIituK1wiKTtcIik7dmFyIGM9XCIwIDBcIjthIGluc3RhbmNlb2YgQk1hcC5TaXplJiYoYz1hLndpZHRoK1wicHggXCIrYS5oZWlnaHQrXCJweFwiKSxsLnB1c2goXCJiYWNrZ3JvdW5kLXBvc2l0aW9uOlwiK2MrXCI7XCIpfXJldHVybiBpIGluc3RhbmNlb2YgQk1hcC5TaXplJiYobyBpbnN0YW5jZW9mIEJNYXAuU2l6ZT8oby5oZWlnaHQ+MCYmby5oZWlnaHQ8aS5oZWlnaHQmJmwucHVzaChcImhlaWdodDpcIisoaS5oZWlnaHQtby5oZWlnaHQpK1wicHg7IHBhZGRpbmctdG9wOlwiK28uaGVpZ2h0K1wicHg7XCIpLG8ud2lkdGg+MCYmby53aWR0aDxpLndpZHRoJiZsLnB1c2goXCJ3aWR0aDpcIisoaS53aWR0aC1vLndpZHRoKStcInB4OyBwYWRkaW5nLWxlZnQ6XCIrby53aWR0aCtcInB4O1wiKSk6KGwucHVzaChcImhlaWdodDpcIitpLmhlaWdodCtcInB4OyBsaW5lLWhlaWdodDpcIitpLmhlaWdodCtcInB4O1wiKSxsLnB1c2goXCJ3aWR0aDpcIitpLndpZHRoK1wicHg7IHRleHQtYWxpZ246Y2VudGVyO1wiKSkpLGwucHVzaChcImN1cnNvcjpwb2ludGVyOyBjb2xvcjpcIityK1wiOyBwb3NpdGlvbjphYnNvbHV0ZTsgZm9udC1zaXplOlwiK3MrXCJweDsgZm9udC1mYW1pbHk6QXJpYWwsc2Fucy1zZXJpZjsgZm9udC13ZWlnaHQ6Ym9sZFwiKSxsLmpvaW4oXCJcIil9LGkucHJvdG90eXBlLl9iaW5kPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLG4pe3ZhciBvPWUuc3JjRWxlbWVudHx8ZS50YXJnZXQsYT1lLmNsaWVudFh8fGUucGFnZVgscj1lLmNsaWVudFl8fGUucGFnZVk7aWYoZSYmbiYmYSYmciYmbyl7dmFyIHM9dC5kb20uZ2V0UG9zaXRpb24oaS5nZXRDb250YWluZXIoKSk7bi5waXhlbD1uZXcgQk1hcC5QaXhlbChhLXMubGVmdCxyLXMudG9wKSxuLnBvaW50PWkucGl4ZWxUb1BvaW50KG4ucGl4ZWwpfXJldHVybiBufWlmKHRoaXMuX2RvbUVsZW1lbnQpe3ZhciBuPXRoaXMsaT10aGlzLl9tYXAsbz10LmxhbmcuRXZlbnQ7dC5ldmVudC5vbih0aGlzLl9kb21FbGVtZW50LFwibW91c2VvdmVyXCIsZnVuY3Rpb24odCl7bi5kaXNwYXRjaEV2ZW50KGUodCxuZXcgbyhcIm9ubW91c2VvdmVyXCIpKSl9KSx0LmV2ZW50Lm9uKHRoaXMuX2RvbUVsZW1lbnQsXCJtb3VzZW91dFwiLGZ1bmN0aW9uKHQpe24uZGlzcGF0Y2hFdmVudChlKHQsbmV3IG8oXCJvbm1vdXNlb3V0XCIpKSl9KSx0LmV2ZW50Lm9uKHRoaXMuX2RvbUVsZW1lbnQsXCJjbGlja1wiLGZ1bmN0aW9uKHQpe24uZGlzcGF0Y2hFdmVudChlKHQsbmV3IG8oXCJvbmNsaWNrXCIpKSl9KX19LGl9KX0pLHM9ciYmXCJvYmplY3RcIj09dHlwZW9mIHImJlwiZGVmYXVsdFwiaW4gcj9yLmRlZmF1bHQ6cixsPWZ1bmN0aW9uKHQsZSxuKXtlPWMoZSk7dmFyIGk9dC5wb2ludFRvUGl4ZWwoZS5nZXROb3J0aEVhc3QoKSksbz10LnBvaW50VG9QaXhlbChlLmdldFNvdXRoV2VzdCgpKTtpLngrPW4saS55LT1uLG8ueC09bixvLnkrPW47dmFyIGE9dC5waXhlbFRvUG9pbnQoaSkscj10LnBpeGVsVG9Qb2ludChvKTtyZXR1cm4gbmV3IEJNYXAuQm91bmRzKHIsYSl9LGM9ZnVuY3Rpb24odCl7dmFyIGU9dSh0LmdldE5vcnRoRWFzdCgpLmxuZywtMTgwLDE4MCksbj11KHQuZ2V0U291dGhXZXN0KCkubG5nLC0xODAsMTgwKSxpPXUodC5nZXROb3J0aEVhc3QoKS5sYXQsLTc0LDc0KSxvPXUodC5nZXRTb3V0aFdlc3QoKS5sYXQsLTc0LDc0KTtyZXR1cm4gbmV3IEJNYXAuQm91bmRzKG5ldyBCTWFwLlBvaW50KG4sbyksbmV3IEJNYXAuUG9pbnQoZSxpKSl9LHU9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlJiYodD1NYXRoLm1heCh0LGUpKSxuJiYodD1NYXRoLm1pbih0LG4pKSx0fSxoPWZ1bmN0aW9uKHQpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX0scD1mdW5jdGlvbih0LGUpe3ZhciBuPS0xO2lmKGgoZSkpaWYoZS5pbmRleE9mKW49ZS5pbmRleE9mKHQpO2Vsc2UgZm9yKHZhciBpLG89MDtpPWVbb107bysrKWlmKGk9PT10KXtuPW87YnJlYWt9cmV0dXJuIG59LGQ9ZnVuY3Rpb24odCxlKXt0cnl7Qk1hcH1jYXRjaCh0KXt0aHJvdyBFcnJvcihcIkJhaWR1IE1hcCBKUyBBUEkgaXMgbm90IHJlYWR5IHlldCFcIil9aWYodCl7dGhpcy5fbWFwPXQsdGhpcy5fbWFya2Vycz1bXSx0aGlzLl9jbHVzdGVycz1bXTt2YXIgbj1lfHx7fTt0aGlzLl9ncmlkU2l6ZT1uLmdyaWRTaXplfHw2MCx0aGlzLl9tYXhab29tPW4ubWF4Wm9vbXx8MTgsdGhpcy5fbWluQ2x1c3RlclNpemU9bi5taW5DbHVzdGVyU2l6ZXx8Mix0aGlzLl9pc0F2ZXJhZ2VDZW50ZXI9ITEsdm9pZCAwIT1uLmlzQXZlcmFnZUNlbnRlciYmKHRoaXMuX2lzQXZlcmFnZUNlbnRlcj1uLmlzQXZlcmFnZUNlbnRlciksdGhpcy5fc3R5bGVzPW4uc3R5bGVzfHxbXTt2YXIgaT10aGlzO3RoaXMuX21hcC5hZGRFdmVudExpc3RlbmVyKFwiem9vbWVuZFwiLGZ1bmN0aW9uKCl7aS5fcmVkcmF3KCl9KSx0aGlzLl9tYXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdmVlbmRcIixmdW5jdGlvbigpe2kuX3JlZHJhdygpfSk7dmFyIG89bi5tYXJrZXJzO2gobykmJnRoaXMuYWRkTWFya2VycyhvKX19O3JldHVybiBkLnByb3RvdHlwZS5hZGRNYXJrZXJzPWZ1bmN0aW9uKHQpe2lmKHQubGVuZ3RoKXtmb3IodmFyIGU9MCxuPXQubGVuZ3RoO2U8bjtlKyspdGhpcy5fcHVzaE1hcmtlclRvKHRbZV0pO3RoaXMuX2NyZWF0ZUNsdXN0ZXJzKCl9fSxkLnByb3RvdHlwZS5fcHVzaE1hcmtlclRvPWZ1bmN0aW9uKHQpey0xPT09cCh0LHRoaXMuX21hcmtlcnMpJiYodC5pc0luQ2x1c3Rlcj0hMSx0aGlzLl9tYXJrZXJzLnB1c2godCkpfSxkLnByb3RvdHlwZS5hZGRNYXJrZXI9ZnVuY3Rpb24odCl7dGhpcy5fcHVzaE1hcmtlclRvKHQpLHRoaXMuX2NyZWF0ZUNsdXN0ZXJzKCl9LGQucHJvdG90eXBlLl9jcmVhdGVDbHVzdGVycz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX21hcC5nZXRCb3VuZHMoKTtpZih0LmdldENlbnRlcigpKWZvcih2YXIgZSxuPWwodGhpcy5fbWFwLHQsdGhpcy5fZ3JpZFNpemUpLGk9MDtlPXRoaXMuX21hcmtlcnNbaV07aSsrKSFlLmlzSW5DbHVzdGVyJiZuLmNvbnRhaW5zUG9pbnQoZS5nZXRQb3NpdGlvbigpKSYmdGhpcy5fYWRkVG9DbG9zZXN0Q2x1c3RlcihlKX0sZC5wcm90b3R5cGUuX2FkZFRvQ2xvc2VzdENsdXN0ZXI9ZnVuY3Rpb24oZSl7Zm9yKHZhciBuLGk9NGU2LG89bnVsbCxhPShlLmdldFBvc2l0aW9uKCksMCk7bj10aGlzLl9jbHVzdGVyc1thXTthKyspe3ZhciByPW4uZ2V0Q2VudGVyKCk7aWYocil7dmFyIHM9dGhpcy5fbWFwLmdldERpc3RhbmNlKHIsZS5nZXRQb3NpdGlvbigpKTtzPGkmJihpPXMsbz1uKX19aWYobyYmby5pc01hcmtlckluQ2x1c3RlckJvdW5kcyhlKSlvLmFkZE1hcmtlcihlKTtlbHNle3ZhciBuPW5ldyB0KHRoaXMpO24uYWRkTWFya2VyKGUpLHRoaXMuX2NsdXN0ZXJzLnB1c2gobil9fSxkLnByb3RvdHlwZS5fY2xlYXJMYXN0Q2x1c3RlcnM9ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT0wO3Q9dGhpcy5fY2x1c3RlcnNbZV07ZSsrKXQucmVtb3ZlKCk7dGhpcy5fY2x1c3RlcnM9W10sdGhpcy5fcmVtb3ZlTWFya2Vyc0Zyb21DbHVzdGVyKCl9LGQucHJvdG90eXBlLl9yZW1vdmVNYXJrZXJzRnJvbUNsdXN0ZXI9ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT0wO3Q9dGhpcy5fbWFya2Vyc1tlXTtlKyspdC5pc0luQ2x1c3Rlcj0hMX0sZC5wcm90b3R5cGUuX3JlbW92ZU1hcmtlcnNGcm9tTWFwPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGU9MDt0PXRoaXMuX21hcmtlcnNbZV07ZSsrKXt0LmlzSW5DbHVzdGVyPSExO3ZhciBuPXQuZ2V0TGFiZWwoKTt0aGlzLl9tYXAucmVtb3ZlT3ZlcmxheSh0KSx0LnNldExhYmVsKG4pfX0sZC5wcm90b3R5cGUuX3JlbW92ZU1hcmtlcj1mdW5jdGlvbih0KXt2YXIgZT1wKHQsdGhpcy5fbWFya2Vycyk7cmV0dXJuLTEhPT1lJiYodGhpcy5fbWFwLnJlbW92ZU92ZXJsYXkodCksdGhpcy5fbWFya2Vycy5zcGxpY2UoZSwxKSwhMCl9LGQucHJvdG90eXBlLnJlbW92ZU1hcmtlcj1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9yZW1vdmVNYXJrZXIodCk7cmV0dXJuIGUmJih0aGlzLl9jbGVhckxhc3RDbHVzdGVycygpLHRoaXMuX2NyZWF0ZUNsdXN0ZXJzKCkpLGV9LGQucHJvdG90eXBlLnJlbW92ZU1hcmtlcnM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPSExLG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIGk9dGhpcy5fcmVtb3ZlTWFya2VyKHRbbl0pO2U9ZXx8aX1yZXR1cm4gZSYmKHRoaXMuX2NsZWFyTGFzdENsdXN0ZXJzKCksdGhpcy5fY3JlYXRlQ2x1c3RlcnMoKSksZX0sZC5wcm90b3R5cGUuY2xlYXJNYXJrZXJzPWZ1bmN0aW9uKCl7dGhpcy5fY2xlYXJMYXN0Q2x1c3RlcnMoKSx0aGlzLl9yZW1vdmVNYXJrZXJzRnJvbU1hcCgpLHRoaXMuX21hcmtlcnM9W119LGQucHJvdG90eXBlLl9yZWRyYXc9ZnVuY3Rpb24oKXt0aGlzLl9jbGVhckxhc3RDbHVzdGVycygpLHRoaXMuX2NyZWF0ZUNsdXN0ZXJzKCl9LGQucHJvdG90eXBlLmdldEdyaWRTaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2dyaWRTaXplfSxkLnByb3RvdHlwZS5zZXRHcmlkU2l6ZT1mdW5jdGlvbih0KXt0aGlzLl9ncmlkU2l6ZT10LHRoaXMuX3JlZHJhdygpfSxkLnByb3RvdHlwZS5nZXRNYXhab29tPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21heFpvb219LGQucHJvdG90eXBlLnNldE1heFpvb209ZnVuY3Rpb24odCl7dGhpcy5fbWF4Wm9vbT10LHRoaXMuX3JlZHJhdygpfSxkLnByb3RvdHlwZS5nZXRTdHlsZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3R5bGVzfSxkLnByb3RvdHlwZS5zZXRTdHlsZXM9ZnVuY3Rpb24odCl7dGhpcy5fc3R5bGVzPXQsdGhpcy5fcmVkcmF3KCl9LGQucHJvdG90eXBlLmdldE1pbkNsdXN0ZXJTaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21pbkNsdXN0ZXJTaXplfSxkLnByb3RvdHlwZS5zZXRNaW5DbHVzdGVyU2l6ZT1mdW5jdGlvbih0KXt0aGlzLl9taW5DbHVzdGVyU2l6ZT10LHRoaXMuX3JlZHJhdygpfSxkLnByb3RvdHlwZS5pc0F2ZXJhZ2VDZW50ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNBdmVyYWdlQ2VudGVyfSxkLnByb3RvdHlwZS5nZXRNYXA9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWFwfSxkLnByb3RvdHlwZS5nZXRNYXJrZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21hcmtlcnN9LGQucHJvdG90eXBlLmdldENsdXN0ZXJzQ291bnQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT0wLG49MDt0PXRoaXMuX2NsdXN0ZXJzW25dO24rKyl0LmlzUmVhbCgpJiZlKys7cmV0dXJuIGV9LHQucHJvdG90eXBlLmFkZE1hcmtlcj1mdW5jdGlvbih0KXtpZih0aGlzLmlzTWFya2VySW5DbHVzdGVyKHQpKXJldHVybiExO2lmKHRoaXMuX2NlbnRlcil7aWYodGhpcy5faXNBdmVyYWdlQ2VudGVyKXt2YXIgZT10aGlzLl9tYXJrZXJzLmxlbmd0aCsxLG49KHRoaXMuX2NlbnRlci5sYXQqKGUtMSkrdC5nZXRQb3NpdGlvbigpLmxhdCkvZSxpPSh0aGlzLl9jZW50ZXIubG5nKihlLTEpK3QuZ2V0UG9zaXRpb24oKS5sbmcpL2U7dGhpcy5fY2VudGVyPW5ldyBCTWFwLlBvaW50KGksbiksdGhpcy51cGRhdGVHcmlkQm91bmRzKCl9fWVsc2UgdGhpcy5fY2VudGVyPXQuZ2V0UG9zaXRpb24oKSx0aGlzLnVwZGF0ZUdyaWRCb3VuZHMoKTt0LmlzSW5DbHVzdGVyPSEwLHRoaXMuX21hcmtlcnMucHVzaCh0KTt2YXIgbz10aGlzLl9tYXJrZXJzLmxlbmd0aDtpZihvPHRoaXMuX21pbkNsdXN0ZXJTaXplKXJldHVybiB0aGlzLl9tYXAuYWRkT3ZlcmxheSh0KSwhMDtpZihvPT09dGhpcy5fbWluQ2x1c3RlclNpemUpZm9yKHZhciBhPTA7YTxvO2ErKyl7dmFyIHI9dGhpcy5fbWFya2Vyc1thXS5nZXRMYWJlbCgpO3RoaXMuX21hcmtlcnNbYV0uZ2V0TWFwKCkmJnRoaXMuX21hcC5yZW1vdmVPdmVybGF5KHRoaXMuX21hcmtlcnNbYV0pLHRoaXMuX21hcmtlcnNbYV0uc2V0TGFiZWwocil9cmV0dXJuIHRoaXMuX21hcC5hZGRPdmVybGF5KHRoaXMuX2NsdXN0ZXJNYXJrZXIpLHRoaXMuX2lzUmVhbD0hMCx0aGlzLnVwZGF0ZUNsdXN0ZXJNYXJrZXIoKSwhMH0sdC5wcm90b3R5cGUuaXNNYXJrZXJJbkNsdXN0ZXI9ZnVuY3Rpb24odCl7aWYodGhpcy5fbWFya2Vycy5pbmRleE9mKXJldHVybi0xIT10aGlzLl9tYXJrZXJzLmluZGV4T2YodCk7Zm9yKHZhciBlLG49MDtlPXRoaXMuX21hcmtlcnNbbl07bisrKWlmKGU9PT10KXJldHVybiEwO3JldHVybiExfSx0LnByb3RvdHlwZS5pc01hcmtlckluQ2x1c3RlckJvdW5kcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fZ3JpZEJvdW5kcy5jb250YWluc1BvaW50KHQuZ2V0UG9zaXRpb24oKSl9LHQucHJvdG90eXBlLmlzUmVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5faXNSZWFsfSx0LnByb3RvdHlwZS51cGRhdGVHcmlkQm91bmRzPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IEJNYXAuQm91bmRzKHRoaXMuX2NlbnRlcix0aGlzLl9jZW50ZXIpO3RoaXMuX2dyaWRCb3VuZHM9bCh0aGlzLl9tYXAsdCx0aGlzLl9tYXJrZXJDbHVzdGVyZXIuZ2V0R3JpZFNpemUoKSl9LHQucHJvdG90eXBlLnVwZGF0ZUNsdXN0ZXJNYXJrZXI9ZnVuY3Rpb24oKXtpZih0aGlzLl9tYXAuZ2V0Wm9vbSgpPnRoaXMuX21hcmtlckNsdXN0ZXJlci5nZXRNYXhab29tKCkpe3RoaXMuX2NsdXN0ZXJNYXJrZXImJnRoaXMuX21hcC5yZW1vdmVPdmVybGF5KHRoaXMuX2NsdXN0ZXJNYXJrZXIpO2Zvcih2YXIgdCxlPTA7dD10aGlzLl9tYXJrZXJzW2VdO2UrKyl0aGlzLl9tYXAuYWRkT3ZlcmxheSh0KX1lbHNle2lmKHRoaXMuX21hcmtlcnMubGVuZ3RoPHRoaXMuX21pbkNsdXN0ZXJTaXplKXJldHVybiB2b2lkIHRoaXMuX2NsdXN0ZXJNYXJrZXIuaGlkZSgpO3RoaXMuX2NsdXN0ZXJNYXJrZXIuc2V0UG9zaXRpb24odGhpcy5fY2VudGVyKSx0aGlzLl9jbHVzdGVyTWFya2VyLnNldFRleHQodGhpcy5fbWFya2Vycy5sZW5ndGgpLHRoaXMuX2NsdXN0ZXJNYXJrZXIuYWRkRXZlbnRMaXN0ZW5lciYmIXRoaXMuX2NsdXN0ZXJNYXJrZXIuX2hhc0NsaWNrRXZlbnQmJnRoaXMuX2NsdXN0ZXJNYXJrZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24odCl7dGhpcy5fY2x1c3Rlck1hcmtlci5faGFzQ2xpY2tFdmVudD0hMCx0aGlzLl9tYXJrZXJzJiZ0aGlzLl9tYXAuc2V0Vmlld3BvcnQodGhpcy5nZXRCb3VuZHMoKSl9LmJpbmQodGhpcykpfX0sdC5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dGhpcy5fbWFya2Vyc1t0XTt0Kyspe3ZhciBlPXRoaXMuX21hcmtlcnNbdF0uZ2V0TGFiZWwoKTt0aGlzLl9tYXJrZXJzW3RdLmdldE1hcCgpJiZ0aGlzLl9tYXAucmVtb3ZlT3ZlcmxheSh0aGlzLl9tYXJrZXJzW3RdKSx0aGlzLl9tYXJrZXJzW3RdLnNldExhYmVsKGUpfXRoaXMuX21hcC5yZW1vdmVPdmVybGF5KHRoaXMuX2NsdXN0ZXJNYXJrZXIpLHRoaXMuX21hcmtlcnMubGVuZ3RoPTAsZGVsZXRlIHRoaXMuX21hcmtlcnN9LHQucHJvdG90eXBlLmdldEJvdW5kcz1mdW5jdGlvbigpe2Zvcih2YXIgdCxlPW5ldyBCTWFwLkJvdW5kcyh0aGlzLl9jZW50ZXIsdGhpcy5fY2VudGVyKSxuPTA7dD10aGlzLl9tYXJrZXJzW25dO24rKyllLmV4dGVuZCh0LmdldFBvc2l0aW9uKCkpO3JldHVybiBlfSx0LnByb3RvdHlwZS5nZXRDZW50ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2VudGVyfSxkfSl9KS5jYWxsKGUsbigzKSl9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudDtyZXR1cm4odC5fc2VsZi5fY3x8ZSkoXCJkaXZcIil9LHN0YXRpY1JlbmRlckZuczpbXX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudDtyZXR1cm4odC5fc2VsZi5fY3x8ZSkoXCJkaXZcIix7ZGlyZWN0aXZlczpbe25hbWU6XCJzaG93XCIscmF3TmFtZTpcInYtc2hvd1wiLHZhbHVlOnQuc2hvdyxleHByZXNzaW9uOlwic2hvd1wifV19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudDtyZXR1cm4odC5fc2VsZi5fY3x8ZSkoXCJkaXZcIixbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJuKHQuX3NlbGYuX2N8fGUpKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTp0LnBhbmVsLGV4cHJlc3Npb246XCJwYW5lbFwifV19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudDtyZXR1cm4odC5fc2VsZi5fY3x8ZSkoXCJkaXZcIixbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJuKHQuX3NlbGYuX2N8fGUpKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTp0LnBhbmVsLGV4cHJlc3Npb246XCJwYW5lbFwifV19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudDtyZXR1cm4odC5fc2VsZi5fY3x8ZSkoXCJzcGFuXCIsW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50O3JldHVybih0Ll9zZWxmLl9jfHxlKShcInNwYW5cIixbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJuKHQuX3NlbGYuX2N8fGUpKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTp0LnBhbmVsLGV4cHJlc3Npb246XCJwYW5lbFwifV19KX0sc3RhdGljUmVuZGVyRm5zOltdfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50O3JldHVybih0Ll9zZWxmLl9jfHxlKShcImRpdlwiLHtkaXJlY3RpdmVzOlt7bmFtZTpcInNob3dcIixyYXdOYW1lOlwidi1zaG93XCIsdmFsdWU6dC5wYW5lbCxleHByZXNzaW9uOlwicGFuZWxcIn1dfSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQ7cmV0dXJuKHQuX3NlbGYuX2N8fGUpKFwiZGl2XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTp0LnBhbmVsLGV4cHJlc3Npb246XCJwYW5lbFwifV19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudDtyZXR1cm4odC5fc2VsZi5fY3x8ZSkoXCJkaXZcIixbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwic3BhblwiLFt0Ll90KFwiZGVmYXVsdFwiLFtuKFwiaW5wdXRcIildKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudDtyZXR1cm4odC5fc2VsZi5fY3x8ZSkoXCJkaXZcIixbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIsW3QuaGFzQm1WaWV3P3QuX2UoKTpuKFwiZGl2XCIse3JlZjpcInZpZXdcIixzdGF0aWNTdHlsZTp7d2lkdGg6XCIxMDAlXCIsaGVpZ2h0OlwiMTAwJVwifX0pLHQuX3YoXCIgXCIpLHQuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX1dKX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1iYWlkdS1tYXAvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n')}]);